<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络开发基础二</title>
    <link href="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <url>/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>Socket套接字是支持TCP&#x2F;IP网络通信的基本操作单位 一个套接字对象包含以下关键信息</p><p>1.本机的IP地址和端口</p><p>2.对方主机的IP地址和端口</p><p>3.双方通信的协议信息</p><p>一个Socket对象表示一个本地或者远程套接字信息 它可以被视为一个数据通道这个通道连接与客户端和服务端之间数据的发送和接受  均通过这个通道进行一般在制作长连接游戏时，我们会使用Socket套接字作为我们的通信方案</p><h3 id="Socket分为三种类型"><a href="#Socket分为三种类型" class="headerlink" title="Socket分为三种类型"></a>Socket分为三种类型</h3><ol><li>流套接字 主要用于实现TCP通信，提供了面向连接、可靠的、有序的、数据无差错且无重复的数据传输服务</li><li>数据报套接字 主要用于实现UDP通信，提供了无连接的通信服务，数据包的长度不能大于32KB，不提供正确性检查，不保证顺序，可能出现重发、丢失等情况</li><li>原始套接字（不常用） 主要用于实现IP数据包通信，用于直接访问协议的较低层，常用于侦听和分析数据包</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Socket Socket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);<br>  <span class="hljs-comment">//参数一：AddressFamily 网络寻址 枚举类型，决定寻址方案</span><br>  <span class="hljs-comment">//  常用：</span><br>  <span class="hljs-comment">//  1.InterNetwork  IPv4寻址</span><br>  <span class="hljs-comment">//  2.InterNetwork6 IPv6寻址</span><br>  <span class="hljs-comment">//  做了解：</span><br>  <span class="hljs-comment">//  1.UNIX          UNIX本地到主机地址 </span><br>  <span class="hljs-comment">//  2.ImpLink       ARPANETIMP地址</span><br>  <span class="hljs-comment">//  3.Ipx           IPX或SPX地址</span><br>  <span class="hljs-comment">//  4.Iso           ISO协议的地址</span><br>  <span class="hljs-comment">//  5.Osi           OSI协议的地址</span><br>  <span class="hljs-comment">//  7.NetBios       NetBios地址</span><br>  <span class="hljs-comment">//  9.Atm           本机ATM服务地址</span><br><br>  <span class="hljs-comment">//参数二：SocketType 套接字枚举类型，决定使用的套接字类型</span><br>  <span class="hljs-comment">//  常用：</span><br>  <span class="hljs-comment">//  1.Dgram         支持数据报，最大长度固定的无连接、不可靠的消息(主要用于UDP通信)</span><br>  <span class="hljs-comment">//  2.Stream        支持可靠、双向、基于连接的字节流（主要用于TCP通信）</span><br>  <span class="hljs-comment">//  做了解：</span><br>  <span class="hljs-comment">//  1.Raw           支持对基础传输协议的访问</span><br>  <span class="hljs-comment">//  2.Rdm           支持无连接、面向消息、以可靠方式发送的消息</span><br>  <span class="hljs-comment">//  3.Seqpacket     提供排序字节流的面向连接且可靠的双向传输</span><br><br>  <span class="hljs-comment">//参数三：ProtocolType 协议类型枚举类型，决定套接字使用的通信协议</span><br>  <span class="hljs-comment">//  常用：</span><br>  <span class="hljs-comment">//  1.TCP           TCP传输控制协议</span><br>  <span class="hljs-comment">//  2.UDP           UDP用户数据报协议</span><br>  <span class="hljs-comment">//  做了解：</span><br>  <span class="hljs-comment">//  1.IP            IP网际协议</span><br>  <span class="hljs-comment">//  2.Icmp          Icmp网际消息控制协议</span><br>  <span class="hljs-comment">//  3.Igmp          Igmp网际组管理协议</span><br>  <span class="hljs-comment">//  4.Ggp           网关到网关协议</span><br>  <span class="hljs-comment">//  5.IPv4          Internet协议版本4</span><br>  <span class="hljs-comment">//  6.Pup           PARC通用数据包协议</span><br>  <span class="hljs-comment">//  7.Idp           Internet数据报协议</span><br>  <span class="hljs-comment">//  8.Raw           原始IP数据包协议</span><br>  <span class="hljs-comment">//  9.Ipx           Internet数据包交换协议</span><br>  <span class="hljs-comment">//  10.Spx          顺序包交换协议</span><br>  <span class="hljs-comment">//  11.IcmpV6       用于IPv6的Internet控制消息协议</span><br><br>  <span class="hljs-comment">//2、3参数的常用搭配：</span><br>  <span class="hljs-comment">//       SocketType.Dgram  +  ProtocolType.Udp  = UDP协议通信（常用，主要学习）</span><br>  <span class="hljs-comment">//       SocketType.Stream  +  ProtocolType.Tcp  = TCP协议通信（常用，主要学习）</span><br>  <span class="hljs-comment">//       SocketType.Raw  +  ProtocolType.Icmp  = Internet控制报文协议（了解）</span><br>  <span class="hljs-comment">//       SocketType.Raw  +  ProtocolType.Raw  = 简单的IP包通信（了解）</span><br></code></pre></td></tr></table></figure><h4 id="Socket客户端-服务器链接-流程"><a href="#Socket客户端-服务器链接-流程" class="headerlink" title="Socket客户端 服务器链接 流程"></a>Socket客户端 服务器链接 流程</h4><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125217923.png" class="" title="image-20231101125217923"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//声明tcpSocket</span><br>            Socket tcp = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span>);<br>                tcp.Bind(ipPoint); <span class="hljs-comment">//绑定IP端口</span><br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">&quot;绑定报错&quot;</span> + e.Message);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            tcp.Listen(<span class="hljs-number">1024</span>); <span class="hljs-comment">//监听连接数</span><br>            Console.WriteLine(<span class="hljs-string">&quot;等待客户端连入&quot;</span>);<br>            <span class="hljs-keyword">var</span> socketClient = tcp.Accept(); <span class="hljs-comment">//链接</span><br>            Console.WriteLine(<span class="hljs-string">&quot;客户端连入&quot;</span>);<br>            socketClient.Send(<span class="hljs-string">&quot;欢迎连入&quot;</span>u8.ToArray()); <span class="hljs-comment">//发送消息</span><br>            <span class="hljs-built_in">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">var</span> receiveNum = socketClient.Receive(result); <span class="hljs-comment">//接收消息</span><br><br>            Console.WriteLine(<span class="hljs-string">&quot;接收到了&#123;0&#125;发来的消息:&#123;1&#125;&quot;</span>, socketClient.RemoteEndPoint.ToString(),<br>                Encoding.UTF8.GetString(result, <span class="hljs-number">0</span>, receiveNum));<br><br>            socketClient.Shutdown(SocketShutdown.Both); <span class="hljs-comment">//释放套接字的发送和接收</span><br>            socketClient.Close(); <span class="hljs-comment">//关闭套接字</span><br><br>            Console.WriteLine(<span class="hljs-string">&quot;按任意键退出&quot;</span>);<br>            Console.ReadKey();<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SocketTest</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-comment">//寻址方式 套接字类型 传输控制协议</span><br>        <span class="hljs-keyword">private</span> Socket _tcp = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//_tcp.SocketType 类型</span><br>            <span class="hljs-comment">//_tcp.ProtocolType 协议类型</span><br>            <span class="hljs-comment">// _tcp.AddressFamily 寻址方式</span><br>            <span class="hljs-comment">//_tcp.Available; //可读取的字节数 准备读取的数据量</span><br>            <span class="hljs-comment">//_tcp.LocalEndPoint as IPEndPoint; //本地端点</span><br>            <span class="hljs-comment">// _tcp.RemoteEndPoint as IPEndPoint; 远程端点</span><br><br>            <span class="hljs-comment">//主要用于服务器端 这里是同步 都带有异步的方法</span><br>            IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>);<br>            _tcp.Bind(ipPoint); <span class="hljs-comment">//绑定IP.端口</span><br>            _tcp.Listen(<span class="hljs-number">99</span>); <span class="hljs-comment">//监听客户端连接请求 99表示最大连接数</span><br>            _tcp.Accept(); <span class="hljs-comment">//接受客户端连接请求  </span><br><br>            <span class="hljs-comment">//主要用于客户端</span><br>            _tcp.Connect(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>); <span class="hljs-comment">//连接服务器</span><br>            <span class="hljs-comment">//都会用的</span><br>            <span class="hljs-comment">//_tcp.Send(bytes) _tcp.Receive(bytes);//发送和接收数据</span><br>            _tcp.Shutdown(SocketShutdown.Both); <span class="hljs-comment">//禁用套接字的发送和接收</span><br>            _tcp.Close(); <span class="hljs-comment">//关闭套接字</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                IPEndPoint ipEndPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span>); <span class="hljs-comment">//因为连接是自己 所以用本地IP</span><br>                _tcp.Connect(ipEndPoint);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (SocketException e)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (e.ErrorCode == <span class="hljs-number">10086</span>)<br>                &#123;<br>                    print(<span class="hljs-string">&quot;连接被服务器拒绝&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    print(<span class="hljs-string">&quot;连接服务器失败&quot;</span> + e.ErrorCode);<br>            &#125;<br><br>            <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-built_in">int</span> receiveNum = _tcp.Receive(bytes);<br>            print(<span class="hljs-string">&quot;接收到了&quot;</span> + _tcp.RemoteEndPoint + <span class="hljs-string">&quot;发来的消息:&quot;</span> + Encoding.UTF8.GetString(bytes, <span class="hljs-number">0</span>, receiveNum));<br>            _tcp.Send(Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;你好服务器&quot;</span>));<br><br>            _tcp.Shutdown(SocketShutdown.Both);<br>            _tcp.Close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>区分消息类型</p><p>当我们将序列化的二进制消息发送给对象的时候，这些数据对象序列后是不同长度的字节数组，该如何区分 选择对应的数据类反序列化它们</p><p>解决方案：  定义自己的规则</p><p>为发送的消息添加标识，比如添加消息ID 在所有发送的消息的头部加上消息ID(int，short byte long)都可以，</p><p>如果是使用int 例如 前面4个字节为消息ID 后面才是消息内容 那么将我们收到消息后 先解析消息ID 就能得到序列化的这个二进制数组是属于哪个数据类的</p><p>只需要注意在反序列化的时候 不需要反序列ID 因为ID需要在反序列化数据前就解析出来 再通过ID来判断是不是那个数据</p><h3 id="分包-粘包内容"><a href="#分包-粘包内容" class="headerlink" title="分包 粘包内容"></a>分包 粘包内容</h3><p>注：UDP是不可靠连接 链接过程避免分包控制消息大小在MTU(最大传输单元)范围内</p><p>分包： 一个小希分成了多个消息包进行发送</p><p>粘包： 一个消息和另外一个消息粘在了一起  两者可能同时发生</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125310309.png" class="" title="image-20231101125310309"><p>我们收到的消息都是以字节数组的形式在程序中体现  例 前4个字节是消息ID 后面的字节数组全部用来反序列化 如果出现分包 粘包 会导致我们反序列化报错</p><p><strong>我们可以像处理区分消息类型的逻辑一样，为消息添加头部。头部记录消息的长度。当我们接收到消息时，通过消息长度来判断是否需要分包或黏包，对消息进行拆分或合并处理。这样，我们可以确保每次只处理完整的消息。</strong></p><p>此外，需要注意的是，在添加消息头部时，我们还可以包含其他有用的信息，例如发送者的信息、时间戳或消息的优先级。这样可以提供更多的上下文信息，并增强整个消息处理过程。</p><p>此外，在处理分包或黏包时，建议实施错误检查机制，以确保消息的完整性。可以通过使用校验和或其他验证技术来实现。</p><p>通过遵循这些实践，我们可以提高消息处理系统的可靠性和效率，确保消息被准确且完整地处理。</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125322274.png" class="" title="image-20231101125322274"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleReceiveMsg</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> index</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//粘包处理</span><br>            <span class="hljs-comment">/*int msgID = 0;</span><br><span class="hljs-comment">            int msgLength = 0;</span><br><span class="hljs-comment">            int nowIndex = 0;</span><br><span class="hljs-comment">            while (true)</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                //处理解析 一条消息</span><br><span class="hljs-comment">                msgID=BitConverter.ToInt32(receiveBytes, nowIndex);</span><br><span class="hljs-comment">                nowIndex += sizeof(int);</span><br><span class="hljs-comment">                //解析ID</span><br><span class="hljs-comment">                msgLength=BitConverter.ToInt32(receiveBytes, nowIndex );</span><br><span class="hljs-comment">                nowIndex+= sizeof(int);</span><br><span class="hljs-comment">                //解析消息体·</span><br><span class="hljs-comment">                BaseMgr baseMgr = null;</span><br><span class="hljs-comment">                switch (msgID)</span><br><span class="hljs-comment">                &#123;</span><br><span class="hljs-comment">                    case 10086:</span><br><span class="hljs-comment">                        PlayerMsg playerMsg = new PlayerMsg();</span><br><span class="hljs-comment">                        playerMsg.Reading(receiveBytes, nowIndex);</span><br><span class="hljs-comment">                        baseMgr = playerMsg;</span><br><span class="hljs-comment">                        break;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                if (baseMgr!=null)</span><br><span class="hljs-comment">                    _receiveMsgQue.Enqueue(baseMgr);</span><br><span class="hljs-comment">                nowIndex += msgLength;</span><br><span class="hljs-comment">            &#125;*/</span><br><br>            <span class="hljs-comment">//分包处理</span><br>            <span class="hljs-comment">/*int msgID = 0;</span><br><span class="hljs-comment">            int msgLength = 0;</span><br><span class="hljs-comment">            int nowIndex = 0;</span><br><span class="hljs-comment">            receiveBytes.CopyTo(cacheBytes, cacheNum);</span><br><span class="hljs-comment">            cacheNum += receiveNum;</span><br><span class="hljs-comment">            while (true)</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                if (cacheNum&gt;=8)</span><br><span class="hljs-comment">                &#123;</span><br><span class="hljs-comment">                    msgID = BitConverter.ToInt32(cacheBytes, nowIndex);</span><br><span class="hljs-comment">                    nowIndex += 4;</span><br><span class="hljs-comment">                    msgLength = BitConverter.ToInt32(cacheBytes, nowIndex);</span><br><span class="hljs-comment">                    nowIndex += 4;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                if (cacheNum-8&gt;=msgLength)</span><br><span class="hljs-comment">                &#123;</span><br><span class="hljs-comment">                    BaseMgr baseMgr = null;</span><br><span class="hljs-comment">                    switch (msgID)</span><br><span class="hljs-comment">                    &#123;</span><br><span class="hljs-comment">                        case 10086:</span><br><span class="hljs-comment">                            PlayerMsg msg = new PlayerMsg();</span><br><span class="hljs-comment">                            msg.Reading(cacheBytes, nowIndex);</span><br><span class="hljs-comment">                            baseMgr = msg;</span><br><span class="hljs-comment">                            break;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    if (baseMgr!=null)</span><br><span class="hljs-comment">                        _receiveMsgQue.Enqueue(baseMgr);</span><br><span class="hljs-comment">                    nowIndex += msgLength;</span><br><span class="hljs-comment">                    if (nowIndex == cacheNum)</span><br><span class="hljs-comment">                    &#123;</span><br><span class="hljs-comment">                        cacheNum = 0;</span><br><span class="hljs-comment">                        break;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                else</span><br><span class="hljs-comment">                &#123;</span><br><span class="hljs-comment">                    break;</span><br><span class="hljs-comment">                &#125;*/</span><br><br>            <span class="hljs-comment">//同時處理</span><br>            <span class="hljs-built_in">int</span> msgID = <span class="hljs-number">0</span>; <span class="hljs-comment">//消息ID</span><br>            <span class="hljs-built_in">int</span> msglength = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> nowIndex = <span class="hljs-number">0</span>;<br><br>            receiveBytes.CopyTo(cacheBytes, cacheNum);<br>            cacheNum += receiveNum;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-comment">//每次将长度设置为-1 避免上次的解析的数据影响这次的判断</span><br>                msglength = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span> (cacheNum - nowIndex &gt;= <span class="hljs-number">8</span>)<br>                &#123;<br>                    msgID = BitConverter.ToInt32(cacheBytes, nowIndex);<br>                    nowIndex += <span class="hljs-number">4</span>;<br>                    msglength = BitConverter.ToInt32(cacheBytes, nowIndex);<br>                    nowIndex += <span class="hljs-number">4</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (cacheNum - nowIndex &gt;= msglength &amp;&amp; msglength != <span class="hljs-number">-1</span>)<br>                &#123;<br>                    BaseMgr baseMgr = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">switch</span> (msgID)<br>                    &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">10086</span>:<br>                            PlayerMsg playerMsg = <span class="hljs-keyword">new</span> PlayerMsg();<br>                            playerMsg.Reading(cacheBytes, nowIndex);<br>                            baseMgr = playerMsg;<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (baseMgr != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        _receiveMsgQue.Enqueue(baseMgr);<br>                    &#125;<br><br>                    nowIndex += msglength;<br>                    <span class="hljs-keyword">if</span> (nowIndex == cacheNum)<br>                    &#123;<br>                        cacheNum = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//如果不满足 证明有分包 </span><br>                    <span class="hljs-comment">//那么我们需要把当前收到的内容 记录下来</span><br>                    <span class="hljs-comment">//有待下次接受到消息后 再做处理</span><br>                    <span class="hljs-comment">//receiveBytes.CopyTo(cacheBytes, 0);</span><br>                    <span class="hljs-comment">//cacheNum = receiveNum;</span><br>                    <span class="hljs-comment">//如果进行了 id和长度的解析 但是 没有成功解析消息体 那么我们需要减去nowIndex移动的位置</span><br>                    <span class="hljs-keyword">if</span> (msglength != <span class="hljs-number">-1</span>)<br>                        nowIndex -= <span class="hljs-number">8</span>;<br>                    <span class="hljs-comment">//就是把剩余没有解析的字节数组内容 移到前面来 用于缓存下次继续解析</span><br>                    Array.Copy(cacheBytes, nowIndex, cacheBytes, <span class="hljs-number">0</span>, cacheNum - nowIndex);<br>                    cacheNum = cacheNum - nowIndex;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="Unity网络开发心跳消息"><a href="#Unity网络开发心跳消息" class="headerlink" title="Unity网络开发心跳消息"></a>Unity网络开发心跳消息</h3><p>在Unity网络开发中，心跳消息是一种用于保持客户端和服务器之间连接状态的重要机制。心跳消息通常以固定的时间间隔发送，以确保连接的稳定性和可靠性。</p><p>在<strong>长连接</strong>中，客户端和服务端之间定期发送的一种特殊的数据包  用于通知对方自己还在线，以确保长连接的有效性</p><p>避免非正常关闭客户端时，服务器无法正常收到关闭连接消息 通过心跳消息我们可以自定义超时判断，如果超时没有收到客户端消息，证明客户端已经断开连接</p><p>避免客户端长期不发送消息，防火墙或者路由器会断开连接，我们可以通过心跳消息一直保持活跃状态</p><p>客户端 主要功能 定时发送消息</p><p>服务器 主要功能 不停检测上次收到客户端消息的时间 如果超时则认为链接已经断开</p><p>通过它可以帮助我们在服务器端及时的释放掉失效的socket可以有效避免当客户端非正常关闭时，服务器端不能及时判断连接已断开</p><h3 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h3><p>C#同步方法和异步方法的区别在于它们的执行方式和对线程的利用方式。</p><p>同步方法是按照顺序执行的，调用方法后会一直等待方法的完成，直到方法返回结果或抛出异常。在同步方法中，主线程会被阻塞，无法执行其他任务，直到方法完成。</p><p>异步方法是非阻塞的，调用方法后会立即返回并继续执行后续的代码，而不会等待方法的完成。异步方法会在后台启动一个新的线程来执行任务，主线程可以继续执行其他任务，不会被阻塞。当异步方法完成后，可以通过回调函数或使用await关键字来处理返回结果。</p><p>使用异步方法可以提高程序的性能和响应性，特别是在处理耗时的操作或需要同时处理多个任务的情况下。通过异步方法可以充分利用多线程的优势，提高程序的并发性和吞吐量。</p><p>需要注意的是，异步方法需要使用async和await关键字来标记和处理异步操作，同时需要使用适当的同步机制来确保线程安全性。</p><p>总的来说，同步方法适合简单的任务和逻辑，而异步方法适合处理复杂、耗时的操作和提高程序的并发性。</p><p>同步方法：<strong>方法中逻辑执行完毕后，再继续执行后面的方法</strong></p><p>异步方法：<strong>方法中逻辑可能还没有执行完毕，就继续执行后面的内容</strong></p><p>异步方法的本质：往往异步方法当中都会使用多线程执行某部分逻辑</p><p>因为我们不需要等待方法中逻辑执行完毕就可以继续执行下面的逻辑了</p><p>注意：Unity中的协同程序中的某些异步方法，有的使用的是多线程有的使用的是迭代器分步执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// CountDownAsnc(5, () =&gt; &#123; print(&quot;异步倒计时结束回调&quot;); &#125;);</span><br>        <span class="hljs-comment">// print(&quot;倒计时结束&quot;);</span><br>        <span class="hljs-comment">//CountDownAsnc2(5, () =&gt; &#123; print(&quot;异步倒计时回调2&quot;); &#125;);</span><br>        StartCoroutine(CountDownAsnc3(<span class="hljs-number">5</span>, () =&gt; &#123; print(<span class="hljs-string">&quot;异步倒计时回调3&quot;</span>); &#125;));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CountDownAsnc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> second, UnityAction callBack</span>)</span><br>    &#123;<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() =&gt;<br>        &#123;<span class="hljs-comment">//通过开启一个线程</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                print(second);<br>                --second;<br>                Thread.Sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">if</span> (second &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            callBack?.Invoke();<br>        &#125;);<br><br>        thread.Start();<br>        print(<span class="hljs-string">&quot;开始倒计时&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CountDownAsnc2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> second, UnityAction callBcak</span>)</span><br>    &#123;<br>        print(<span class="hljs-string">&quot;倒计时开始&quot;</span>);<br>        <span class="hljs-comment">//这个写法就从上到下执行 得等 await 里的逻辑执行完 再执行下面的</span><br>        <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>        &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                print(second);<br>                --second;<br>                Thread.Sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">if</span> (second &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            callBcak?.Invoke(); <span class="hljs-comment">//回调 在外部施加逻辑</span><br>        &#125;);<br><br>        print(<span class="hljs-string">&quot;倒计时结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerator <span class="hljs-title">CountDownAsnc3</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> second,UnityAction callBack</span>)</span><br>    &#123;<br>        print(<span class="hljs-string">&quot;倒计时开始&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            print(second);<br>            --second;<br>            <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params"><span class="hljs-number">1</span></span>)</span>;<br>            <span class="hljs-keyword">if</span> (second &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        callBack?.Invoke();<br>        <br>        print(<span class="hljs-string">&quot;倒计时结束&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>Socket TCP通信中的异步方法</p><p>回调函数参数<code>IAsyncResult</code></p><p><code>AsyncState</code> 调用异步方法时传入的参数 需要转换</p><p><code>AsyncWaitHandle</code> 用于同步等待</p><p>在Socket TCP通信中，常常使用异步方法来实现非阻塞的数据传输。以下是一些常见的异步方法：</p><ul><li><code>BeginConnect</code>和<code>EndConnect</code>: 异步连接到远程主机。 <strong>客户端相关</strong></li><li><code>BeginSend</code>和<code>EndSend</code>: 异步发送数据到远程主机。</li><li><code>BeginReceive</code>和<code>EndReceive</code>: 异步接收来自远程主机的数据。 <strong>通用</strong></li><li><code>BeginAccept</code>和<code>EndAccept</code>: 异步接受客户端的连接请求。 <strong>服务器相关</strong></li><li><code>Begin</code>开头的API  内部开多线程，通过回调形式返回结果，需要和End相关方法 配合使用</li><li><code>Async</code>结尾的API内部开多线程，通过回调形式返回结果，依赖<code>SocketAsyncEventArgs</code>对象配合使用可以让我们更加方便的进行操作</li><li><code>BeginConnect</code>和<code>EndConnect</code>：异步连接到远程主机。</li><li><code>BeginSend</code>和<code>EndSend</code>：异步发送数据到远程主机。</li><li><code>BeginReceive</code>和<code>EndReceive</code>：异步接收来自远程主机的数据。</li><li><code>BeginAccept</code>和<code>EndAccept</code>：异步接受客户端的连接请求。</li></ul><p>这些方法通常在Socket TCP通信中使用，以实现非阻塞的数据传输。</p><h3 id="FTP相关知识"><a href="#FTP相关知识" class="headerlink" title="FTP相关知识"></a>FTP相关知识</h3><p>FTP（文件传输协议）是一种用于在计算机之间传输文件的标准网络协议。它基于客户端-服务器模型，其中客户端通过FTP客户端软件连接到服务器，并使用一系列命令和响应来进行文件传输。</p><p>FTP的工作原理如下：</p><ol><li>建立连接：客户端使用FTP客户端软件连接到服务器的FTP服务端口（通常是端口号21）。有两种传输模式 主动(服务器主动连接） 和被动(客户端主动连接服务器) <strong>被动使用较多</strong></li><li>传输方式 ASCII 二进制传输</li><li>身份验证：客户端提供用户名和密码进行身份验证，以确定其访问权限。</li><li>浏览目录：客户端可以浏览服务器上的文件和目录结构，并选择要操作的文件。</li><li>上传文件：客户端可以将本地文件上传到服务器，将文件从本地计算机传输到服务器上的指定目录。</li><li>下载文件：客户端可以从服务器上下载文件到本地计算机，将文件从服务器传输到本地计算机上的指定位置。</li><li>删除文件：客户端可以删除服务器上的文件。</li><li>重命名文件：客户端可以对服务器上的文件进行重命名。</li><li>断开连接：客户端完成文件传输后，可以断开与服务器的连接。</li></ol><p>FTP使用明文传输数据，因此不适合传输敏感数据。为了增加安全性，可以使用FTP over SSL&#x2F;TLS（FTPS）或SSH文件传输协议（SFTP）等加密协议。FTP是一种可靠且广泛使用的文件传输协议，它允许用户在计算机之间方便地传输文件。</p><p><strong>C#中实现FTP通信需要用到以下相关类：</strong></p><ul><li><code>System.Net.FtpWebRequest</code>: 用于创建FTP请求并发送到FTP服务器。<strong>主要用于：上传，下载，删除服务器上的文件  重要方法：<code>Create</code>创建WebRequest <code>Abort</code>终止传输 <code>GetRequestStream</code> 获取流 <code>GetResponse</code>返回服务器响应</strong></li><li><code>System.Net.FTPWebResponse</code>: 用于获取FTP服务器的响应。</li><li><code>System.IO.Stream</code>: 用于从FTP服务器读取数据或将数据写入FTP服务器。</li><li><code>System.IO.FileStream</code>: 用于读取本地文件或将数据写入本地文件。</li><li><code>System.IO.BinaryReader</code>: 用于从数据流读取二进制数据。</li><li><code>System.IO.BinaryWriter</code>: 用于将二进制数据写入数据流。</li><li><code>System.Net.NetworkCredential</code>: 用于存储FTP服务器的身份验证凭据，包括用户名和密码。<strong>用于在ftp文件传输时 设置账号密码</strong></li></ul><p><code>**System.Net.FtpWebRequest</code>类的一些重要成员包括：**</p><ul><li><code>Create</code>方法：创建<code>FtpWebRequest</code>对象，用于发送FTP请求到FTP服务器。</li><li><code>Abort</code>方法：终止FTP传输。</li><li><code>GetRequestStream</code>方法：获取用于将数据写入FTP服务器的流。</li><li><code>GetResponse</code>方法：获取FTP服务器的响应。</li><li><code>Method</code>属性：设置或获取要执行的FTP操作（如上传、下载、删除等）的方法。</li><li><code>Credentials</code>属性：设置用于进行FTP身份验证的网络凭据。</li><li><code>UseBinary</code>属性：设置FTP请求是否使用二进制传输模式。</li><li><code>UsePassive</code>属性：设置FTP请求是否使用被动模式。</li><li><code>EnableSsl</code>属性：设置FTP请求是否启用SSL&#x2F;TLS加密。</li><li><code>Timeout</code>属性：设置FTP请求的超时时间。</li></ul><p><code>System.Net.FTPWebResponse</code>类的一些重要成员包括：</p><ul><li><code>StatusCode</code>属性：获取FTP服务器的响应状态代码。</li><li><code>StatusDescription</code>属性：获取FTP服务器的响应状态描述。</li><li><code>ContentLength</code>属性：获取FTP服务器响应的内容长度。</li><li><code>GetResponseStream</code>方法：获取用于读取FTP服务器响应数据的流。</li><li><code>Close</code>方法：关闭FTP响应。</li><li><code>Dispose</code>方法：释放与FTP响应相关的资源。</li></ul><p>FTP各种操作的管理器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FtpMgr _instance = <span class="hljs-keyword">new</span> FtpMgr();<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FtpMgr Instance =&gt; _instance;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> FTP_PATH = <span class="hljs-string">&quot;&lt;ftp://127.0.0.1/FTPTest/&gt;&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> USER_NAME = <span class="hljs-string">&quot;Heart&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> PASS_WORD = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 上传到FTP      </span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;fileName&quot;&gt;</span>远端想要的文件名<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;localPath&quot;&gt;</span>本地路径+本地的文件名<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;callBack&quot;&gt;</span>回调函数<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpLoad</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction callBack = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>            &#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    <span class="hljs-comment">//通过线程处理逻辑 不会阻塞主线程</span><br>                    FtpWebRequest request = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + fileName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                    NetworkCredential n = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                    request.Credentials = n;<br>                    request.KeepAlive = <span class="hljs-literal">false</span>;<br>                    request.Method = WebRequestMethods.Ftp.UploadFile;<br>                    request.UseBinary = <span class="hljs-literal">true</span>;<br>                    request.Proxy = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">var</span> uploadStream = request.GetRequestStream();<br>                    <span class="hljs-keyword">using</span> (FileStream fs = File.OpenRead(localPath))<br>                    &#123;<br>                        <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>                        <span class="hljs-built_in">int</span> len = fs.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                        <span class="hljs-keyword">while</span> (len != <span class="hljs-number">0</span>)<br>                        &#123;<br>                            uploadStream.Write(bytes, <span class="hljs-number">0</span>, len);<br>                            len = fs.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                        &#125;<br><br>                        fs.Close();<br>                        uploadStream.Close();<br>                        Debug.Log(<span class="hljs-string">&quot;上传完成&quot;</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)<br>                &#123;<br>                    Debug.LogError(<span class="hljs-string">&quot;上传失败&quot;</span> + e.Message);<br>                &#125;<br>            &#125;);<br><br>            callBack?.Invoke();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 下载到本地</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;fileName&quot;&gt;</span>远端的文件名<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;localPath&quot;&gt;</span>本地的路径 + 想要的文件名字<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;callBack&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DownLoad</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction callBack = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>            &#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    FtpWebRequest request = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + fileName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                    NetworkCredential n = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                    request.Credentials = n;<br>                    request.KeepAlive = <span class="hljs-literal">false</span>;<br>                    request.Method = WebRequestMethods.Ftp.DownloadFile;<br>                    request.UseBinary = <span class="hljs-literal">true</span>;<br>                    request.Proxy = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">var</span> downLoadStream = request.GetResponse().GetResponseStream();<br>                    FileStream fs = <span class="hljs-keyword">new</span> FileStream(localPath, FileMode.Create);<br>                    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-built_in">int</span> len = downLoadStream.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                    <span class="hljs-keyword">while</span> (len != <span class="hljs-number">0</span>)<br>                    &#123;<br>                        fs.Write(bytes, <span class="hljs-number">0</span>, len);<br>                        len = downLoadStream.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                    &#125;<br><br>                    Debug.Log(<span class="hljs-string">&quot;下载完成&quot;</span>);<br>                    fs.Close();<br>                    downLoadStream.Close();<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)<br>                &#123;<br>                    Debug.LogError(<span class="hljs-string">&quot;下载失败&quot;</span> + e.Message);<br>                &#125;<br>            &#125;);<br><br>            callBack?.Invoke();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, UnityAction&lt;<span class="hljs-built_in">bool</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                FtpWebRequest request = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + fileName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                NetworkCredential n = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                request.Credentials = n;<br>                request.KeepAlive = <span class="hljs-literal">false</span>;<br>                request.Method = WebRequestMethods.Ftp.DeleteFile;<br>                request.UseBinary = <span class="hljs-literal">true</span>;<br>                request.Proxy = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">var</span> response = request.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>                response.Close();<br>                action?.Invoke(<span class="hljs-literal">true</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)<br>            &#123;<br>                action?.Invoke(<span class="hljs-literal">false</span>);<br>                Debug.LogError(<span class="hljs-string">&quot;删除失败&quot;</span> + e.Message);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取FTP服务器上某个文件的大小 （单位 是 字节）</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;fileName&quot;&gt;</span>文件名<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span>获取成功后传递给外部 具体的大小<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetFileSize</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, UnityAction&lt;<span class="hljs-built_in">long</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>            &#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    <span class="hljs-comment">//通过一个线程执行这里面的逻辑 那么就不会影响主线程了</span><br>                    <span class="hljs-comment">//1.创建一个Ftp连接</span><br>                    FtpWebRequest req = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + fileName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                    <span class="hljs-comment">//2.进行一些设置</span><br>                    <span class="hljs-comment">//凭证</span><br>                    req.Credentials = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                    <span class="hljs-comment">//是否操作结束后 关闭 控制连接</span><br>                    req.KeepAlive = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-comment">//传输类型</span><br>                    req.UseBinary = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">//操作类型</span><br>                    req.Method = WebRequestMethods.Ftp.GetFileSize;<br>                    <span class="hljs-comment">//代理设置为空</span><br>                    req.Proxy = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-comment">//3.真正的获取</span><br>                    FtpWebResponse res = req.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>                    <span class="hljs-comment">//把大小传递给外部</span><br>                    action?.Invoke(res.ContentLength);<br><br>                    res.Close();<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;获取大小失败&quot;</span> + e.Message);<br>                    action?.Invoke(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 创建一个文件夹 在FTP服务器上</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;directoryName&quot;&gt;</span>文件夹名字<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span>创建完成后的回调<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateDirectory</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> directoryName, UnityAction&lt;<span class="hljs-built_in">bool</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>            &#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    <span class="hljs-comment">//通过一个线程执行这里面的逻辑 那么就不会影响主线程了</span><br>                    <span class="hljs-comment">//1.创建一个Ftp连接</span><br>                    FtpWebRequest req = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + directoryName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                    <span class="hljs-comment">//2.进行一些设置</span><br>                    <span class="hljs-comment">//凭证</span><br>                    req.Credentials = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                    <span class="hljs-comment">//是否操作结束后 关闭 控制连接</span><br>                    req.KeepAlive = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-comment">//传输类型</span><br>                    req.UseBinary = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">//操作类型</span><br>                    req.Method = WebRequestMethods.Ftp.MakeDirectory;<br>                    <span class="hljs-comment">//代理设置为空</span><br>                    req.Proxy = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-comment">//3.真正的创建</span><br>                    FtpWebResponse res = req.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>                    res.Close();<br><br>                    action?.Invoke(<span class="hljs-literal">true</span>);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;创建文件夹失败&quot;</span> + e.Message);<br>                    action?.Invoke(<span class="hljs-literal">false</span>);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 过去所有文件名</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;directoryName&quot;&gt;</span>文件夹路径<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span>返回给外部使用的 文件名列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetFileList</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> directoryName, UnityAction&lt;List&lt;<span class="hljs-built_in">string</span>&gt;&gt; action = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Run(() =&gt;<br>            &#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    <span class="hljs-comment">//通过一个线程执行这里面的逻辑 那么就不会影响主线程了</span><br>                    <span class="hljs-comment">//1.创建一个Ftp连接</span><br>                    FtpWebRequest req = FtpWebRequest.Create(<span class="hljs-keyword">new</span> Uri(FTP_PATH + directoryName)) <span class="hljs-keyword">as</span> FtpWebRequest;<br>                    <span class="hljs-comment">//2.进行一些设置</span><br>                    <span class="hljs-comment">//凭证</span><br>                    req.Credentials = <span class="hljs-keyword">new</span> NetworkCredential(USER_NAME, PASS_WORD);<br>                    <span class="hljs-comment">//是否操作结束后 关闭 控制连接</span><br>                    req.KeepAlive = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-comment">//传输类型</span><br>                    req.UseBinary = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">//操作类型</span><br>                    req.Method = WebRequestMethods.Ftp.ListDirectory;<br>                    <span class="hljs-comment">//代理设置为空</span><br>                    req.Proxy = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-comment">//3.真正的创建</span><br>                    FtpWebResponse res = req.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>                    <span class="hljs-comment">//把下载的信息流 转换成StreamReader对象 方便我们一行一行的读取信息</span><br>                    StreamReader streamReader = <span class="hljs-keyword">new</span> StreamReader(res.GetResponseStream());<br><br>                    <span class="hljs-comment">//用于存储文件名的列表</span><br>                    List&lt;<span class="hljs-built_in">string</span>&gt; nameStrs = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>                    <span class="hljs-comment">//一行行的读取</span><br>                    <span class="hljs-built_in">string</span> line = streamReader.ReadLine();<br>                    <span class="hljs-keyword">while</span> (line != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        nameStrs.Add(line);<br>                        line = streamReader.ReadLine();<br>                    &#125;<br><br>                    res.Close();<br><br>                    action?.Invoke(nameStrs);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;获取文件列表失败&quot;</span> + e.Message);<br>                    action?.Invoke(<span class="hljs-literal">null</span>);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="HTTP相关知识"><a href="#HTTP相关知识" class="headerlink" title="HTTP相关知识"></a>HTTP相关知识</h3><p>HTTP是一种用于传输超文本的协议，常用于浏览器和Web服务器之间的通信。它使用请求-响应的模式，客户端发送HTTP请求到服务器，服务器根据请求返回相应的内容。 HTTP请求由请求行、请求头和请求体组成。请求行包含请求方法（如GET、POST）、请求的URL和HTTP协议的版本。请求头包含一些附加的信息，如请求的主机、用户代理等。请求体包含请求的数据，例如表单提交的数据。 HTTP响应由状态行、响应头和响应体组成。状态行包含HTTP协议的版本、状态码和状态消息。响应头包含一些附加的信息，如响应的内容类型、长度等。响应体包含服务器返回的实际内容。 常见的HTTP方法有GET、POST、PUT、DELETE等。GET用于获取资源，POST用于提交数据，PUT用于更新资源，DELETE用于删除资源。 HTTP还支持状态码，常见的状态码有200表示成功，404表示资源未找到，500表示服务器内部错误等。</p><p>在C#中进行HTTP通信时，可以使用以下类和方法：</p><ul><li><code>HttpClient</code>类：用于发送HTTP请求并接收HTTP响应。可以使用<code>GetAsync</code>方法发送GET请求，<code>PostAsync</code>方法发送POST请求等。</li><li><code>HttpRequestMessage</code>类：用于设置HTTP请求的各种参数，如请求头、请求方法、请求体等。可以使用<code>Headers</code>属性设置请求头，<code>Method</code>属性设置请求方法，<code>Content</code>属性设置请求体。</li><li><code>HttpResponseMessage</code>类：表示HTTP响应。可以使用<code>StatusCode</code>属性获取状态码，<code>Content</code>属性获取响应体等。</li><li><code>HttpContent</code>类：表示HTTP请求或响应的内容。可以使用<code>ReadAsStringAsync</code>方法将内容读取为字符串。</li><li><code>HttpStatusCode</code>枚举：包含HTTP状态码的定义。可以使用这些状态码来判断请求的结果，如判断是否成功、是否找到资源等。</li><li><strong><code>HttpWebRequest</code> 主要用于发送http客户端请求给服务器 可以进行消息通信 上传  下载</strong></li><li></li></ul><h3 id="HttpWebRequest-重要成员"><a href="#HttpWebRequest-重要成员" class="headerlink" title="HttpWebRequest 重要成员"></a>HttpWebRequest 重要成员</h3><ul><li><code>Create</code>: 创建一个 <code>HttpWebRequest</code> 实例。</li><li><code>Credentials</code>: 获取或设置用于进行身份验证的网络凭据。</li><li><code>Method</code>: 获取或设置用于发送请求的 HTTP 方法。</li><li><code>ContentType</code>: 获取或设置请求的内容类型。</li><li><code>ContentLength</code>: 获取或设置请求的内容长度。</li><li><code>Headers</code>: 获取或设置请求的标头集合。</li><li><code>KeepAlive</code>: 获取或设置一个值，指示是否与 Internet 资源建立持久性连接。</li><li><code>Proxy</code>: 获取或设置请求的代理信息。</li><li><code>Timeout</code>: 获取或设置请求的超时时间。</li><li><code>UseDefaultCredentials</code>: 获取或设置一个值，指示是否使用默认凭据进行身份验证。</li><li><code>GetRequestStream</code>: 获取用于写入请求数据的流。</li><li><code>GetResponse</code>: 返回一个包含响应的 <code>HttpWebResponse</code>。</li></ul><p>使用HFS搭建Http服务器 本机创建文件夹 拖入HFS 设置好端口 直接访问Ip</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125410437.png" class="" title="image-20231101125410437"><h3 id="HTTP的各种请求"><a href="#HTTP的各种请求" class="headerlink" title="HTTP的各种请求"></a><strong>HTTP的各种请求</strong></h3><p>1.Head请求类型</p><p>主要用于获取文件的一些基础信息 可以用于确定文件是否存在</p><p>2.Get请求类型 主要用于传递信息给服务器，用于获取具体信息</p><p>服务器返回的信息，可以通过Response中的流来获取</p><p>用Get请求时，可以在连接中携带一些额外参数(在链接后面加上 ?参数名&#x3D;参数值&amp;参数名&#x3D;参数值&amp;参数名&#x3D;参数值&amp;。。。。)</p><p>正常的http服务器应用程序，都会去解析Get请求时连接中的参数进行逻辑处理（后端程序的工作）</p><p>Post</p><p>1.主要用途</p><p>Get — 一般从指定的资源请求数据,主要用于获取数据</p><p>Post — 一般向指定的资源提交想要被处理的数据，主要用于上传数据</p><p>2.相同点</p><p>Get和Post都可以传递一些额外的参数数据给服务端</p><p>3.不同点</p><p>3-1:在传递参数时，Post相对Get更加的安全，因为Post看不到参数 Get传递的参数都包含在连接中（URL资源定位地址），是暴露式的 ?参数名&#x3D;参数值&amp;参数名&#x3D;参数值</p><p>Post传递的参数放在请求数据中，不会出现在URL中，是隐藏式的</p><p>3-2:Get在传递数据时有大小的限制，因为它主要是在连接中拼接参数，而URL的长度是有限制的（最大长度一般为2048个字符）<strong>Post在传递数据时没有限制</strong></p><p>3-3:在浏览器中Get请求能被缓存，Post不能缓存</p><p>3-4:传输次数可能不同</p><p>Get: 建立连接——&gt;请求行、请求头、请求数据一次传输——&gt;获取响应——&gt;断开连接</p><p>Post: 建立连接——&gt;传输可能分两次——&gt;请求行，请求头第一次传输——&gt;请求数据第二次传输——&gt;获取响应——&gt;断开</p><p>对于前端来说，其实Get和Post都是能够获取和传递数据的,后端只要处理对应逻辑返回响应信息即可</p><p>但是由于他们的这些特点</p><p>我们在实际使用时<strong>建议Get用于获取，Post用于上传</strong>  <strong>如果想要传递一些不想暴露在外部的参数信息，建议使用Post，它更加的安全</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Post如何携带额外参数<br>        <span class="hljs-comment">//关键点：将Content-Type设置为 application/x-www-form-urlencoded 键值对类型</span><br>        HttpWebRequest req = HttpWebRequest.Create(<span class="hljs-string">&quot;&lt;http://192.168.50.109:8000/Http_Server/&gt;&quot;</span>) <span class="hljs-keyword">as</span> HttpWebRequest;<br>        req.Method = WebRequestMethods.Http.Post;<br>        req.Timeout = <span class="hljs-number">2000</span>;<br>        <span class="hljs-comment">//设置上传的内容的类型</span><br>        req.ContentType = <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>;<br><br>        <span class="hljs-comment">//我们要上传的数据</span><br>        <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Name=MrTang&amp;ID=2&quot;</span>;<br>        <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(str);<br>        <span class="hljs-comment">//我们在上传之前一定要设置内容的长度</span><br>        req.ContentLength = bytes.Length;<br>        <span class="hljs-comment">//上传数据</span><br>        Stream stream = req.GetRequestStream();<br>        stream.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>        stream.Close();<br>        <span class="hljs-comment">//发送数据 得到响应结果</span><br>        HttpWebResponse res = req.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>        print(res.StatusCode);<br><br>        <br><br>         知识点三 ContentType的常用类型<br>        <span class="hljs-comment">//ContentType的构成：</span><br>        <span class="hljs-comment">//内容类型;charset=编码格式;boundary=边界字符串</span><br>        <span class="hljs-comment">//text/html;charset=utf-8;boundary=自定义字符串</span><br><br>        <span class="hljs-comment">//其中内容类型有：</span><br>        <span class="hljs-comment">//文本类型text：</span><br>        <span class="hljs-comment">//text/plain 没有特定子类型就是它（重要）</span><br>        <span class="hljs-comment">//text/html</span><br>        <span class="hljs-comment">//text/css</span><br>        <span class="hljs-comment">//text/javascript</span><br><br>        <span class="hljs-comment">//图片类型image：</span><br>        <span class="hljs-comment">//image/gif</span><br>        <span class="hljs-comment">//image/png</span><br>        <span class="hljs-comment">//image/jpeg</span><br>        <span class="hljs-comment">//image/bm</span><br>        <span class="hljs-comment">//image/webp</span><br>        <span class="hljs-comment">//image/x-icon</span><br>        <span class="hljs-comment">//image/vnd.microsoft.icon</span><br><br>        <span class="hljs-comment">//音频类型audio：</span><br>        <span class="hljs-comment">//audio/midi</span><br>        <span class="hljs-comment">//audio/mpeg</span><br>        <span class="hljs-comment">//audio/webm</span><br>        <span class="hljs-comment">//audio/ogg</span><br>        <span class="hljs-comment">//audio/wav</span><br><br>        <span class="hljs-comment">//视频类型video:</span><br>        <span class="hljs-comment">//video/webm</span><br>        <span class="hljs-comment">//video/ogg</span><br><br>        <span class="hljs-comment">//二进制类型application:</span><br>        <span class="hljs-comment">//application/octet-stream 没有特定子类型就是它（重要）</span><br>        <span class="hljs-comment">//application/x-www-form-urlencoded 传递参数时使用键值对形式（重要）</span><br>        <span class="hljs-comment">//application/pkcs12</span><br>        <span class="hljs-comment">//application/xhtml+xml</span><br>        <span class="hljs-comment">//application/xml</span><br>        <span class="hljs-comment">//application/pdf</span><br>        <span class="hljs-comment">//application/vnd.mspowerpoint</span><br><br>        <span class="hljs-comment">//复合内容multipart:</span><br>        <span class="hljs-comment">//multipart/form-data  复合内容，有多种内容组合（重要）</span><br>        <span class="hljs-comment">//multipart/byteranges  特殊的复合文件</span><br><br>        <span class="hljs-comment">//关于ContentType更多内容可以前往</span><br>        <span class="hljs-comment">//https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type</span><br>        <span class="hljs-comment">//关于媒体类型可以前往</span><br>        <span class="hljs-comment">//https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types</span><br><br><span class="hljs-comment">//ContentType中的重要类型</span><br><span class="hljs-comment">//1.通用2进制类型</span><br>        <span class="hljs-comment">//application/octet-stream</span><br>        <span class="hljs-comment">//2.通用文本类型</span><br>        <span class="hljs-comment">//text/plain </span><br>        <span class="hljs-comment">//3.键值对参数</span><br>        <span class="hljs-comment">//application/x-www-form-urlencoded</span><br>        <span class="hljs-comment">//4.复合类型（传递的信息有多种类型组成,比如有键值对参数,有文件信息等等,上传资源服务器时需要用该类型）</span><br>        <span class="hljs-comment">//multipart/form-data</span><br></code></pre></td></tr></table></figure><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125424212.png" class="" title="image-20231101125424212"><h3 id="WWW类"><a href="#WWW类" class="headerlink" title="WWW类"></a>WWW类</h3><p>Ps：该类在Unity版本中可能会提示过时 该还能使用 功能被整合进了<code>UnityWebRequest</code></p><p>WWW类常用方法</p><ul><li><code>WWW(string url)</code>: 创建一个WWW实例，传入URL作为参数，用于发送HTTP请求并接收HTTP响应。</li><li><code>GetAudioClip</code> 从下载数据返回一个音效切片</li><li><code>LoadImageIntoTexture</code> 用下载数据中的图像替换现有的Texture</li><li><code>LoadFromCacheOrDownload</code>  从缓存加载AB包对象，如果该包不在缓存则自动下载存储到缓存中，以便以后直接从本地缓存中加载</li></ul><p>常用变量</p><p>1.assetBundle：如果加载的数据是AB包，可以通过该变量直接获取加载结果</p><p><a href="http://www.assetbundle/">www.assetBundle</a></p><p>2.audioClip：如果加载的数据是音效切片文件，可以通过该变量直接获取加载结果</p><p><a href="http://www.getaudioclip/">www.GetAudioClip</a></p><p>3.bytes：以字节数组的形式获取加载到的内容</p><p><a href="http://www.bytes/">www.bytes</a></p><p>4.bytesDownloaded：过去已下载的字节数</p><p><a href="http://www.bytesdownloaded/">www.bytesDownloaded</a></p><p>5.error：返回一个错误消息，如果下载期间出现错误，可以通过它获取错误信息</p><p><a href="http://www.error/">www.error</a> !&#x3D; null</p><p>6.isDone：判断下载是否已经完成</p><p><a href="http://www.isdone/">www.isDone</a></p><p>7.movie：如果下载的视频，可以获取一个MovieTexture类型结果</p><p><a href="http://www.getmovietexture()/">www.GetMovieTexture()</a></p><p>8.progress:下载进度</p><p><a href="http://www.progress/">www.progress</a></p><p>9.text：如果下载的数据是字符串，以字符串的形式返回内容</p><p><a href="http://www.text/">www.text</a></p><p>10.texture：如果下载的数据是图片，以Texture2D的形式返回加载结果</p><p><a href="http://www.texture/">www.texture</a></p><p>利用WWW类来异步下载或加载文件 必须通过协程来下载</p><p>注意：下载FTP服务器 账号一定要是匿名用户</p><p>本地内容加载 一般移动平台加载数据用的偏多 HTTP FTP 方法都差不多</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125515280.png" class="" title="image-20231101125515280"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WWWMgr</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//配合协程 所以继承MonoBehaviour</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> WWWMgr _instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WWWMgr Instance =&gt; _instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        _instance = <span class="hljs-keyword">this</span>;<br>        DontDestroyOnLoad(<span class="hljs-keyword">this</span>.gameObject);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 提供给外部调用的加载资源的方法</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>资源的类型<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;path&quot;&gt;</span>资源的路径 http ftp file都支持<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span>加载结束后的回调函数 因为WWW是通过结合协同程序异步加载的 所以不能马上获取结果 需要回调获取<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadRes</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; callBack</span>) <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>    &#123;<br>        StartCoroutine(LoadResAsync(path, callBack));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">LoadResAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; action</span>) <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>    &#123;<br>        WWW www = <span class="hljs-keyword">new</span> WWW(path);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> www;<br>        <span class="hljs-keyword">if</span> (www.error == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-comment">//根据类型 来传递不同的资源</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AssetBundle))<br>                action(www.assetBundle <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AudioClip))<br>                action(www.GetAudioClip() <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(Texture2D))<br>                action(www.texture <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(Texture))<br>                action(www.texture <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>))<br>                action(www.text <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">byte</span>[]))<br>                action(www.bytes <span class="hljs-keyword">as</span> T);<br>            <span class="hljs-comment">//自定义类型 就需要用bytes去转换</span><br>            <span class="hljs-keyword">else</span><br>                Debug.LogError(<span class="hljs-string">&quot;不支持的类型&quot;</span> + <span class="hljs-keyword">typeof</span>(T));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Debug.LogError(<span class="hljs-string">&quot;资源加载失败&quot;</span> + www.error);<br>        &#125;<br>    &#125;<br>&#125;<br><br>-- 测试 <br>WWWMgr.Instance.LoadRes&lt;Texture&gt;(<span class="hljs-string">&quot;&lt;http://192.168.145.227:8000/Http_Server/IU.png&gt;&quot;</span>, (obj) =&gt;<br>        &#123;<br>            image.texture = obj;<br>        &#125;);<br>        <br>        <br>        WWWMgr.Instance.LoadRes&lt;<span class="hljs-built_in">byte</span>[]&gt;(<span class="hljs-string">&quot;&lt;http://192.168.145.227:8000/Http_Server/IU.png&gt;&quot;</span>, (obj) =&gt;<br>        &#123;<span class="hljs-comment">//也可以直接下载到本地</span><br>            print(Application.persistentDataPath);<br>            File.WriteAllBytes(Application.persistentDataPath+ <span class="hljs-string">&quot;/IU.png&quot;</span>, obj);<br>        &#125;);<br></code></pre></td></tr></table></figure><p>如果想要使用WWW上传数据时，就需要配合<code>WWWFrom</code>类进行使用了 而WWWFrom主要就是用于集成数据的，我们可以设置上传的参数或者2进制数据 当结合WWWFrom上传数据时它主要用到的请求类型是Post  它使用Http协议进行上传处理</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//1.WWWForm：构造函数</span><br>  WWWForm data = <span class="hljs-keyword">new</span> WWWForm();<br>  <span class="hljs-comment">//2.AddBinaryData：添加二进制数据</span><br>  <span class="hljs-comment">//data.AddBinaryData()</span><br>  <span class="hljs-comment">//3.AddField：添加字段</span><br>  <span class="hljs-comment">//data.AddField()</span><br></code></pre></td></tr></table></figure><p>WWW结合WWWFrom上传数据  需要配合后端服务器来指定上传规则</p><p>也就是说我们上传的数据，后端需要知道收到数据后应该如何处理</p><p>通过这种方式我们没办法像C#类当中完成文件的上传 但是该方式非常适合用于制作短连接游戏的前端网络层  我们可以对WWW进行二次封装，专门用于上传自定义消息给对应的Web服务器</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125701079.png" class="" title="image-20231101125701079"><h3 id="UnityWebRequest-类"><a href="#UnityWebRequest-类" class="headerlink" title="UnityWebRequest 类"></a>UnityWebRequest 类</h3><p>UnityWebRequest是Unity中用于发送和接收HTTP请求的类。它提供了一种灵活的方式来与Web服务器进行通信，并支持各种常见的HTTP操作。</p><p>ps：注意都用协程写法</p><p><code>UnityWebRequest</code>的常用操作包括：</p><ul><li>Get</li><li>Post</li><li>Put</li></ul><p><code>UnityWebRequest.Get</code> 方法可用于发送 GET 请求。下面是一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> url = <span class="hljs-string">&quot;&lt;https://www.example.com/api/data&gt;&quot;</span>;<br>UnityWebRequest request = UnityWebRequest.Get(url);<br><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request.SendWebRequest();<br><br><span class="hljs-keyword">if</span> (request.result == UnityWebRequest.Result.Success)<br>&#123;<br>    <span class="hljs-built_in">string</span> response = request.downloadHandler.text;<br>    <span class="hljs-comment">// 处理响应结果</span><br>    Debug.Log(response);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Debug.Log(<span class="hljs-string">&quot;Error: &quot;</span> + request.error);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WWW类的常用属性：</strong></p><ul><li><code>assetBundle</code>：如果加载的数据是AssetBundle，可以通过该属性获取加载结果。</li><li><code>audioClip</code>：如果加载的数据是音频剪辑文件，可以通过该属性获取加载结果。</li><li><code>bytes</code>：以字节数组的形式获取加载到的内容。</li><li><code>bytesDownloaded</code>：过去已下载的字节数。</li><li><code>error</code>：返回一个错误消息，如果下载期间出现错误，可以通过它获取错误信息。</li><li><code>isDone</code>：判断下载是否已经完成。</li><li><code>movie</code>：如果下载的是视频，可以获取一个MovieTexture类型结果。</li><li><code>progress</code>：下载进度。</li><li><code>text</code>：如果下载的数据是字符串，以字符串的形式返回内容。</li><li><code>texture</code>：如果下载的数据是图片，以Texture2D的形式返回加载结果。</li></ul><p><strong>UnityWebRequest类的常用属性：</strong></p><ul><li><code>downloadHandler</code>：用于获取下载的数据。</li><li><code>isDone</code>：判断请求是否已完成。</li><li><code>responseCode</code>：获取HTTP响应的状态码。</li><li><code>result</code>：获取请求的结果。</li><li><code>uploadHandler</code>：用于上传数据。</li></ul><h2 id="UnityWebRequest-上传相关数据类"><a href="#UnityWebRequest-上传相关数据类" class="headerlink" title="UnityWebRequest 上传相关数据类"></a>UnityWebRequest 上传相关数据类</h2><p>UnityWebRequest 是 Unity 中用于发送和接收 HTTP 请求的类。它提供了一种灵活的方式来与 Web 服务器进行通信，并支持各种常见的 HTTP 操作。</p><p>UnityWebRequest 的常用操作包括：</p><ul><li>Get：<code>UnityWebRequest.Get</code> 方法可用于发送 GET 请求。</li><li>Post：<code>UnityWebRequest.Post</code> 方法可用于发送 POST 请求。</li><li>Put：<code>UnityWebRequest.Put</code> 方法可用于发送 PUT 请求。</li><li>Delete：<code>UnityWebRequest.Delete</code> 方法可用于发送 DELETE 请求。</li></ul><p>上传数据时，我们可以使用 UnityWebRequest 的 <code>UploadHandler</code> 和 <code>DownloadHandler</code> 属性来处理上传和接收的数据。</p><ul><li><code>UploadHandler</code>：用于上传数据。</li><li><code>DownloadHandler</code>：用于接收数据。</li></ul><p>父接口<code>IMultipartFormSection</code>数据相关类都继承该接口我们可以用父类装子类</p><p>子类数据<code>MultipartFormDataSection</code></p><p><code>MultipartFormFileSection</code>是UnityWebRequest中的一个类，用于表示多部分表单中的文件数据。它继承自<code>IMultipartFormSection</code>接口，可以用于上传文件数据到Web服务器。</p><p>Post</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125731107.png" class="" title="image-20231101125731107"><p>注意：Put请求类型不是所有的web服务器都认，必须要服务器处理该请求类型那么才能有相应</p><p>我们可以利用Post上传数据或上传文件  Put主要用于上传文件，但是必须资源服务器支持Put请求类型 为了通用性，我们可以统一使用Post请求类型进行数据和资源的上传它的使用和之前的WWW类似，只要前后端制定好规则就可以相互通信了</p><p>自定义获取数据DownloadHandler相关类</p><p>关键类：</p><p>1.DownloadHandlerBuffer 用于简单的数据存储，得到对应的2进制数据。</p><p>2.DownloadHandlerFile 用于下载文件并将文件保存到磁盘（内存占用少）。</p><p>3.DownloadHandlerTexture 用于下载图像。</p><p>4.DownloadHandlerAssetBundle 用于提取 AssetBundle。</p><p>5.DownloadHandlerAudioClip 用于下载音频文件。</p><p>以上的这些类，其实就是Unity帮助我们实现好的，用于解析下载下来的数据的类</p><p>使用对应的类处理下载数据，他们就会在内部将下载的数据处理为对应的类型，方便我们使用</p><p>Unity中的<code>DownloadHandler</code>类用于处理下载的数据。它提供了多个子类，用于处理不同类型的数据，例如<code>DownloadHandlerBuffer</code>用于简单的数据存储，<code>DownloadHandlerFile</code>用于下载并保存文件到磁盘，<code>DownloadHandlerTexture</code>用于下载图像，<code>DownloadHandlerAssetBundle</code>用于提取AssetBundle，以及<code>DownloadHandlerAudioClip</code>用于下载音频文件。</p><p>您可以使用这些子类根据数据的类型对下载的数据进行处理，使其更容易在Unity项目中使用。</p><p><code>**DownloadHandlerScript</code> 是一个特殊类。就其本身而言，不会执行任何操作。**</p><p><strong>但是，此类可由用户定义的类继承。此类接收来自 UnityWebRequest 系统的回调，</strong></p><p><strong>然后可以使用这些回调在数据从网络到达时执行完全自定义的数据处理。</strong></p><p><code>**DownloadHandlerScript</code> 是一个特殊类，它允许用户自定义的类继承并处理从网络接收到的数据。通过继承 <code>DownloadHandlerScript</code> 类，可以编写自定义的数据处理逻辑，以在数据从网络到达时执行特定的操作。**</p><p>使用 <code>DownloadHandlerScript</code> 需要实现以下方法：</p><ul><li><code>public override bool ReceiveData(byte[] data, int dataLength)</code>: 在接收到数据时调用此方法。可以在此方法中对接收到的数据进行处理。</li><li><code>public override void CompleteContent()</code>: 在接收到所有数据后调用此方法，表示数据接收已完成。</li></ul><p>通过继承 <code>DownloadHandlerScript</code> 并实现上述方法，可以根据具体需求对下载的数据进行自定义处理。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomDownloadHandler</span> : <span class="hljs-title">DownloadHandlerScript</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomDownloadHandler</span>() : <span class="hljs-title">base</span>()</span><br>    &#123;<br>    &#125;<br><span class="hljs-comment">//从网络收到数据后 每帧会调用的方法  会自动调用的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReceiveData</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] data, <span class="hljs-built_in">int</span> dataLength</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 在这里对接收到的数据进行处理</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-comment">//从服务器收到 COntent-Length标头时  会自动调用的方法</span><br>ReceiveContentLengthHeader<br><br><span class="hljs-comment">//当消息收完了 会自动调用的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CompleteContent</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 数据接收完成后的操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用自定义的 <code>DownloadHandlerScript</code> 类，可以在 UnityWebRequest 中进行注册：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">UnityWebRequest request = UnityWebRequest.Get(url);<br>request.downloadHandler = <span class="hljs-keyword">new</span> CustomDownloadHandler();<br><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request.SendWebRequest();<br></code></pre></td></tr></table></figure><p>通过自定义的 <code>DownloadHandlerScript</code> 类，可以实现对下载数据的个性化处理。</p><p>UnityWebRequest 提供了一些高级操作，包括：</p><ol><li>设置请求头信息：可以使用 <code>SetRequestHeader</code> 方法来设置请求头信息，例如设置认证信息或自定义的请求头。</li><li>上传表单数据：使用 <code>UnityWebRequest.Post</code> 方法可以发送 POST 请求，并通过 <code>UploadHandler</code> 来上传表单数据。可以使用 <code>WWWForm</code> 类来构建表单数据。</li><li>上传文件：可以使用 <code>UnityWebRequest.Post</code> 方法发送 POST 请求，并通过 <code>UploadHandler</code> 和 <code>MultipartFormDataSection</code> 来上传文件数据。</li><li>上传二进制数据：使用 <code>UnityWebRequest.Post</code> 方法发送 POST 请求，并通过 <code>UploadHandlerRaw</code> 来上传二进制数据。</li><li>下载文件：可以使用 <code>UnityWebRequest.Get</code> 方法发送 GET 请求，并通过 <code>DownloadHandlerFile</code> 来下载文件并保存到磁盘。</li><li>下载图片：使用 <code>UnityWebRequest.Get</code> 方法发送 GET 请求，并通过 <code>DownloadHandlerTexture</code> 来下载图片。</li><li>下载 AssetBundle：可以使用 <code>UnityWebRequest.Get</code> 方法发送 GET 请求，并通过 <code>DownloadHandlerAssetBundle</code> 来下载 AssetBundle。</li><li>自定义数据处理：可以继承自 <code>DownloadHandlerScript</code> 类来自定义数据的处理逻辑，通过重写 <code>ReceiveData</code> 和 <code>CompleteContent</code> 方法来实现。</li></ol><p>这些高级操作可以满足更复杂的网络请求需求，例如上传文件、上传表单数据以及对下载数据进行个性化处理。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 通过UnityWebRequest去获取数据</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>byte[]、Texture、AssetBundle、AudioClip、object（自定义的 如果是object证明要保存到本地）<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;path&quot;&gt;</span>远端或者本地数据路径 http ftp file<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span>获取成功后的回调函数<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;localPath&quot;&gt;</span>如果是下载到本地 需要传第3个参数<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;type&quot;&gt;</span>如果是下载 音效切片文件 需要穿音效类型<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UnityWebRequestLoad</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; action, <span class="hljs-built_in">string</span> localPath = <span class="hljs-string">&quot;&quot;</span>, AudioType type = AudioType.MPEG</span>) <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>&#123;<br>    StartCoroutine(UnityWebRequestLoadAsync&lt;T&gt;(path, action, localPath, type));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">UnityWebRequestLoadAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; action, <span class="hljs-built_in">string</span> localPath = <span class="hljs-string">&quot;&quot;</span>, AudioType type = AudioType.MPEG</span>) <span class="hljs-keyword">where</span> T:<span class="hljs-keyword">class</span></span><br>&#123;<br>    UnityWebRequest req = <span class="hljs-keyword">new</span> UnityWebRequest(path, UnityWebRequest.kHttpVerbGET);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">byte</span>[]))<br>        req.downloadHandler = <span class="hljs-keyword">new</span> DownloadHandlerBuffer();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(Texture))<br>        req.downloadHandler = <span class="hljs-keyword">new</span> DownloadHandlerTexture();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AssetBundle))<br>        req.downloadHandler = <span class="hljs-keyword">new</span> DownloadHandlerAssetBundle(req.url, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">object</span>))<br>        req.downloadHandler = <span class="hljs-keyword">new</span> DownloadHandlerFile(localPath);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AudioClip))<br>        req = UnityWebRequestMultimedia.GetAudioClip(path, type);<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//如果出现没有的类型  就不用继续往下执行了</span><br>    &#123;<br>        Debug.LogWarning(<span class="hljs-string">&quot;未知类型&quot;</span> + <span class="hljs-keyword">typeof</span>(T));<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> req.SendWebRequest();<br><br>    <span class="hljs-keyword">if</span>(req.result == UnityWebRequest.Result.Success)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">byte</span>[]))<br>            action?.Invoke(req.downloadHandler.data <span class="hljs-keyword">as</span> T);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(Texture))<br>            <span class="hljs-comment">//action?.Invoke((req.downloadHandler as DownloadHandlerTexture).texture as T);</span><br>            action?.Invoke(DownloadHandlerTexture.GetContent(req) <span class="hljs-keyword">as</span> T);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AssetBundle))<br>            action?.Invoke((req.downloadHandler <span class="hljs-keyword">as</span> DownloadHandlerAssetBundle).assetBundle <span class="hljs-keyword">as</span> T);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">object</span>))<br>            action?.Invoke(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(T) == <span class="hljs-keyword">typeof</span>(AudioClip))<br>            action?.Invoke(DownloadHandlerAudioClip.GetContent(req) <span class="hljs-keyword">as</span> T);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Debug.LogWarning(<span class="hljs-string">&quot;获取数据失败&quot;</span> + req.result + req.error + req.responseCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><aside> 💡 https://docs.unity.cn/cn/2020.3/ScriptReference/Networking.UnityWebRequest.html</aside><p>更大内容 多看官方API</p><h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><p>Protobuf（Protocol Buffers）是一种轻量级的数据序列化格式，由谷歌开发。它可以将结构化数据序列化为二进制格式，以便在不同平台和语言之间进行高效的数据交换和存储。  如果是老版本的Unity就使用Protobuf-Net</p><p>Protobuf具有以下优点：</p><ul><li>高效性：Protobuf序列化后的数据大小较小，占用较少的网络带宽和存储空间。</li><li>可扩展性：可以向已定义的数据结构中添加新字段，而不会破坏现有的数据。</li><li>可读性：Protobuf使用结构化的数据定义语言，使数据结构易于理解和维护。</li><li>跨平台和语言支持：Protobuf支持多种编程语言，并且可以在不同的操作系统和平台之间进行数据交换。</li></ul><p>您可以通过定义消息类型和字段来创建Protobuf消息，并使用Protobuf编译器生成与您选择的编程语言相对应的代码。这样，您就可以使用生成的代码来序列化和反序列化消息对象。</p><p>更多关于Protobuf的信息，<a href="https://developers.google.com/protocol-buffers">谷歌官方文档</a>。</p><p><strong>首先准备 DLL文件</strong></p><p>打开csharp\src中的Google.Protobuf.sln  选择Google.Protobuf右键生成 dll文件</p><p>在csharp\src\Google.Protobuf\bin\Debug路径下找到对应.net版本的Dll文件（我们使用4.5即可</p><p>下载protoc-版本-win32或者64（根据操作系统而定）</p><p>解压后获取bin文件夹中的protoc.exe可执行文件，  可将其放入Unity工程中，方便之后的使用（你也可以不放入Unity工程，记住它的路径即可）</p><p>协议后缀为xxxx.proto</p><p>Protobuf的规则如下：</p><ul><li>使用.proto作为协议文件的后缀名。</li><li>在.proto文件中定义消息类型和字段。</li><li>每个字段都有一个唯一的标识符和一个字段类型。</li><li>字段类型可以是基本类型（如int、float、string等），也可以是其他消息类型。</li><li>消息类型可以嵌套在其他消息类型中，以创建复杂的数据结构。</li><li>可以为字段设置标签，用于指定字段的序号和规则。</li><li>使用编译器将.proto文件编译为与所选编程语言相对应的代码。</li><li>使用生成的代码来序列化和反序列化消息对象。</li></ul><p>要使用Protobuf，您需要准备好Google.Protobuf的DLL文件，并在Unity项目中引用它。还需要下载protoc编译器，并将其放入Unity工程中或记住其路径。</p><p>在.proto文件中定义消息类型和字段，然后使用编译器生成代码。通过使用生成的代码，您可以将消息对象序列化为二进制格式或从二进制格式反序列化为消息对象。</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125751995.png" class="" title="image-20231101125751995"><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">//规则一 版本号 决定了proto文档的版本号</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-comment">//规则二 package 决定了生成的文件的命名空间</span><br><span class="hljs-keyword">package</span> Heart.Message;<br><br><span class="hljs-comment">//import &quot;Assets/Scripts/Protocol/test2.proto&quot;;</span><br><br><span class="hljs-comment">//规则三 option csharp_namespace 决定了生成的C#文件的命名空间</span><br><span class="hljs-keyword">option</span> csharp_namespace = <span class="hljs-string">&quot;Heart.Message&quot;</span>;<br><span class="hljs-comment">//规则四 option cc_enable_arenas = true; 决定了生成的C++文件是否启用arena内存管理</span><br><span class="hljs-keyword">option</span> cc_enable_arenas = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//规则五 注释 // /* */</span><br><span class="hljs-comment">//规则六 message 决定了生成的类</span><br><br><span class="hljs-comment">////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Basic Defines</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">TestMsg</span>&#123;<br>    <span class="hljs-comment">//规则七 成员类型 和 唯一编号</span><br>    <span class="hljs-type">float</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int32</span> b = <span class="hljs-number">2</span>; <span class="hljs-comment">//变长编码 1-5字节 int32 int64  无符号 uint32 uint64  存负数 sint32 sint64 bool enum</span><br>    <span class="hljs-type">int64</span> c = <span class="hljs-number">3</span>; <span class="hljs-comment">//C# long</span><br>    <span class="hljs-type">string</span> d = <span class="hljs-number">4</span>; <br>    <span class="hljs-type">bool</span> e = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">// 固定字节 4字节 fixed32 fixed64 sfixed32 sfixed64</span><br>    <span class="hljs-type">fixed32</span> testFixed32 = <span class="hljs-number">6</span>; <span class="hljs-comment">//C# -uint 它通常用来表示大于2的28次方的数 ，比uint32更有效 始终是4个字节</span><br>    <span class="hljs-type">fixed64</span> testFixed64 = <span class="hljs-number">7</span>; <span class="hljs-comment">//C# -ulong 它通常用来表示大于2的56次方的数 ，比uint64更有效 始终是8个字节</span><br><br>    <span class="hljs-type">sfixed32</span> testSFixed32 = <span class="hljs-number">8</span>; <span class="hljs-comment">//C# - int 始终4个字节</span><br>    <span class="hljs-type">sfixed64</span> testSFixed64 = <span class="hljs-number">9</span>; <span class="hljs-comment">//C# - long 始终8个字节</span><br>    <span class="hljs-comment">//其他类型</span><br>    <span class="hljs-type">bytes</span> testBytes = <span class="hljs-number">10</span>; <span class="hljs-comment">//C# - BytesString 字节字符串</span><br>    <br>    <span class="hljs-comment">//规则八 特殊标识</span><br>    <span class="hljs-comment">//required 表示必须赋值的字段</span><br>    <span class="hljs-comment">//required float testRequired = 14;</span><br>    <span class="hljs-comment">//optional 表示可选字段</span><br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">int32</span> testOptional = <span class="hljs-number">11</span>;<br>    <span class="hljs-comment">//repeated 表示数组 List</span><br>    <span class="hljs-keyword">repeated</span> <span class="hljs-type">int32</span> f = <span class="hljs-number">12</span>;<br>    <span class="hljs-comment">//map 表示字典 Dictionary</span><br>    map&lt;<span class="hljs-type">int32</span>, <span class="hljs-type">string</span>&gt; g = <span class="hljs-number">13</span>;<br>    <span class="hljs-comment">//oneof 表示互斥</span><br>    <span class="hljs-keyword">oneof</span> testOneof&#123;<br>        <span class="hljs-type">int32</span> h = <span class="hljs-number">14</span>;<br>        <span class="hljs-type">string</span> i = <span class="hljs-number">15</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//规则九 枚举</span><br><span class="hljs-keyword">enum </span><span class="hljs-title class_">TestEnum</span>&#123;<br>    TESTENUM1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//第一个枚举值必须默认为0</span><br>    TESTENUM2 = <span class="hljs-number">1</span>;<br>    TESTENUM3 = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//规则十 默认值</span><br><span class="hljs-comment">//int32 testDefault = 16 [default = 100];</span><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">TestMsg2</span>&#123;<br>    <span class="hljs-comment">//规则十一 嵌套  默认为null 使用时需要new</span><br>    TestMsg testMsg = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//规则十二 引用</span><br>    TestEnum testEnum = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//规则十三 引用</span><br>    TestMsg2 testMsg2 = <span class="hljs-number">3</span>;<br>    <br>    <span class="hljs-comment">//规则十四 重命名</span><br>    <span class="hljs-comment">//TestMsg testMsg = 1 [(nanopb_msgopt).msgtype = &quot;TestMsg&quot;];</span><br>    <span class="hljs-comment">//规则十五 占用</span><br>    reserved <span class="hljs-number">22</span>;<span class="hljs-comment">//告诉编译器 22这个编号不能使用被占用了</span><br>    <br>    <span class="hljs-comment">//规则十六 导入定义</span><br>    <span class="hljs-comment">//import &quot;配置文件路径&quot;; 能通过import导入其他proto文件</span><br>    <span class="hljs-comment">//import &quot;Assets/Scripts/Protocol/test2.proto&quot;;</span><br>    <span class="hljs-comment">//easily.Message.easiltTest testMsg2 = 4;</span><br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">TestMsg3</span>&#123;<br>    TestMsg2 testMsg2 = <span class="hljs-number">1</span>;<br>    TestMsg3 testMsg3 = <span class="hljs-number">2</span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>根据协议文件生成对应脚本文件</strong></p><p>1.打开cmd窗口</p><p>2.进入protoc.exe所在文件夹（也可以直接将exe文件拖入cmd窗口中）</p><p>3.输入转换指令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">protoc.exe <span class="hljs-attribute">-I</span>=配置路径 <span class="hljs-attribute">--csharp_out</span>=输出路径 配置文件名<br></code></pre></td></tr></table></figure><p>注意：路径不要有中文和特殊符号，避免生成失败</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%BA%8C/image-20231101125804322.png" class="" title="image-20231101125804322"><p>Protobuf生成的类可以使用以下方法进行序列化和反序列化：</p><h3 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Heart.Message; <span class="hljs-comment">// 根据您的命名空间进行引用</span><br><br><span class="hljs-comment">// 创建TestMsg对象</span><br>TestMsg testMsg = <span class="hljs-keyword">new</span> TestMsg<br>&#123;<br>    a = <span class="hljs-number">1.23f</span>,<br>    b = <span class="hljs-number">456</span>,<br>    c = <span class="hljs-number">789</span>,<br>    d = <span class="hljs-string">&quot;Hello World&quot;</span>,<br>    e = <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 设置其他字段的值</span><br>&#125;;<br><br><span class="hljs-comment">// 将TestMsg对象序列化为字节数组</span><br><span class="hljs-built_in">byte</span>[] protobufData;<br><span class="hljs-keyword">using</span> (MemoryStream stream = <span class="hljs-keyword">new</span> MemoryStream())<br>&#123;<br>    testMsg.WriteTo(stream);<br>    protobufData = stream.ToArray();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Heart.Message; <span class="hljs-comment">// 根据您的命名空间进行引用</span><br><br><span class="hljs-comment">// 从字节数组中反序列化TestMsg对象</span><br>TestMsg testMsg;<br><span class="hljs-keyword">using</span> (MemoryStream stream = <span class="hljs-keyword">new</span> MemoryStream(protobufData))<br>&#123;<br>    testMsg = TestMsg.Parser.ParseFrom(stream);<br>&#125;<br><br><span class="hljs-comment">// 可以通过testMsg对象的各个属性访问反序列化后的值</span><br><span class="hljs-built_in">float</span> a = testMsg.a;<br><span class="hljs-built_in">int</span> b = testMsg.b;<br>int64 c = testMsg.c;<br><span class="hljs-built_in">string</span> d = testMsg.d;<br><span class="hljs-built_in">bool</span> e = testMsg.e;<br><span class="hljs-comment">// 访问其他字段的值</span><br></code></pre></td></tr></table></figure><p>以上是使用C#进行Protobuf序列化和反序列化的基本示例。</p><h3 id="序列化为二进制："><a href="#序列化为二进制：" class="headerlink" title="序列化为二进制："></a>序列化为二进制：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Heart.Message; <span class="hljs-comment">// 根据您的命名空间进行引用</span><br><span class="hljs-keyword">using</span> Google.Protobuf; <span class="hljs-comment">// 引用Google.Protobuf命名空间</span><br><br><span class="hljs-comment">// 创建TestMsg对象</span><br>TestMsg testMsg = <span class="hljs-keyword">new</span> TestMsg<br>&#123;<br>    a = <span class="hljs-number">1.23f</span>,<br>    b = <span class="hljs-number">456</span>,<br>    c = <span class="hljs-number">789</span>,<br>    d = <span class="hljs-string">&quot;Hello World&quot;</span>,<br>    e = <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 设置其他字段的值</span><br>&#125;;<br><br><span class="hljs-comment">// 将TestMsg对象序列化为二进制数据</span><br><span class="hljs-built_in">byte</span>[] binaryData = testMsg.ToByteArray();<br></code></pre></td></tr></table></figure><h3 id="从二进制数据中反序列化："><a href="#从二进制数据中反序列化：" class="headerlink" title="从二进制数据中反序列化："></a>从二进制数据中反序列化：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Heart.Message; <span class="hljs-comment">// 根据您的命名空间进行引用</span><br><span class="hljs-keyword">using</span> Google.Protobuf; <span class="hljs-comment">// 引用Google.Protobuf命名空间</span><br><br><span class="hljs-comment">// 从二进制数据中反序列化TestMsg对象</span><br>TestMsg testMsg = TestMsg.Parser.ParseFrom(binaryData);<br><br><span class="hljs-comment">// 可以通过testMsg对象的各个属性访问反序列化后的值</span><br><span class="hljs-built_in">float</span> a = testMsg.a;<br><span class="hljs-built_in">int</span> b = testMsg.b;<br>int64 c = testMsg.c;<br><span class="hljs-built_in">string</span> d = testMsg.d;<br><span class="hljs-built_in">bool</span> e = testMsg.e;<br><span class="hljs-comment">// 访问其他字段的值</span><br></code></pre></td></tr></table></figure><p>以上是使用C#和Google.Protobuf进行Protobuf序列化和反序列化为二进制数据的示例。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="大小端模式（Endian）是指在存储和处理多字节数据时，字节序列的排列方式。"><a href="#大小端模式（Endian）是指在存储和处理多字节数据时，字节序列的排列方式。" class="headerlink" title="大小端模式（Endian）是指在存储和处理多字节数据时，字节序列的排列方式。"></a>大小端模式（Endian）是指在存储和处理多字节数据时，字节序列的排列方式。</h3><ul><li>大端模式（Big Endian）：高位字节存储在低地址，低位字节存储在高地址。</li><li>小端模式（Little Endian）：低位字节存储在低地址，高位字节存储在高地址。</li></ul><p>在计算机中，存储器以字节为单位进行寻址，而多字节数据（如整数、浮点数）需要占用多个字节进行存储。因此，对于多字节数据，需要决定字节的顺序排列方式。</p><p>例如，对于十六进制数值0x12345678：</p><ul><li>在大端模式下，内存中的存储顺序为：0x12 0x34 0x56 0x78。</li><li>在小端模式下，内存中的存储顺序为：0x78 0x56 0x34 0x12。</li></ul><p>大小端模式在不同的计算机体系结构和处理器架构中有不同的使用方式。在网络通信中，通常使用大端模式作为网络字节序（Network Byte Order）。</p><p>请注意，Protobuf不依赖于特定的大小端模式，而是使用固定的规则将数据序列化为二进制格式。</p><p><strong>一般情况下，操作系统都是小端模式，而通讯协议都是大端模式</strong></p><p><strong>但是具体的模式，还是要根据硬件平台，开发语言来决定 主机不同，开发语言不同 可能采用的大小端模式也会不一致</strong></p><p><strong>大小端模式对于我们的影响</strong></p><p>我们记住一句话：只有读取的时候，才必须区分大小端字节序，其它情况都不用考虑</p><p>因此对于我们来说，在网络传输当中我们传输的是字节数组 那么我们在收到字节数组进行解析时，就需要考虑大小端的问题</p><p>虽然TCP&#x2F;IP协议规定了在网络上必须采用网络字节顺序（大端模式） 但是具体传输时采用哪种模式，都是根据前后端语言、设备决定的</p><p>在进行网络通讯时，前后端语言不同时，可能会造成大小端不统一  <strong>一般情况下</strong>C# 和 Java&#x2F;Erlang&#x2F;AS3 通讯需要进行大小端转换 因为C#是小端模式 Java&#x2F;Erlang&#x2F;AS3是大端模式</p><p>C# 与 C++通信不需要特殊处理 他们都是小端模式</p><p><strong><code>print(&quot;是否是小端模式:&quot; + BitConverter.IsLittleEndian);</code></strong></p><h3 id="消息的加密解密"><a href="#消息的加密解密" class="headerlink" title="消息的加密解密"></a>消息的加密解密</h3><p>消息的加密解密是指在网络通信中，对传输的消息进行保护和安全处理的过程。</p><p>加密是将明文消息转换为密文消息的过程。通过使用加密算法和密钥，可以将消息转换为一种无法直接理解的形式，以保护消息的机密性。只有拥有正确密钥的接收方才能解密并还原消息。</p><p>解密是将密文消息转换回原始明文消息的过程。接收方使用相同的加密算法和密钥，对接收到的密文消息进行解密操作，以还原出原始的明文消息。</p><p>加密解密技术在保护通信内容的隐私和安全方面起着重要的作用。通过加密解密，可以防止未经授权的人获取和篡改通信内容，确保通信的机密性和完整性。</p><p>常见的加密解密算法包括对称加密算法和非对称加密算法。对称加密算法使用相同的密钥进行加密和解密操作，速度较快，但密钥的传输和管理相对复杂。非对称加密算法使用公钥和私钥进行加密和解密操作，安全性较高，但速度较慢。</p><p>在实际应用中，加密解密技术被广泛用于保护敏感数据的传输，如在线支付、电子邮件通信、云存储等场景。通过加密解密，可以增强数据的安全性和保护用户的隐私。</p><p>单向加密</p><p>将数据进行计算变成另一种固定长度的值，这种加密是不可逆的</p><p>常用算法</p><p>MD5、SHA1、SHA256等</p><p>用途：这种加密在网络传输中不会使用，主要用到其它功能当中，比如密码的单向加密</p><p>对称加密技术</p><p>使用同一个密钥，对数据镜像加密和解密（用密钥对明文加密，用密钥对密文解密）</p><p>常用算法</p><p>DES、3DES、IDEA、AES等</p><p>优点：计算量小，加密速度快、效率高</p><p>缺点：如果知道了密钥和算法，就可以进行解密</p><p>用途：网路通讯中可以使用对称加密技术，这个密钥可以是由后端下发的，每次建立通讯后都会变化的</p><p>3.非对称加密技术</p><p>在加密过程中，需要一对密钥，不公开的密钥称为私钥，公开的那一个密钥称为公钥</p><p>也可以称为公开密钥加密</p><p>从一对密钥中的任何一个密钥都不能计算出另一个密钥</p><p>使用一对密钥中的任何一个加密，只有另一个密钥才能解密。如果截获公钥加密数据，没有私钥也无法解密</p><p>常用算法</p><p>RSA、DSA等</p><p>优点：安全性高，即使获取到了公钥，没有私钥也无法进行解密</p><p>缺点：算法复杂，加密速度较慢</p><p>用途：对安全性要求较高的场景，并且可以接受较慢的加密速度的需求可以使用非对称加密技术</p><p>以后在对接一些支付SDK时经常会看到平台提供的就是非对称加密技术</p><p>关于这些加密算法  有很多的别人写好的第三发加密算法库</p><p>可以直接获取用于在程序中对数据进行加密</p>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>Socket</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络开发基础</title>
    <link href="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="网络基本概念"><a href="#网络基本概念" class="headerlink" title="网络基本概念"></a>网络基本概念</h2><h3 id="局域网（LAN）"><a href="#局域网（LAN）" class="headerlink" title="局域网（LAN）"></a>局域网（LAN）</h3><p>局域网是指在一个相对较小的地理范围内，如家庭、办公室或学校等，通过网络连接起来的计算机和设备的集合。局域网通常用于内部通信和资源共享。</p><h3 id="以太网（Ethernet）"><a href="#以太网（Ethernet）" class="headerlink" title="以太网（Ethernet）"></a>以太网（Ethernet）</h3><p>以太网是一种常用的局域网技术，它使用了一组标准化的<strong>通信协议</strong>和硬件设备，使计算机和设备能够在局域网中进行通信。</p><h3 id="城域网（MAN）"><a href="#城域网（MAN）" class="headerlink" title="城域网（MAN）"></a>城域网（MAN）</h3><p>城域网是指覆盖一个城市或地理范围较大的区域的计算机网络。城域网通常连接多个局域网，并提供更大范围的通信和资源共享。</p><h3 id="广域网（WAN）"><a href="#广域网（WAN）" class="headerlink" title="广域网（WAN）"></a>广域网（WAN）</h3><p>广域网是连接不同地理位置的计算机和网络设备的网络。广域网通常由多个局域网或城域网组成，通过公共的通信通道进行数据传输 <strong>不等同于互联网</strong>。</p><h3 id="因特网（Internet）"><a href="#因特网（Internet）" class="headerlink" title="因特网（Internet）"></a>因特网（Internet）</h3><p>因特网是由全球范围的计算机网络互相连接而成的庞大网络。它使用了一系列的通信协议和标准，允许全球范围内的计算机和设备进行通信和数据交换。</p><h3 id="互联网（Intranet）"><a href="#互联网（Intranet）" class="headerlink" title="互联网（Intranet）"></a>互联网（Intranet）</h3><p>互联网是一种私有的、局域性的网络，通常在组织或企业内部使用。它使用了因特网技术和协议，但仅对内部成员或特定授权的用户可用。 互联网等于于广域网 广域网包含于互联网</p><p><strong>定义了计算机如何介入互联网，以及介入互联网的计算机的通信标准 也就是为我们的设备定义连入标准 并且为传输的2进制数据定义一些传输规则</strong></p><h3 id="万维网（World-Wide-Web）"><a href="#万维网（World-Wide-Web）" class="headerlink" title="万维网（World Wide Web）"></a>万维网（World Wide Web）</h3><p>万维网是一种基于因特网的信息系统，它使用了超文本和超链接等技术，使用户能够浏览和访问通过互联网上的文档和资源。能看做为 万维网对因特网的应用 基于网站和网页的统称</p><h3 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h3><p>IP地址：IP协议提供的一种统一地址格式 设备在网络中的地址</p><p>IPv4： 0<del>255 协议取值范围  IPv6 0</del>65535  端口号 0~65535 一般选择1024以上的端口进行使用  MAC地址：网卡唯一标识  IP<strong>相当于地址 端口相当于门牌号 MAC相当于身份证</strong></p><p>网络游戏：服务端 玩家之间可以交互 <strong>静态不变的数据存储在本地 动态的存储在服务器  消息转发 数据存储 逻辑处理</strong></p><p>客户端 主要就是游戏玩法 UI交互 美术表现 本地数据保存等</p><p>数据通信模型</p><p>C&#x2F;S模型 客户端和服务器的模式</p><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a><strong>网络协议</strong></h3><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101124852508.png" class="" title="image-20231101124852508"><p><code>OSI</code>模型：将通信过程分成了七个层级</p><ol><li>物理层（Physical Layer）：负责传输比特流，包括物理介质、电压和连接器等硬件设备。</li><li>数据链路层（Data Link Layer）：负责<strong>将比特流转换为数据帧</strong>，并提供错误检测和纠正的功能。它还管理<strong>物理地址（MAC地址）和数据的流</strong>控制。</li><li>网络层（Network Layer）：负责数据的路由和转发，将数据包从源主机发送到目标主机。它使用<strong>IP地址来标识主机和网络</strong>，并提供了网络互连的功能。</li><li>传输层（Transport Layer）：负责在源主机和目标主机之间建立可靠的数据传输连接。它提供了<strong>端到端</strong>的错误检测和纠正、数据分段和流量控制等功能。常见的传输层协议有TCP和UDP。</li><li>会话层（Session Layer）：负责<strong>建立、管理和终止会话（Session）或连接</strong>。它提供了会话的控制和同步功能，以确保数据的正确传输。</li><li>表示层（Presentation Layer）：负责<strong>数据的格式化</strong>和表示，以便不同系统之间能够正确地解释和处理数据。它处理<strong>数据的加密、压缩和转换</strong>等操作。</li><li>应用层（Application Layer）：提供<strong>网络服务和应用程序之间的接口</strong>。它包括各种<strong>应用层协议，如HTTP、FTP、SMTP</strong>等，用于实现不同的网络应用。</li></ol><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101124910698.png" class="" title="image-20231101124910698"><p><strong>TCP&#x2F;IP协议： 很多协议规则的统称</strong></p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101124935418.png" class="" title="image-20231101124935418"><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101124944696.png" class="" title="image-20231101124944696"><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101124956779.png" class="" title="image-20231101124956779"><h3 id="TCP协议三次握手，四次挥手"><a href="#TCP协议三次握手，四次挥手" class="headerlink" title="TCP协议三次握手，四次挥手"></a>TCP协议<strong>三次握手，四次挥手</strong></h3><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101125025602.png" class="" title="image-20231101125025602"><p>两者的区别</p><img src="/2023/11/01/CSharp/%E7%BD%91%E7%BB%9C%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20231101125040805.png" class="" title="image-20231101125040805"><p>弱联网游戏：不频繁的进行数据通信，客户端和服务器之间每次连接只处理一次请求，服务端处理完客户端的请求后返回数据后就断开连接了 代表游戏：三消类 卡牌类</p><p>通信特点 ：需要通信时再链接 通讯完断开</p><p>通信方式：HTTP超文本传输协议</p><p>主要用Http&#x2F;Https制作</p><p>强联网游戏：频繁的进行数据通信 会一直保持连接状态 不停的和服务器之间交换数据 代表游戏：MMORPG MOBA ACT</p><p>通信特点：链接一直建立 可以实时传输数据</p><p>通信方式：TCP传输控制协议 UDP用户数据协议</p><p>Socket套接字制作</p><p>在<strong>网络通信</strong>中 我们把想要传递的类对象信息序列化为2进制对象 再将2进制数据通过网络传输给远端设备 远端设备获取到该2进制数据后再将其反序列化为对应的类对象</p><p>注意在网络开发中我们不会使用<code>BinaryFormatter</code>类序列化 ( 无法兼容其他语言)</p><p>二进制 序列化数据 反序列化</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">BitConverter.GetBytes()` `Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;&quot;</span>)/` `GetXX BitConverter.ToXX(,)<br></code></pre></td></tr></table></figure><p>1.得到明确是数组长度</p><p>2.准备装载信息的字节数组容器</p><p>3.将对象的信息转为字节数组放入容器 <code>BitConverter.GetBytes().CopyTo(,从哪个位置开始)</code> 在这个过程中注意装载各数据之间的长度 <code>sizeof()</code> string类型最好是在前面多装个int</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><ol><li><p>常见的网络拓扑结构有哪些？（请至少写出5种拓扑结构）</p><ul><li>星型拓扑（Star Topology）：所有设备都连接到一个中央设备（如交换机或集线器），形成星型结构。</li><li>总线拓扑（Bus Topology）：所有设备都连接到一个共享的传输介质（如电缆），形成线性结构。</li><li>环形拓扑（Ring Topology）：每个设备都与相邻的设备直接相连，形成环形结构。</li><li>树状拓扑（Tree Topology）：设备通过层级结构连接，形成树状结构。</li><li>网状拓扑（Mesh Topology）：每个设备都与其他设备直接相连，形成复杂的网状结构。</li></ul></li><li><p>网络是如何让设备之间可以通信的？</p><p> 网络通过使用协议和协议栈来实现设备之间的通信。</p></li><li><p>IP地址和端口的作用？</p><p> IP地址用于标识网络上的设备。它是一个由32位（IPv4）或128位（IPv6）组成的数字，用于唯一地标识一个设备或网络接口。IP地址分为两部分：网络部分和主机部分。端口是一个用于标识应用程序或服务的数字，它是在传输层使用的。在一个设备上，可以有多个应用程序或服务通过不同的端口进行通信。IP地址和端口号一起用于确定数据包在网络上的源和目标。</p></li><li><p>什么是服务端（服务器）？游戏服务器一般处理什么？</p><p> 服务端（服务器）是指在网络中提供服务的计算机或设备。它可以是一个物理服务器或一个虚拟服务器      用于处理游戏的网络通信和逻辑。游戏服务器负责处理玩家之间的交互、计算游戏逻辑、存储玩家数据等。</p></li><li><p>游戏服务器的布局架构一般采用什么方式？</p><p> 游戏服务器的布局架构通常采用分布式架构</p></li><li><p>游戏中的通信模型一般采用什么方式？</p><p> 游戏中的通信模型一般采用客户端-服务器模型</p></li><li><p>OSI七层模型分别有哪些层？并简要说明每一层的作用？</p><ul><li>物理层（Physical Layer）：负责传输比特流，处理物理介质和电信号等。</li><li>数据链路层（Data Link Layer）：负责将数据划分为数据帧，并提供错误检测和纠正的功能。</li><li>网络层（Network Layer）：负责数据的路由和转发，实现不同网络之间的互连。</li><li>传输层（Transport Layer）：负责建立可靠的端到端数据传输连接。</li><li>会话层（Session Layer）：负责建立、管理和终止会话或连接。</li><li>表示层（Presentation Layer）：负责数据的格式化和表示，以便不同系统之间能够正确解释和处理数据。</li><li>应用层（Application Layer）：提供网络服务和应用程序之间的接口。</li></ul></li><li><p>分别说出TCP&#x2F;IP协议的4层，并且说出上两层对应的部分协议</p><ul><li>网络接口层（Network Interface Layer）：对应于OSI模型的物理层和数据链路层，负责将数据转换为比特流并通过物理介质传输。</li><li>网络层（Internet Layer）：对应于OSI模型的网络层，负责数据的路由和转发，使用IP协议进行网络互连。</li><li>传输层（Transport Layer）：对应于OSI模型的传输层，提供可靠的端到端数据传输，使用TCP和UDP协议。</li><li>应用层（Application Layer）：对应于OSI模型的会话层、表示层和应用层，提供网络服务和应用程序之间的接口。</li></ul></li><li><p>请说明TCP协议和UDP协议的区别</p><ul><li>可靠性：TCP协议提供可靠的数据传输，确保数据的完整性和顺序性，而UDP协议不提供可靠性保证，数据传输可能丢失或乱序。</li><li>连接性：TCP协议是面向连接的协议，需要在通信之前建立连接，而UDP协议是无连接的，不需要建立连接就可以直接发送数据。</li><li>传输效率：由于TCP协议提供了可靠性保证和流量控制机制，它的传输效率相对较低；而UDP协议没有这些机制，传输效率较高。</li><li>应用场景：TCP协议适用于对数据可靠性要求较高的应用，如文件传输、网页访问等；UDP协议适用于实时性要求较高的应用，如音频和视频传输、游戏通信等。</li></ul></li><li><p>请简述TCP协议三次握手，四次挥手在做什么？</p><ul><li>TCP协议的三次握手用于建立连接，四次挥手用于关闭连接：</li><li>三次握手：第一次握手，客户端向服务器发送连接请求；第二次握手，服务器收到请求后回复确认；第三次握手，客户端收到确认后再次回复确认。通过这三次握手，建立了客户端和服务器之间的连接。</li><li>四次挥手：第一次挥手，客户端向服务器发送关闭连接请求；第二次挥手，服务器收到请求后回复确认，并停止接收数据；第三次挥手，服务器向客户端发送关闭连接请求；第四次挥手，客户端收到请求后回复确认，并关闭连接。通过这四次挥手，完成了客户端和服务器之间的连接关闭。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>CSharp</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ILRuntime</title>
    <link href="/2023/10/04/IL/ILRuntime/"/>
    <url>/2023/10/04/IL/ILRuntime/</url>
    
    <content type="html"><![CDATA[<h1 id="ILRuntime"><a href="#ILRuntime" class="headerlink" title="ILRuntime"></a><code>ILRuntime</code></h1><p><code>ILRuntime</code> 是一个基于 Unity 的 C# 脚本解释器和运行时库，它可以实现在游戏运行时动态加载和执行 C# 代码。基本原理就是通过Mono.cecil库，去解释热更代码中的DLL包</p><h3 id="特殊的热更新工程"><a href="#特殊的热更新工程" class="headerlink" title="特殊的热更新工程"></a>特殊的热更新工程</h3><p>在使用<code>ILRuntime</code>进行热更新时，通常会创建两个工程：</p><ol><li>主工程（Main Project）：主工程是一个Unity项目，包含了游戏的基础框架、资源和静态代码。主工程负责加载和管理热更新的DLL文件，并提供接口供热更新DLL调用。</li><li>热更新工程（Hotfix Project）：热更新工程是一个独立的C#项目，使用<code>ILRuntime</code>进行开发。在热更新工程中，开发者可以编写游戏的逻辑代码，这些代码会<strong>被编译为DLL文件。热更新工程生成的DLL文件可以被主工程动态加载和执行。 在生成热更新工程后Dll包会自动放到<code>StreamingAssets</code> 文件夹内 最终会生成一个DLL文件和Pdb文件</strong></li><li>在热更新过程中，主工程会在游戏启动时加载热更新工程生成的DLL文件，并通过反射机制调用其中的方法和属性。这样，当需要更新游戏逻辑时，只需要替换热更新工程生成的DLL文件，而无需重新编译和发布整个游戏</li></ol><p>所以<code>ILRuntime</code>的开发方式变成了两个部分</p><ul><li>直接在Unity进行非热更新部分的开发</li><li>在热更新工程中进行热更新的开发 我们需要在两个工程内切换开发 两个工程可以相互访问调用</li></ul><p>这些叫做<em><strong>跨域访问</strong></em>  就比如 在Unity‘工程内使用热更工程声明的内容(类 委托 函数等)</p><p>热更工程使用Unity工程中声明的内容</p><h3 id="Unity跨域调用ILRuntime"><a href="#Unity跨域调用ILRuntime" class="headerlink" title="Unity跨域调用ILRuntime"></a>Unity跨域调用<code>ILRuntime</code></h3><h4 id="在Unity中跨域调用ILRuntime中的类"><a href="#在Unity中跨域调用ILRuntime中的类" class="headerlink" title="在Unity中跨域调用ILRuntime中的类"></a>在Unity中跨域调用<code>ILRuntime</code>中的类</h4><p>需要让ILRuntime重新生成最新的dll和pdb文件</p><img src="/2023/10/04/IL/ILRuntime/image-20231004160419860.png" class="" title="image-20231004160419860"><ul><li>方式一：appdomain中的Instantiate方法  参数一： 类的命名空间.类名 参数二： 参数列表</li><li><strong>方式二:<code>appdomain</code>中<code>LoadedTypes</code>字典获取<code>IType</code>类型后，强转为<code>ILType</code>后调用<code>Instantiate</code>方法该方式类似反射</strong></li><li>方式三通过方式二中得到的IType对象，再去得到它的构造函数进行实例化该方式类似反射</li><li><strong>更推荐方式2，因为之后在调用对象方法变量时，通过方式2更方便</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 在加载完成后执行热更新逻辑</span><br><br>ILRuntime.Runtime.Enviorment.AppDomain appDomain = ILRunTimeManager.Instance.AppDomain;<br><span class="hljs-comment">// 方法一：使用appdomain中的Instantiate方法</span><br><span class="hljs-comment">//      参数一：类的命名空间.类名</span><br><span class="hljs-comment">//      参数二：参数列表</span><br><span class="hljs-built_in">object</span> obj = appDomain.Instantiate(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>);<br>print(obj);<br>obj = appDomain.Instantiate(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;我是参数&quot;</span> &#125;);<br>print(obj);<br><br><span class="hljs-comment">// 方法二：通过appdomain中LoadedTypes字典获取IType类型，然后将其强制转换为ILType，再调用Instantiate方法</span><br><span class="hljs-comment">//      该方法类似于反射</span><br>IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>obj = ((ILType)type).Instantiate();<br>print(obj);<br>obj = ((ILType)type).Instantiate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;我是参数2&quot;</span> &#125;);<br>print(obj);<br><br><span class="hljs-comment">// 方法三：通过方法二获取的IType对象，再获取其构造函数进行实例化</span><br><span class="hljs-comment">//      该方法类似于反射</span><br>IType type2 = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>ConstructorInfo info = type2.ReflectionType.GetConstructor(<span class="hljs-keyword">new</span> Type[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 无参构造函数</span><br>obj = info.Invoke(<span class="hljs-literal">null</span>);<br>print(obj);<br>ConstructorInfo info2 = type2.ReflectionType.GetConstructor(<span class="hljs-keyword">new</span> Type[] &#123; <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>) &#125;); <span class="hljs-comment">// 有参构造函数</span><br>obj = info2.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;1111&quot;</span> &#125;);<br>print(obj);<br></code></pre></td></tr></table></figure><h4 id="在Unity中跨域调用ILRuntime中的成员属性"><a href="#在Unity中跨域调用ILRuntime中的成员属性" class="headerlink" title="在Unity中跨域调用ILRuntime中的成员属性"></a>在Unity中跨域调用<code>ILRuntime</code>中的成员属性</h4><p><code>ILRuntime</code>中并没有提供让Unity直接获取或修改成员变量的方案，我们只能通过在<code>ILRuntime</code>中封装属性的形式来达到目的。</p><ul><li>获取方法信息 通过<code>IType</code>中的<code>GetMethod</code>方法，类似反射一样的获取对应类中的方法</li><li>通过<code>appdomain.Invoke</code>（方法名，调用对象，参数）调用</li><li>或者通过更节约性能的无<code>GC Alloc</code>（调用完后直接回收）方式调用</li><li><strong>其中虽然方式二写起来复杂，但是更加节约性能，推荐使用，可以尝试进行封装</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br><span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;234&quot;</span> &#125;);<br><br><span class="hljs-comment">// ILRuntime中并没有提供让Unity直接获取或修改成员变量的方案</span><br><span class="hljs-comment">// 我们只能通过在ILRuntime中封装属性的形式来达到目的</span><br><br><span class="hljs-comment">// 1.获取方法信息</span><br><span class="hljs-comment">//   通过IType中的GetMethod方法，类似反射一样的获取对应类中的方法</span><br><span class="hljs-comment">//   规则：get_属性名 为对应属性获取</span><br><span class="hljs-comment">//         set_属性名 为对应属性的赋值</span><br>IMethod getStr = type.GetMethod(<span class="hljs-string">&quot;get_Str&quot;</span>, <span class="hljs-number">0</span>);<br>IMethod setStr = type.GetMethod(<span class="hljs-string">&quot;set_Str&quot;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 参数set是要传入值</span><br><br><span class="hljs-comment">// 2.调用方法</span><br><span class="hljs-comment">//   有两种方式</span><br><span class="hljs-comment">//   2-1:通过appdomain.Invoke(方法名, 调用对象, 参数)调用</span><br><span class="hljs-comment">// 去获取属性</span><br><span class="hljs-built_in">string</span> str = appDomain.Invoke(getStr, obj, <span class="hljs-literal">null</span>).ToString();<br>print(str);<br><span class="hljs-comment">// 去修改属性</span><br>appDomain.Invoke(setStr, obj, <span class="hljs-string">&quot;我是修改后的值&quot;</span>);<br>str = appDomain.Invoke(getStr, obj).ToString(); <span class="hljs-comment">// 设置完后再次获取，看看是否修改成功</span><br>print(str);<br><br><span class="hljs-comment">//   2-2:通过更节约性能的无GC Alloc（调用完后直接回收）方式调用</span><br><span class="hljs-comment">//     using (var method = appDomain.BeginInvoke(方法名))</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//           method.PushObject(执行该方法的对象);//传入执行该方法的对象</span><br><span class="hljs-comment">//           method.Push.....(1000);//传入指定类型参数</span><br><span class="hljs-comment">//           method.Invoke();//执行方法</span><br><span class="hljs-comment">//           method.Read....()//获取指定类型返回值</span><br><span class="hljs-comment">//     &#125;</span><br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(getStr))<br>&#123;<br>    <span class="hljs-comment">// 这种方式更推荐</span><br>    method.PushObject(obj);<br>    method.Invoke();<br>    str = method.ReadValueType&lt;<span class="hljs-built_in">string</span>&gt;();<br>    print(str + <span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Set 要先设置值，然后装入</span><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(setStr))<br>&#123;<br>    method.PushObject(obj);<br>    <span class="hljs-built_in">string</span> temp = <span class="hljs-string">&quot;我是再次修改后的值&quot;</span>;<br>    method.PushValueType(<span class="hljs-keyword">ref</span> temp);<br>    method.Invoke();<br>&#125;<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(getStr))<br>&#123;<br>    <span class="hljs-comment">// 这种方式更推荐</span><br>    method.PushObject(obj);<br>    method.Invoke();<br>    str = method.ReadValueType&lt;<span class="hljs-built_in">string</span>&gt;();<br>    print(str);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/10/04/IL/ILRuntime/image-20231004160447871.png" class="" title="image-20231004160447871"><h4 id="在Unity中跨域调用ILRuntime中的静态方法"><a href="#在Unity中跨域调用ILRuntime中的静态方法" class="headerlink" title="在Unity中跨域调用ILRuntime中的静态方法"></a>在Unity中跨域调用<code>ILRuntime</code>中的静态方法</h4><p>静态方法调用的规则和成员属性方法调用规则基本类似</p><ul><li>使用<code>appdomain.Invoke</code>(“命名空间.类名”, “静态方法名”, null, 参数列表)来调用静态方法。</li><li>使用<code>appdomain.Invoke</code>(IMethod对象, null, 参数列表)来调用静态方法。</li><li>使用无GC Alloc方式，使用using BeginInvoke push Invoke read -&gt; ubpir方式来调用静态方法。</li></ul><img src="/2023/10/04/IL/ILRuntime/image-20231004160502363.png" class="" title="image-20231004160502363"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br><span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br><span class="hljs-comment">// 静态方法调用有两种方式</span><br><span class="hljs-comment">// 1. 直接通过appdomain.Invoke(&quot;命名空间.类名&quot;, &quot;静态方法名&quot;, null, 参数列表) 调用静态方法</span><br>appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">var</span> invoke = appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun2&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>);<br>print(invoke); <span class="hljs-comment">// 有参数有返回值</span><br><br><span class="hljs-comment">// 2. 通过类似反射的IMethod调用方法</span><br><span class="hljs-comment">// 通过IType中的GetMethod方法，类似反射一样的获取对应类中的方法</span><br><span class="hljs-comment">// 两者方式的统一找方法名方式</span><br>IMethod method = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">0</span>);<br>IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun2&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 2-1. 通过appdomain.Invoke（IMethod对象, null, 参数列表）</span><br><span class="hljs-comment">// 获取对应类的IType</span><br>appDomain.Invoke(method, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">var</span> o = appDomain.Invoke(method2, <span class="hljs-literal">null</span>, <span class="hljs-number">110</span>);<br>print(o);<br><br><span class="hljs-comment">// 2-2. 通过更节约性能的无GC Alloc方式（调用完后直接回收）调用，类似上节课的成员属性</span><br><span class="hljs-comment">// using (var method = appDomain.BeginInvoke(methodName))</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     method.Push.....(1000); // 传入指定类型参数</span><br><span class="hljs-comment">//     method.Invoke(); // 执行方法</span><br><span class="hljs-comment">//     method.Read....() // 获取指定类型返回值</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method3 = appDomain.BeginInvoke(method))<br>&#123;<br>    method3.Invoke();<br>&#125;<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method4 = appDomain.BeginInvoke(method2))<br>&#123;<br>    method4.PushInteger(<span class="hljs-number">1000</span>);<br>    method4.Invoke();<br>    <span class="hljs-keyword">var</span> i = method4.ReadInteger();<br>    print(i);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在Unity中跨域调用ILRuntime中的成员方法"><a href="#在Unity中跨域调用ILRuntime中的成员方法" class="headerlink" title="在Unity中跨域调用ILRuntime中的成员方法"></a>在Unity中跨域调用<code>ILRuntime</code>中的成员方法</h4><p>在Unity中跨域调用<code>ILRuntime</code>中的成员方法需要遵循以下步骤：</p><ol><li>获取方法信息：通过<code>IType</code>中的<code>GetMethod</code>方法，类似反射一样获取对应类中的方法。</li><li>调用方法：可以通过<code>appdomain.Invoke</code>方法或者更节约性能的无GC Alloc方式调用方法。</li><li>对于无GC Alloc方式调用方法，可以使用<code>using</code>语句块结构，通过<code>appDomain.BeginInvoke</code>、<code>method.PushObject</code>和<code>method.Invoke</code>等方法完成方法的调用。</li></ol><p><strong>成员方法调用和静态方法调用几乎一样</strong></p><p><strong>区别就是需要先创建对象，将对象传入之前为null的地方</strong></p><img src="/2023/10/04/IL/ILRuntime/image-20231004161247741.png" class="" title="image-20231004161247741"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br><span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br><span class="hljs-comment">// 成员方法调用和静态方法调用几乎一样</span><br><span class="hljs-comment">// 区别就是需要先创建对象，将对象传入之前为null的地方</span><br><span class="hljs-comment">// 1. 直接通过appdomain.Invoke(&quot;命名空间.类名&quot;, &quot;方法名&quot;, 类对象, 参数列表)</span><br>appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 成员方法要传实例对象</span><br><br><span class="hljs-built_in">int</span> i = (<span class="hljs-built_in">int</span>)appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun2&quot;</span>, obj, <span class="hljs-number">100</span>); <span class="hljs-comment">// 成员方法要传实例对象</span><br>print(i);<br><br><span class="hljs-comment">// 2. 通过类似反射的IMethod调用方法 两种调用方法</span><br>IMethod method1 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">0</span>);<br>IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun2&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 2-1. 通过appdomain.Invoke（IMethod对象, 类对象, 参数列表）</span><br>appDomain.Invoke(method1, obj);<br><span class="hljs-built_in">int</span> o = (<span class="hljs-built_in">int</span>)appDomain.Invoke(method2, obj, <span class="hljs-number">1000</span>);<br>print(o);<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(method1))<br>&#123;<br>    method.PushObject(obj);<br>    method.Invoke();<br>&#125;<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(method2))<br>&#123;<br>    method.PushObject(obj);<br>    method.PushInteger(<span class="hljs-number">10000</span>);<br>    method.Invoke();<br>    <span class="hljs-built_in">int</span> count = method.ReadInteger();<br>    print(count);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在Unity中跨域调用ILRuntime中的重载方法"><a href="#在Unity中跨域调用ILRuntime中的重载方法" class="headerlink" title="在Unity中跨域调用ILRuntime中的重载方法"></a>在Unity中跨域调用<code>ILRuntime</code>中的重载方法</h4><p>在Unity中跨域调用<code>ILRuntime</code>中的重载方法需要遵循以下步骤：</p><ol><li>获取方法信息：通过<code>IType</code>中的<code>GetMethod</code>方法，类似反射一样获取对应类中的方法。</li><li>调用方法：可以通过<code>appdomain.Invoke</code>方法或者更节约性能的无GC Alloc方式调用方法。</li><li>对于无GC Alloc方式调用方法，可以使用<code>using</code>语句块结构，通过<code>appDomain.BeginInvoke</code>、<code>method.PushObject</code>和<code>method.Invoke</code>等方法完成方法的调用。</li></ol><p>重载方法的调用和普通方法的调用类似，只需确保传递的参数类型和数量与目标方法的签名匹配即可。</p><p>同时我们也会发现对于重载方法有两种情况</p><p>参数数量不同 类型相同</p><p>参数数量相同 类型不同 对于类型不同我们需要其他的方法</p><ul><li>我们需要通过<code>GetMethod</code>方法来获取指定参数类型的函数</li><li>获取参数对应的<code>IType</code>类型，利用<code>appDomain</code>中的<code>GetType</code>方法 获取指定变量类型的<code>IType</code></li><li>放入参数列表中，将获取到的<code>IType</code>放入<code>List&lt;IType&gt;</code>中</li><li>-传入<code>GetMethod</code>中获取指定类型参数，使用<code>GetMethod</code>的另一个重载，传入指定类型获取方法信息</li></ul><img src="/2023/10/04/IL/ILRuntime/image-20231004161307514.png" class="" title="image-20231004161307514"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br><span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br><span class="hljs-comment">// 1.参数数量不同</span><br><span class="hljs-comment">// 1-1.通过appDomain.Invoke调用参数数量不同格式，传入参数即可自动分别</span><br>appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-literal">null</span>);<br>appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//对于参数数量相同 类型不同 的函数 这样调用会出现问题</span><br><span class="hljs-comment">//appDomain.Invoke(&quot;HotFix_Project.Learn.TestClass&quot;, &quot;TestFun&quot;, obj, 1.1f);</span><br><br><span class="hljs-comment">// 1-2.通过GetMethod的第二个参数来获取对应参数个数的函数</span><br>IMethod method1 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">0</span>);<br>IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">1</span>);<br>appDomain.Invoke(method1, obj);<br>appDomain.Invoke(method2, obj, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//appDomain.Invoke(method2,obj,1.1);</span><br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method3 = appDomain.BeginInvoke(method2))<br>&#123;<br>    method3.PushObject(obj);<br>    method3.PushInteger(<span class="hljs-number">6</span>);<br>    method3.Invoke();<br>&#125;<br><br><span class="hljs-comment">// 2.参数数量相同，类型不同，通过上面两种方式直接使用无法确定取出来的函数是谁</span><br><span class="hljs-comment">// 我们需要通过GetMethod方法来获取指定参数类型的函数</span><br><span class="hljs-comment">// 2.1-获取参数对应的IType类型，利用appDomain中的GetType方法 获取指定变量类型的IType</span><br><span class="hljs-comment">// 2.2-放入参数列表中，将获取到的IType放入List&lt;IType&gt;中</span><br><span class="hljs-comment">// 2.3-传入GetMethod中获取指定类型参数，使用GetMethod的另一个重载，传入指定类型获取方法信息</span><br>IType floatType = appDomain.GetType(<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">float</span>));<br>List&lt;IType&gt; list = <span class="hljs-keyword">new</span> List&lt;IType&gt;();<br>list.Add(floatType);<br>method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, list, <span class="hljs-literal">null</span>);<br>appDomain.Invoke(method2, obj, <span class="hljs-number">1.1f</span>);<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method4 = appDomain.BeginInvoke(method2))<br>&#123;<br>    method4.PushObject(obj);<br>    method4.PushFloat(<span class="hljs-number">11.1f</span>);<br>    method4.Invoke();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在Unity中跨域调用ILRuntime中的ref-out-方法调用"><a href="#在Unity中跨域调用ILRuntime中的ref-out-方法调用" class="headerlink" title="在Unity中跨域调用ILRuntime中的ref/out 方法调用"></a>在Unity中跨域调用<code>ILRuntime</code>中的<code>ref/out</code> 方法调用</h4><p>在Unity中跨域调用<code>ILRuntime</code>中的<code>ref/out</code>方法调用需要遵循以下步骤：</p><ul><li><p>需要通过IMethod方法调用 并且需要使用无GC Alloc方法调用</p></li><li><p>和其他函数不一样的地方 需要先压入ref或out参数的初始值</p></li><li><p>和其它函数调用写法一致 压入调用对象 压入各参数</p></li><li><p>ref和out因为在一开始就压入了值 在这里需要压入他们的索引位置</p></li><li><p>ref和out参数 压入参数引用索引值即可 从0开始</p></li><li><p>通过Read按顺序获取ref&#x2F;out参数的值 和返回值，返回值最后获取</p>  <img src="/2023/10/04/IL/ILRuntime/image-20231004161324331.png" class="" title="image-20231004161324331">  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br><span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><span class="hljs-comment">// 需要通过IMethod方法调用并且需要使用无GC Alloc方法调用</span><br><span class="hljs-comment">// 1.和其他函数不一样的地方需要先压入ref或out参数的初始值</span><br><span class="hljs-comment">// 2.和其他函数调用写法一致，压入调用对象，压入各参数</span><br><span class="hljs-comment">// 3.ref和out因为在一开始就压入了值，在这里需要压入他们的索引位置</span><br><span class="hljs-comment">// ref和out参数，压入参数引用索引值即可，从0开始</span><br><span class="hljs-comment">// 4.通过Read按顺序获取ref/out参数的值和返回值，返回值最后获取</span><br>IMethod methodName = type.GetMethod(<span class="hljs-string">&quot;TestFun3&quot;</span>, <span class="hljs-number">3</span>);<br>List&lt;<span class="hljs-built_in">int</span>&gt; list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;() &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br><br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(methodName))<br>&#123;<br>    method.PushObject(list); <span class="hljs-comment">// ref 需要在外部初始化</span><br>    method.PushObject(<span class="hljs-literal">null</span>); <span class="hljs-comment">// out 不需要在外部初始化</span><br>    method.PushObject(obj);<br>    method.PushInteger(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// ref和out的索引值，只算它们，从0开始</span><br>    method.PushReference(<span class="hljs-number">0</span>);<br>    method.PushReference(<span class="hljs-number">1</span>);<br><br>    method.Invoke();<br><br>    <span class="hljs-comment">// 获取ref和out参数的值</span><br>    List&lt;<span class="hljs-built_in">int</span>&gt; list2 = method.ReadObject&lt;List&lt;<span class="hljs-built_in">int</span>&gt;&gt;(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">float</span> f = method.ReadFloat(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 获取函数返回值</span><br>    <span class="hljs-built_in">float</span> returnValue = method.ReadFloat();<br><br>    print(<span class="hljs-string">&quot;ref参数的长度: &quot;</span> + list2.Count);<br>    print(<span class="hljs-string">&quot;out参数: &quot;</span> + f);<br>    print(<span class="hljs-string">&quot;返回值: &quot;</span> + returnValue);<br>&#125;<br></code></pre></td></tr></table></figure><p>  在调用时多了三个步骤</p><p>  需要先压入ref或out参数的初始值</p><p>  压入参数环节压入引用索引值</p><p>  通过Read按顺序获取ref、out参数，返回值最后获取</p></li></ul><h3 id="ILRuntime调用Unity"><a href="#ILRuntime调用Unity" class="headerlink" title="ILRuntime调用Unity"></a><code>ILRuntime</code>调用Unity</h3><p>我们在做有热更新功能的项目时，往往会有大量的逻辑是在热更工程中完成的。类似与<code>Xlua</code>中的热更新。所以我们会在热更工程中做主入口。</p><p>调用Unity工程相关的内容就像在Unity开发中使用样引用命名空间后，直接使用即可，之所以我们能够直接使用，是因为热更工程已经引用了Unity对应的<code>Dll</code>文件</p><p>注意：</p><p>测试热更工程中 只关联引用了部分Unity相关<code>dll</code></p><p>如果想要使用更多，只需要把对应Unity的Dll文件拷贝到热更工程中的<code>**UnityDlls**</code>文件夹中即可</p><p>首先我们需要找到Unity对应的DLL文件 一般在</p><blockquote><p>X:\XXX\UnityEngine\Unity版本\Editor\Data\Managed\UnityEngine\</p></blockquote><p>这个路径之下，例如，我在热更工程里加上一个Unity物理系统 <code>UnityEngine.PhysicsModule.dll</code> 就需要这个dll<code>文件</code> 添加到热更工程的<code>UnityDlls</code>文件夹之后，就需要在程序集中添加引用</p><img src="/2023/10/04/IL/ILRuntime/image-20231004161451982.png" class="" title="image-20231004161451982"><p>ILRuntime与Unity通讯</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILRuntimeMain</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 把逻辑处理权交给热更工程</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 主入口函数</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            GameObject obj = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">&quot;ILRunTime创建的空物体&quot;</span>);<br>            obj.transform.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>            Debug.Log(obj.transform.position);<br>            Rigidbody rig = obj.AddComponent&lt;Rigidbody&gt;();<br>            rig.mass = <span class="hljs-number">999</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><img src="/2023/10/04/IL/ILRuntime/image-20231004161512545.png" class="" title="image-20231004161512545"><img src="/2023/10/04/IL/ILRuntime/image-20231004161529394.png" class="" title="image-20231004161529394"><p>可以看见，都设置成功了</p><h3 id="更多跨域调用"><a href="#更多跨域调用" class="headerlink" title="更多跨域调用"></a>更多跨域调用</h3><h4 id="委托调用"><a href="#委托调用" class="headerlink" title="委托调用"></a>委托调用</h4><p>在Unity中自定义委托后使用</p><ul><li>1.<code>ILRuntime</code>中委托成员 关联<code>ILRuntime</code>工程中函数直接常规使用即可 不会出现报错</li><li>2.Unity中委托成员 关联<code>ILRuntime</code>工程中函数直接关联会出现报错，这里就涉及到委托成员的跨域 相当于Unity中的委托成员中存储了<code>ILRuntime</code>工程中的函数 就存在了跨域调用</li><li>我们需要进行以下处理：可以通过报错信息中的提示 在进行初始化时进行代码的添加主要有两部分：</li><li>1.注册委托(主要目的，避免<code>IL2CPP</code>打包裁剪报错)</li><li>2.注册委托转换器（主要目的，<code>ILRuntime</code>内部所有的委托都是以Action或Fun来存储的）自己定义的委托需要转换成Action或Fun</li><li>注意：</li><li>1.委托的注册相关流程必须在主工程中完成，在<code>ILRuntime</code>中没用</li><li>2.为了避免添加自定义委托转换器我们在使用委托时 尽量使用System命名空间中的  Action和Fun 这样就不需要进行注册委托转换器了，只需要注册即可</li></ul><p>在<code>ILRuntime</code>中自定义委托后使用</p><ul><li>1.<code>ILRuntime</code>中委托成员 关联<code>ILRuntime</code>工程中函数</li><li>2.Unity中委托成员 关联<code>ILRuntime</code>工程中函数</li><li>一般不会出现基础工程中 使用还无法预知的可变代码</li><li>所以我们不需要考虑这种情况</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs csharp">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MyUnityDel1</span>()</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MyUnityDel2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span>;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>: <span class="hljs-title">MonoBehaviour</span><br>  &#123;<br>      <span class="hljs-keyword">public</span> MyUnityDel1 fun1;<br>      <span class="hljs-keyword">public</span> MyUnityDel2 fun2;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MyILDel1</span>()</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MyILDel2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span>;<br>  <br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILRuntimeMain</span><br>  &#123;<br>      <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>      <span class="hljs-comment"><span class="hljs-doctag">///</span> 把逻辑处理权交给热更工程</span><br>      <span class="hljs-comment"><span class="hljs-doctag">///</span> 主入口函数</span><br>      <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>      &#123;<br>          <span class="hljs-comment">//在ILRuntime中声明委托成员 关联Unity工程中的函数</span><br>          MyUnityDel1 fun = Fun1;<br>          fun();<br>          MyUnityDel2 fun2 = Fun2;<br>          <span class="hljs-built_in">int</span> result = fun2(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>);<br>          Debug.Log(result);<br>          <br>          <span class="hljs-comment">//在Unity中声明委托成员 关联IL工程中的函数</span><br>          ILRuntimeCallUnity ilcu = GameObject.Find(<span class="hljs-string">&quot;ILRuntimeCallUnity&quot;</span>).GetComponent&lt;ILRuntimeCallUnity&gt;();<br>          ilcu.fun1 = Fun1; <span class="hljs-comment">//关联</span><br>          ilcu.fun1(); <span class="hljs-comment">//调用</span><br>          ilcu.fun2 = Fun2;<br>          result = ilcu.fun2(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>);<br>          Debug.Log(result);<br><br>          <span class="hljs-comment">//使用Action和Func 这种委托就不需要进行注册委托和转换器了</span><br>          ilcu.FunAction = Fun1;<br>          ilcu.FunAction();<br>          ilcu.Func = Fun2;<br>          result =ilcu.Func(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>          Debug.Log(result);<br>          <br>          <span class="hljs-comment">//IL的委托 直接用就行 不需要注册</span><br><br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun1</span>()</span><br>      &#123;<br>          Debug.Log(<span class="hljs-string">&quot;IL_Fun1&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Fun2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span><br>      &#123;<br>          Debug.Log(<span class="hljs-string">&quot;Il_Fun2&quot;</span>);<br>          <span class="hljs-keyword">return</span> a + b;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们注册就得去注册委托和*<code>委托转换器</code> 一般都是在初始化操作中 对委托进行注册*</p><img src="/2023/10/04/IL/ILRuntime/image-20231004161559951.png" class="" title="image-20231004161559951"><img src="/2023/10/04/IL/ILRuntime/image-20231004161614002.png" class="" title="image-20231004161614002"><h4 id="跨域继承类"><a href="#跨域继承类" class="headerlink" title="跨域继承类"></a>跨域继承类</h4><p>建议： 最好不要跨域去继承类</p><p><code>ILRuntime</code>支持在热更工程中继承Unity主工程中的类  这就是跨域继承</p><p>注意：</p><p><code>ILRuntime</code>中的跨域继承主要指热更工程继承Unity工程中的类</p><p>不存在Unity继承<code>ILRuntime</code>中的类一说</p><p>只需要记住，一般都是可变的（热更工程）使用不变的（Unity工程）内容</p><p><strong>跨域继承基本原理：</strong></p><p>ILRuntime中的跨域继承实际上并不是直接继承Unity中的基类</p><p>而是继承的适配器类</p><p>基类（Unity中）</p><p>|</p><p>适配器类（Unity工程中的实际类型）</p><p>|</p><p>子类（ILRuntime中）</p><p>例如，如果我在Unity工程内声明一个接口，跨域继承之后 这个接口就被适配器变为类了就相当于跨越继承了两个类，这是C#所不允许的</p><p><strong>注意事项</strong>：</p><p>1.跨域继承时，不支持多继承，即同时继承类和接口</p><p>2.<strong>如果项目框架设计中一定要出现多继承  那么在跨域继承时可以在主工程中声明一个多继承的基类用于跨域继承 意思就是 声明一个基础类 ，让这个基础类继承接口和要继承的那个类，再将它作为被跨域继承的那个类 ，去让适配器创建该类的适配器类。</strong></p><p>3.跨域继承中，<strong>不能在基类的构造函数中调用该类的虚函数 会报错</strong></p><p><strong>如何进行跨域继承</strong></p><p>1.在Untiy工程中实现基类</p><p>2.在ILRuntime工程中继承基类</p><p>3.通过工具生成跨域继承适配器</p><blockquote><p>ILRuntime\Assets\Samples\ILRuntime\2.1.0\Demo\Editor\ILRuntimeCrossBinding.cs</p></blockquote><p>其中生成跨域继承适配器 只需要找到这个脚本 然后根据模版修改内容 一般是<strong>适配器生成的文件路径</strong> 方法里的<strong>类名</strong> 和<strong>创建类的命名空间</strong></p><p>4.在初始化时，注册跨域继承适配器对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">appDomain.RegisterCrossBindingAdaptor(<span class="hljs-keyword">new</span> <span class="hljs-type"></span>适配器类名());<br></code></pre></td></tr></table></figure><p>例子：</p><p>我们首先来写一个测试类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs csharp">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 跨域调用类</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILClass</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> valuePublic;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> valueProtected;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> ValuePro<br>        &#123;<br>            <span class="hljs-keyword">get</span>;<br>            <span class="hljs-keyword">set</span>;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>(<span class="hljs-params"> <span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;TestFun 成员方法&quot;</span>+str);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestAvstract</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span>;<br>    &#125;<br><br><span class="hljs-comment">// 热更工程中 实现 Unity工程的这个类</span><br>ILClassU i = <span class="hljs-keyword">new</span> ILClassU();<br>            i.TestFun(<span class="hljs-string">&quot;Heart&quot;</span>);<br>            i.TestAvstract(<span class="hljs-number">100</span>);<br>            i.valuePublic = <span class="hljs-number">1000</span>;<br>     <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 继承来自Unity工程的类</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILClassU</span> : <span class="hljs-title">ILClass</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> ValuePro<br>        &#123;<br>            <span class="hljs-keyword">get</span> =&gt; valueProtected;<br>            <span class="hljs-keyword">set</span> =&gt; valueProtected = <span class="hljs-keyword">value</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.TestFun(str);<br>            Debug.Log(<span class="hljs-string">&quot;ILClassU TestFun 成员方法&quot;</span> + str);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestAvstract</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;TestAvstract 成员方法&quot;</span> + i);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><img src="/2023/10/04/IL/ILRuntime/image-20231004161709727.png" class="" title="image-20231004161709727"><h4 id="CLR重定向和CLR绑定"><a href="#CLR重定向和CLR绑定" class="headerlink" title="CLR重定向和CLR绑定"></a>CLR重定向和CLR绑定</h4><p>CLR（公共语言运行时 Common Language Runtime）它提供了内存管理、垃圾回收、安全性和代码访问控制等功能，它帮助我们实现跨平台和跨语言</p><p>CLR重定向（CLR Redirection）是一种机制，允许将程序集的引用从一个版本重定向到另一个版本。我们可以通过CLR重定向，将<strong>某一个方法的执行</strong>定位到我们的<strong>自定义逻辑中</strong>，而不是执行原本的方法逻辑   有点类似重写</p><p>CLR绑定（CLR Binding）是指在运行时将程序集和类型加载到应用程序的过程。CLR会根据程序的需求来查找和加载程序集，并将其加载到应用程序域中以供使用。</p><p><strong>默认情况下</strong>，ILRuntime热更工程调用Unity主工程相关内容都会通过反射来调用</p><p>这样有2个缺点：</p><ul><li>1.性能较低，反射调用比直接调用效率低</li><li>2.IL2CPP打包时容易被裁剪</li></ul><p>因此ILRuntime提供了自动分析生成CLR绑定的工具</p><p><strong>为什么要进行 CLR绑定</strong></p><p>它的作用是：</p><ul><li>1**.可以提高性能，将反射调用变为了直接调用**</li><li>2**.避免IL2CPP裁剪有用内容**</li></ul><p>原理：</p><p>CLR绑定，就是借助了ILRuntime的CLR重定向机制来实现的</p><p>本质上就是将方法的反射调用重定向到了我们自定义的方法里面来</p><p>注意：</p><p><strong>每次我们打包发布工程之前都要记得生成CLR绑定</strong></p><p><strong>如何进行CLR绑定</strong></p><ul><li><ol><li>打开 Samples\ILRuntime\2.1.0\Demo\Editor`ILRuntimeCLRBinding<code>.cs 代码 在 </code>InitILRuntime&#96; 函数中注册跨域继承相关的类 以及 其他内容（以后会讲解）</li></ol></li><li><ol><li>点击 工具栏——&gt;ILRuntime——&gt;通过自动分析热更DLL生成CLR绑定</li></ol></li></ul><p>此时就可以在<code>ILRuntimeCLRBinding.cs</code> 代码中设置的到处路径中看到生成的绑定代码</p><ol><li>在初始化处 添加：<code>ILRuntime.Runtime.Generated.CLRBindings.Initialize(appDomain);</code></li></ol><p>注意：</p><p>如果在CLR绑定注册前进行了CLR重定向相关设置   为了保证自定义的重定向能够正常使用初始化CLR绑定   一定要放在最后一步   这样就不会影响自己想要保留的重定向等初始化操作了</p><p>CLR生成的代码</p><img src="/2023/10/04/IL/ILRuntime/image-20231004161732218.png" class="" title="image-20231004161732218"><p>使用CLR之后的性能优化</p><img src="/2023/10/04/IL/ILRuntime/image-20231004161745689.png" class="" title="image-20231004161745689"><p>自定义CLR重定向是指在ILRuntime中重新定义CLR所需的类型和方法的映射关系。通过自定义CLR重定向，可以实现在热更新中使用不同于Unity环境下的类型和方法。</p><p>在ILRuntime中，可以通过自定义实现<code>ILRuntime.CLR.TypeRedirection.ILTypeRedirectionAttribute</code>和<code>ILRuntime.CLR.MethodRedirection.ILMethodRedirectionAttribute</code>来进行CLR重定向。通过这些属性，可以指定需要重定向的类型和方法，以及它们的替代实现。</p><p>自定义CLR重定向的步骤如下：</p><ol><li>创建自定义重定向类，实现<code>ILRuntime.CLR.TypeRedirection.ILTypeRedirection</code>或<code>ILRuntime.CLR.MethodRedirection.ILMethodRedirection</code>接口。</li><li>在自定义重定向类上使用<code>ILRuntime.CLR.TypeRedirection.ILTypeRedirectionAttribute</code>或<code>ILRuntime.CLR.MethodRedirection.ILMethodRedirectionAttribute</code>，并指定要重定向的类型或方法。</li><li>在ILRuntime的初始化代码中，调用<code>ILRuntime.Runtime.Enviorment.AppDomain.RegisterCLRRedirection</code>方法，注册自定义的CLR重定向类。</li></ol><p>通过自定义CLR重定向，可以实现在热更新中替换CLR的类型和方法，从而达到热更新逻辑与Unity环境解耦的目的。</p><p>CLR绑定就是利用CLR重定向将原本需要反射调用的内容变为直接调用  可以帮助我们</p><ul><li>1.提升ILRuntime的性能</li><li>2.避免IL2CPP打包时裁剪我们需要用的内容</li></ul><h4 id="值类型绑定"><a href="#值类型绑定" class="headerlink" title="值类型绑定"></a>值类型绑定</h4><p>ILRuntime支持将值类型绑定到引擎的值类型，以实现在热更工程中使用引擎值类型的功能。</p><p>就是把Unity当中的一些常用值类型方法进行CLR绑定，可以大幅度提升热更新工程的效率</p><p>值类型绑定的步骤如下：</p><ol><li>创建值类型绑定类，在该类中实现值类型的转换逻辑。</li><li>注册值类型绑定 <code>appDomain.RegisterValueTypeBinder(typeof(值类型),new 绑定类());</code></li><li>在CLR绑定脚本中注册，在加载dll和pdb后注册</li></ol><p>值类型绑定的作用是为了在热更工程中使用引擎的值类型，例如Vector3、Quaternion等。通过值类型绑定，我们可以直接在热更工程中使用这些值类型，而无需使用引擎提供的其他替代方案。</p><p>在<code>ILRuntimeCLRBinding</code> 文件添加值类型绑定代码 在<strong>初始化</strong>的时候一样添加</p><p>可以优化性能</p><h4 id="MonoBehaviour"><a href="#MonoBehaviour" class="headerlink" title="MonoBehaviour"></a><code>MonoBehaviour</code></h4><ul><li>ILRuntime中支持在热更工程中跨域继承MonoBehaviour</li><li>注册跨域继承适配器</li><li>对泛型方法AddComponent进行重定向（较为复杂）</li><li>推荐大家类似Lua中一样使用MonoBehaviour</li><li>在主工程中通过委托或事件的形式派发生命周期函数 到 热更中</li><li>主要原因：MonoBehaviour是一个很特殊的类，很多底层逻辑是在C++中处理的</li><li>比如其中public字段的序列化，在Inspector窗口中显示的功能  如果在热更工程中去写，底层C++逻辑无法获取到热更工程中C#相关的信息</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILRuntimeMono</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action startEvent;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action updateEvent;<br><br>        <span class="hljs-comment">//特殊的函数  Awake</span><br>        <span class="hljs-comment">//在ILRuntime中，MonoBehaviour的Awake函数是不会被调用的 因为Awake的执行时机很快</span><br>        <span class="hljs-comment">//在脚本添加的时候就会自动执行 所以不能使用事件分发的方式进行调用</span><br>        <span class="hljs-comment">//我们可以在脚本添加的时候 添加相关逻辑就可以 无需模拟</span><br>        <br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            startEvent?.Invoke();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>        &#123;<br>            updateEvent?.Invoke();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><img src="/2023/10/04/IL/ILRuntime/image-20231004161808874.png" class="" title="image-20231004161808874"><h4 id="协程和异步函数"><a href="#协程和异步函数" class="headerlink" title="协程和异步函数"></a>协程和异步函数</h4><p>我们只需要在<strong>初始化</strong><code>InitILRuntime</code>中注册协同程序的跨域继承适配器就能使用协同程序了</p><p>同步协程的适配器我们可以在示例工程中获取<code>CoroutineAdapter</code></p><blockquote><p>异步我们可以使用网上的<a href="https://github.com/jumpst/jumpst.github.io/blob/abc112a1ad718910f39bdd34323ae2633551a650/">https://github.com/jumpst/jumpst.github.io/blob/abc112a1ad718910f39bdd34323ae2633551a650/</a></p></blockquote><img src="/2023/10/04/IL/ILRuntime/image-20231004161831292.png" class="" title="image-20231004161831292"><p>之所以需要注册跨域继承适配器</p><p>是因为在ILRuntime中的协同程序和异步函数</p><p>编译后本质上是通过状态机利用对象的状态来达到的异步</p><p>这里面的对象就用到了跨域继承</p><p>所以我们需要注册他们的跨域继承适配器来让热更新工程正常使用他们</p><h4 id="Unity反射调用ILRuntime"><a href="#Unity反射调用ILRuntime" class="headerlink" title="Unity反射调用ILRuntime"></a>Unity反射调用ILRuntime</h4><p>在热更工程中使用反射  按照反射的规则正常使用即可 和C#中反射没有任何区别</p><p>在主入口之后就使用</p><p>在Unity工程中利用反射获取热更工程中的内容</p><img src="/2023/10/04/IL/ILRuntime/image-20231004161936277.png" class="" title="image-20231004161936277"><img src="/2023/10/04/IL/ILRuntime/image-20231004161943482.png" class="" title="image-20231004161943482"><img src="/2023/10/04/IL/ILRuntime/image-20231004161949879.png" class="" title="image-20231004161949879"><h4 id="序列化库"><a href="#序列化库" class="headerlink" title="序列化库"></a>序列化库</h4><p>常见的序列化库有以下几种：</p><ul><li><code>Json.NET</code>: 一个流行的高性能JSON框架，支持.NET平台和多种编程语言。</li><li><code>Protocol Buffers</code>: 由Google开发的二进制序列化格式，具有高效的编解码速度和紧凑的数据大小。</li><li><code>MessagePack</code>: 一种快速、小巧的二进制序列化格式，支持多种编程语言。</li><li><code>BinaryFormatter</code>: .NET框架自带的二进制序列化器，可以将对象序列化为二进制格式。</li><li><code>XmlSerializer</code>: .NET框架自带的XML序列化器，可以将对象序列化为XML格式。</li></ul><p>这些库都是存在于主工程中的 那么当使用他们序列化反序列化热更工程中的对象时 他们是不能识别的，所以就得在IL中使用序列化库 ListJson库在demo工程中就能获取</p><p>Protobuf库获取：<a href="https://gitee.com/cyecp/protobuf-net">下载地址</a></p><p>如何自己改相关库</p><p>1.正确创建热更类型的实例（利用之前反射相关的创建方式）</p><p>2.获取泛型容器类的真实热热更类型</p><p>3.序列化子对象</p><p>4.重定向泛型方法</p><p><strong>改写序列化库时，不能通过Activator来创建实例</strong></p><p>我使用ListJson，同样的一样需要在<strong>初始化</strong><code>InitILRuntime</code>的时候注册ListJson</p><img src="/2023/10/04/IL/ILRuntime/image-20231004162010373.png" class="" title="image-20231004162010373"><h3 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h3><p>调试ILRuntime 下载专门的调试工具 在初始化的位置<code>InitILRuntime</code>添加</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">AppDomain<span class="hljs-selector-class">.DebugService</span><span class="hljs-selector-class">.StartDebugService</span>(端口号)<br></code></pre></td></tr></table></figure><p>在热更工程的 调试页签中 选择 <strong>Attach to ILRuntime</strong> 即可开始断点调试</p><p>如果想要断点调试 得保证Unity工程或者项目已经启动才能附加调试</p><p>通过协同程序，等待调试器链接（否则我们无法对一开始的逻辑 进行断点）</p><p>判断调试器链接的API为 <strong><code>appDomain.DebugService.IsDebuggerAttached</code></strong></p><p>注意：</p><p>1.附加到ILRuntime后</p><p>弹出窗口中填写的内容为IP地址和端口号，意味着我们可以调试各种设备</p><p>只要保证IP地址和端口号正确即可</p><p>2.如果ILRuntime相关的dll和pdb文件没有加载成功，调试会失败</p><h3 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h3><h3 id="寄存器模式"><a href="#寄存器模式" class="headerlink" title="寄存器模式"></a>寄存器模式</h3><p>该模式通过ILRuntime自己的 编译器以及指令集(JIT Compiler) 将原始DLL的 微软中间语言(MSIL) 指令集转换成一个  自定义的基于寄存器的指令集，再进行解译执行</p><p>在ILRuntime中使用寄存器模式可以有效的提高性能，主要有以下特点</p><ol><li>数值计算性能会大幅提升，包括for循环等需要数值计算的控制流</li><li>属性的调用开销，for循环里调用其他热更内方法的性能会有所提升</li><li>注意：如果一个方法即没有数值计算，也没有频繁调用热更内的的方法或者访问属性，只是调用系统或UnityAPI，那么不会产生任何优化   甚至一些情况下性能还会低于传统模式</li></ol><p>开启寄存器，有两种方式</p><p><strong>全局开启</strong> 在启动IL时<code>StartILRunTime</code>  <strong>new</strong>的时候调用构造函数  有五种模式</p><img src="/2023/10/04/IL/ILRuntime/image-20231004162030018.png" class="" title="image-20231004162030018"><ol><li>None：不启用寄存器模式</li><li><code>JITOnDemand</code>:  如果要全局开启寄存器 那么模式一定是这个 按需即时编译(JIT)模式，使用该模式在默认的情况下会按照原始的方式运行，当该方法被反复执行时，会被标记为需要被JIT，并在后台线程完成JIT编译后切换到寄存器模式运行</li><li><code>JITImmediately</code>(全局开启时不推荐)：立即JIT模式，使用该模式时，当方法被调用的瞬间即会被执行JIT编译 在第一次执行时即使用寄存器模式运行。 JIT会在当前线程发生，因此如果方法过于复杂在第一次执行时可能会有较大的初始化时间</li><li><code>NoJIT</code>： 禁用JIT模式，该方法在执行时会始终以传统方式执行</li><li><code>ForceInline</code>(全局开启时不使用)：强制内联模式，该模式只对方法的Attribute生效， 标注该模式的方法在被调用时将会无视方法体内容大小，强制被内联</li></ol><p><strong>指定开启</strong></p><p>在指定的类和方式前加上特性 <code>[ILRuntimeJIT(寄存器模式)]</code> 自己指定哪些类和方法使用</p><p>注意：在热更工程中使用该特性，我们需要引用ILRuntime库</p><p>可以在项目工程文件中找到 <code>Library\\ScriptAssemblies\\ILRuntime.dll</code> 进行引用（将复制本地设置为false，避免生成时导出）</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h3 id="相关代码-相关初始化"><a href="#相关代码-相关初始化" class="headerlink" title="相关代码  相关初始化"></a>相关代码  相关初始化</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ILRunTimeManager</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ILRunTimeManager _instance;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ILRunTimeManager Instance<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (_instance == <span class="hljs-literal">null</span>)<br>                &#123;<br>                    <span class="hljs-comment">//这样就是一个长久存在的单例了</span><br>                    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">&quot;ILRunTimeManager&quot;</span>);<br>                    _instance = obj.AddComponent&lt;ILRunTimeManager&gt;();<br>                    DontDestroyOnLoad(obj);<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> _instance;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> AppDomain AppDomain;<br>        <span class="hljs-keyword">private</span> MemoryStream _dllStream;<br>        <span class="hljs-keyword">private</span> MemoryStream _pdbStream;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _isStart = <span class="hljs-literal">false</span>; <span class="hljs-comment">//是否启动了ILRunTime 避免重复启动</span><br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 启动ILRunTime</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartILRunTime</span>(<span class="hljs-params">UnityAction callBack = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_isStart)<br>            &#123;<br>                _isStart = <span class="hljs-literal">true</span>;<br>                AppDomain = <span class="hljs-keyword">new</span> AppDomain();<br>                <span class="hljs-comment">//寄存器模式</span><br>                <span class="hljs-comment">//AppDomain = new AppDomain(ILRuntimeJITFlags.JITOnDemand);</span><br>                StartCoroutine(LoadHotUpdateInfo(callBack));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 初始化ILRuntime相关内容</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitILRuntime</span>()</span><br>        &#123;<br><span class="hljs-comment">//如果想使用Unity自带的性能调试窗口 调试ILRuntime的内容 就需要加入该行代码</span><br>            AppDomain.UnityMainThreadID = Thread.CurrentThread.ManagedThreadId;<br><br>            <span class="hljs-comment">//其他的初始化操作</span><br>            <span class="hljs-comment">//委托转换器 注册(把自定义委托转为Action或者Func) 无参无返回值的委托就不需要注册委托 只需要注册转换器</span><br>            AppDomain.DelegateManager.RegisterDelegateConvertor&lt;Learn.MyUnityDel1&gt;((act) =&gt;<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Learn.MyUnityDel1(() =&gt; &#123; ((System.Action)act)(); &#125;);<br>            &#125;);<br>            <span class="hljs-comment">//委托注册</span><br>            AppDomain.DelegateManager.RegisterFunctionDelegate&lt;System.Int32, System.Int32, System.Int32&gt;();<br>            <span class="hljs-comment">//委托转换器 注册</span><br>            AppDomain.DelegateManager.RegisterDelegateConvertor&lt;Learn.MyUnityDel2&gt;((act) =&gt;<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Learn.MyUnityDel2((i, j) =&gt;<br>                &#123;<br>                    <span class="hljs-keyword">return</span> ((System.Func&lt;System.Int32, System.Int32, System.Int32&gt;)act)(i, j);<br>                &#125;);<br>            &#125;);<br><br>            <span class="hljs-comment">//注册跨域继承适配器</span><br>            AppDomain.RegisterCrossBindingAdaptor(<span class="hljs-keyword">new</span> ILClassAdapter());<br>            <span class="hljs-comment">//注册协同程序相关的 跨域继承适配器</span><br>            AppDomain.RegisterCrossBindingAdaptor(<span class="hljs-keyword">new</span> CoroutineAdapter());<br>            <span class="hljs-comment">//注册协同程序相关的 跨域继承适配器 异步</span><br>            AppDomain.RegisterCrossBindingAdaptor(<span class="hljs-keyword">new</span> IAsyncStateMachineClassInheritanceAdaptor());<br>            <br>            <span class="hljs-comment">//值类型绑定的注册</span><br>            AppDomain.RegisterValueTypeBinder(<span class="hljs-keyword">typeof</span>(Vector3), <span class="hljs-keyword">new</span> Vector3Binder());<br>            AppDomain.RegisterValueTypeBinder(<span class="hljs-keyword">typeof</span>(Vector2), <span class="hljs-keyword">new</span> Vector2Binder());<br>            AppDomain.RegisterValueTypeBinder(<span class="hljs-keyword">typeof</span>(Quaternion), <span class="hljs-keyword">new</span> QuaternionBinder());<br>            <br>            <span class="hljs-comment">//注册ListJson相关的</span><br>            LitJson.JsonMapper.RegisterILRuntimeCLRRedirection(AppDomain);<br>            <br><br>            <span class="hljs-comment">//CLR重定向内容 要写到CLR绑定之前</span><br>            System.Type debugType = <span class="hljs-keyword">typeof</span>(Debug);<br>            MethodInfo methodInfo = debugType.GetMethod(<span class="hljs-string">&quot;Log&quot;</span>, <span class="hljs-keyword">new</span> System.Type[] &#123; <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">object</span>) &#125;);<br>            <span class="hljs-comment">//进行CLR重定向 重定向到MyLog方法 获取到热更新的Debug行号信息 </span><br>            <span class="hljs-comment">//AppDomain.RegisterCLRMethodRedirection(methodInfo,MyLog);</span><br><br>            <span class="hljs-comment">//注册CLR绑定相关的信息</span><br>            ILRuntime.Runtime.Generated.CLRBindings.Initialize(AppDomain);<br>            <br>        &#125;<br>        <br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">unsafe</span> StackObject* MyLog(ILIntepreter __intp, StackObject* __esp, List&lt;<span class="hljs-built_in">object</span>&gt; __mStack, CLRMethod method, <span class="hljs-built_in">bool</span> isnewobj)<br>        &#123;<br>            ILRuntime.Runtime.Enviorment.AppDomain __domain = __intp.AppDomain;<br>            <span class="hljs-comment">//移动到栈底 用于之后返回</span><br>            StackObject* __ret = ILIntepreter.Minus(__esp, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//获取参数值</span><br>            StackObject* ptr_of_this_method;<br>            ptr_of_this_method = ILIntepreter.Minus(__esp, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//类型转换 将StackObject转换为Unity当中的类型</span><br>            System.Object @message = (System.Object)<span class="hljs-keyword">typeof</span>(System.Object).CheckCLRTypes(StackObject.ToObject(ptr_of_this_method, __domain, __mStack), (ILRuntime.CLR.Utils.Extensions.TypeFlags)<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//清理当前栈指针内存</span><br>            __intp.Free(ptr_of_this_method);<br>            <span class="hljs-comment">//获取对应的 行号等等相关信息</span><br>            <span class="hljs-keyword">var</span> stackTrace = __domain.DebugService.GetStackTrace(__intp);<br><br>            <span class="hljs-comment">//重定向相关逻辑代码</span><br>            UnityEngine.Debug.Log(@message + <span class="hljs-string">&quot;\\n&quot;</span> + stackTrace);<br><br>            <span class="hljs-comment">//返回</span><br>            <span class="hljs-keyword">return</span> __ret;<br>        &#125;<br>        <br>        <br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 启动完毕并且初始化完毕后 想要执行的热更新的逻辑</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ILRunTimeLoadOverDoSomthing</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StopILRunTime</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_dllStream != <span class="hljs-literal">null</span>)<br>                _dllStream.Close();<br>            <span class="hljs-keyword">if</span> (_pdbStream != <span class="hljs-literal">null</span>)<br>                _pdbStream.Close();<br>            _dllStream = <span class="hljs-literal">null</span>;<br>            _pdbStream = <span class="hljs-literal">null</span>;<br>            AppDomain = <span class="hljs-literal">null</span>;<br>            _isStart = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 加载热更DLL的配置文件</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function">IEnumerator <span class="hljs-title">LoadHotUpdateInfo</span>(<span class="hljs-params">UnityAction callBack = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_ANDROID</span><br>            <span class="hljs-keyword">var</span> reqDll = UnityWebRequest.Get(Application.streamingAssetsPath+ <span class="hljs-string">&quot;/HotFix_Project.dll&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>            UnityWebRequest reqDll =<br>                UnityWebRequest.Get(<span class="hljs-string">&quot;file:///&quot;</span> + Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.dll&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> reqDll.SendWebRequest();<br>            <span class="hljs-keyword">if</span> (reqDll.isNetworkError || reqDll.isHttpError)<br>            &#123;<br>                Debug.LogError(<span class="hljs-string">&quot;加载热更DLL失败&quot;</span> + reqDll.error);<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> dllBytes = reqDll.downloadHandler.data;<br>            reqDll.Dispose();<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_ANDROID</span><br>            <span class="hljs-keyword">var</span> reqPdb = UnityWebRequest.Get(Application.streamingAssetsPath+ <span class="hljs-string">&quot;/HotFix_Project.pdb&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>            <span class="hljs-keyword">var</span> reqPdb = UnityWebRequest.Get(<span class="hljs-string">&quot;file:///&quot;</span> + Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.pdb&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> reqPdb.SendWebRequest();<br>            <span class="hljs-keyword">if</span> (reqPdb.isNetworkError || reqPdb.isHttpError)<br>            &#123;<br>                Debug.LogError(<span class="hljs-string">&quot;加载热更Pdb失败&quot;</span> + reqPdb.error);<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> pdbBytes = reqPdb.downloadHandler.data;<br>            reqPdb.Dispose();<br><br>            _dllStream = <span class="hljs-keyword">new</span> MemoryStream(dllBytes);<br>            _pdbStream = <span class="hljs-keyword">new</span> MemoryStream(pdbBytes);<br><br>            <span class="hljs-comment">//PS:记得一个要加载 </span><br>            AppDomain.LoadAssembly(_dllStream, _pdbStream, <span class="hljs-keyword">new</span> PdbReaderProvider());<br><br>            InitILRuntime();<br>            ILRunTimeLoadOverDoSomthing();<br><br>            <span class="hljs-comment">//当ILRuntime初始化完毕 想要在外部执行的内容</span><br>            callBack?.Invoke();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>相关代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UnityCallILRunTime</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            ILRunTimeManager.Instance.StartILRunTime(() =&gt;<br>            &#123;<br>                <span class="hljs-comment">//这里面做的事情就是在加载完毕后执行的热更新的逻辑</span><br>                ILRuntime.Runtime.Enviorment.AppDomain appDomain = ILRunTimeManager.Instance.AppDomain;<br>                <span class="hljs-comment">//CallClass(appDomain);</span><br>                <span class="hljs-comment">//CallProp(appDomain);</span><br>                <span class="hljs-comment">//CallStatic(appDomain);</span><br>                <span class="hljs-comment">//CallMember(appDomain);</span><br>                <span class="hljs-comment">//CallOverMember(appDomain);</span><br>                CallRefOut(appDomain);<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallClass</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//方式一：appdomain中的Instantiate方法</span><br>            <span class="hljs-comment">//       参数一：类的命名空间.类名</span><br>            <span class="hljs-comment">//       参数二：参数列表</span><br>            <span class="hljs-built_in">object</span> obj = appDomain.Instantiate(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>);<br>            print(obj);<br>            obj = appDomain.Instantiate(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;我是参数&quot;</span> &#125;);<br>            print(obj);<br><br>            <span class="hljs-comment">//方式二：appdomain中LoadedTypes字典获取IType类型后，强转为ILType后调用Instantiate方法</span><br>            <span class="hljs-comment">//       该方式类似反射  更加推荐 在调用对象方法和变量时 更方便</span><br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            obj = ((ILType)type).Instantiate();<br>            print(obj);<br>            obj = ((ILType)type).Instantiate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;我是参数2&quot;</span> &#125;);<br>            print(obj);<br><br>            <span class="hljs-comment">//方式三：通过方式二中得到的IType对象，再去得到它的构造函数进行实例化</span><br>            <span class="hljs-comment">//       该方式类似反射</span><br>            IType type2 = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            ConstructorInfo info = type2.ReflectionType.GetConstructor(<span class="hljs-keyword">new</span> Type[<span class="hljs-number">0</span>]); <span class="hljs-comment">//无参构造函数</span><br>            obj = info.Invoke(<span class="hljs-literal">null</span>);<br>            print(obj);<br>            ConstructorInfo info2 = type2.ReflectionType.GetConstructor(<span class="hljs-keyword">new</span> Type[] &#123; <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>) &#125;); <span class="hljs-comment">//有参</span><br>            obj = info2.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;1111&quot;</span> &#125;);<br>            print(obj);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallProp</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            <span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;234&quot;</span> &#125;);<br><br>            <span class="hljs-comment">//ILRuntime中并没有提供让Unity直接获取或修改成员变量的方案</span><br>            <span class="hljs-comment">//我们只能通过在ILRuntime中封装属性的形式来达到目的</span><br><br>            <span class="hljs-comment">//1.获取方法信息</span><br>            <span class="hljs-comment">//  通过IType中的GetMethod方法，类似反射一样的获取对应类中的方法</span><br>            <span class="hljs-comment">//  规则：get_属性名 为对应属性获取</span><br>            <span class="hljs-comment">//        set_属性名 为对应属性的赋值</span><br>            IMethod getStr = type.GetMethod(<span class="hljs-string">&quot;get_Str&quot;</span>, <span class="hljs-number">0</span>);<br>            IMethod setStr = type.GetMethod(<span class="hljs-string">&quot;set_Str&quot;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//参数 set是要传入值 </span><br>            <span class="hljs-comment">//2.调用方法</span><br>            <span class="hljs-comment">//  有两种方式</span><br>            <span class="hljs-comment">//  2-1:通过appdomain.Invoke（方法名，调用对象，参数）调用</span><br>            <span class="hljs-comment">//去获取属性</span><br>            <span class="hljs-built_in">string</span> str = appDomain.Invoke(getStr, obj, <span class="hljs-literal">null</span>).ToString();<br>            print(str);<br>            <span class="hljs-comment">//去修改属性</span><br>            appDomain.Invoke(setStr, obj, <span class="hljs-string">&quot;我是修改后的值&quot;</span>);<br>            str = appDomain.Invoke(getStr, obj).ToString(); <span class="hljs-comment">//设置完后再次获取 看看是否修改成功</span><br>            print(str);<br><br>            <span class="hljs-comment">//  2-2:通过更节约性能的无GC Alloc（调用完后直接回收）方式调用</span><br>            <span class="hljs-comment">//    using (var method = appDomain.BeginInvoke(methodName))</span><br>            <span class="hljs-comment">//    &#123;</span><br>            <span class="hljs-comment">//          method.PushObject(obj);//传入执行该方法的对象</span><br>            <span class="hljs-comment">//          method.Push.....(1000);//传入指定类型参数</span><br>            <span class="hljs-comment">//          method.Invoke();//执行方法</span><br>            <span class="hljs-comment">//          method.Read....()//获取指定类型返回值</span><br>            <span class="hljs-comment">//    &#125;</span><br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(getStr))<br>            &#123;<br>                <span class="hljs-comment">//这种方式更推荐</span><br>                method.PushObject(obj);<br>                method.Invoke();<br>                str = method.ReadValueType&lt;<span class="hljs-built_in">string</span>&gt;();<br>                print(str + <span class="hljs-string">&quot;2&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//Set 要先设置值 然后装入</span><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(setStr))<br>            &#123;<br>                method.PushObject(obj);<br>                <span class="hljs-built_in">string</span> temp = <span class="hljs-string">&quot;我是再次修改后的值&quot;</span>;<br>                method.PushValueType(<span class="hljs-keyword">ref</span> temp);<br>                method.Invoke();<br>            &#125;<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(getStr))<br>            &#123;<br>                <span class="hljs-comment">//这种方式更推荐</span><br>                method.PushObject(obj);<br>                method.Invoke();<br>                str = method.ReadValueType&lt;<span class="hljs-built_in">string</span>&gt;();<br>                print(str);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallStatic</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            <span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br>            <span class="hljs-comment">//静态方法调用有两种方式</span><br>            <span class="hljs-comment">//1.直接通过appdomain.Invoke(&quot;命名空间.类名&quot;, &quot;静态方法名&quot;, null, 参数列表)</span><br>            <span class="hljs-comment">//  调用静态方法</span><br>            appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestStaticFun&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">var</span> invoke = appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestStaticFun2&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>);<br>            print(invoke); <span class="hljs-comment">//有参数有返回值</span><br><br>            <span class="hljs-comment">//2.通过类似反射的IMethod调用方法</span><br>            <span class="hljs-comment">//  通过IType中的GetMethod方法，类似反射一样的获取对应类中的方法</span><br>            <span class="hljs-comment">//两者方式的统一找方法名方式</span><br>            IMethod method = type.GetMethod(<span class="hljs-string">&quot;TestStaticFun&quot;</span>, <span class="hljs-number">0</span>);<br>            IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestStaticFun2&quot;</span>, <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//  2-1.通过appdomain.Invoke（IMethod对象, null, 参数列表）</span><br>            <span class="hljs-comment">//获取对应类 的 Itype</span><br>            appDomain.Invoke(method, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">var</span> o = appDomain.Invoke(method2, <span class="hljs-literal">null</span>, <span class="hljs-number">110</span>);<br>            print(o);<br><br>            <span class="hljs-comment">//  2-2.通过更节约性能的无GC Alloc方式（调用完后直接回收）调用，类似上节课的成员属性</span><br>            <span class="hljs-comment">//    using (var method = appDomain.BeginInvoke(methodName))</span><br>            <span class="hljs-comment">//    &#123;</span><br>            <span class="hljs-comment">//          method.Push.....(1000);//传入指定类型参数</span><br>            <span class="hljs-comment">//          method.Invoke();//执行方法</span><br>            <span class="hljs-comment">//          method.Read....()//获取指定类型返回值</span><br>            <span class="hljs-comment">//    &#125;</span><br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method3 = appDomain.BeginInvoke(method))<br>            &#123;<br>                method3.Invoke();<br>            &#125;<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method4 = appDomain.BeginInvoke(method2))<br>            &#123;<br>                method4.PushInteger(<span class="hljs-number">1000</span>);<br>                method4.Invoke();<br>                <span class="hljs-keyword">var</span> i = method4.ReadInteger();<br>                print(i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallMember</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            <span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br>            <span class="hljs-comment">//成员方法调用和静态方法调用几乎一样</span><br>            <span class="hljs-comment">//区别就是需要先创建对象，将对象传入之前为null的地方</span><br>            <span class="hljs-comment">//1.直接通过appdomain.Invoke(&quot;命名空间.类名&quot;, &quot;方法名&quot;, 类对象, 参数列表)</span><br>            appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-literal">null</span>); <span class="hljs-comment">//成员方法要传实例对象</span><br><br>            <span class="hljs-built_in">int</span> i = (<span class="hljs-built_in">int</span>)appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun2&quot;</span>, obj, <span class="hljs-number">100</span>); <span class="hljs-comment">//成员方法要传实例对象</span><br>            print(i);<br><br>            <span class="hljs-comment">//2.通过类似反射的IMethod调用方法 两种调用方法</span><br>            IMethod method1 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">0</span>);<br>            IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun2&quot;</span>, <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//  2-1.通过appdomain.Invoke（IMethod对象, 类对象, 参数列表）</span><br>            appDomain.Invoke(method1, obj);<br>            <span class="hljs-built_in">int</span> o = (<span class="hljs-built_in">int</span>)appDomain.Invoke(method2, obj, <span class="hljs-number">1000</span>);<br>            print(o);<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(method1))<br>            &#123;<br>                method.PushObject(obj);<br>                method.Invoke();<br>            &#125;<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(method2))<br>            &#123;<br>                method.PushObject(obj);<br>                method.PushInteger(<span class="hljs-number">10000</span>);<br>                method.Invoke();<br>                <span class="hljs-built_in">int</span> count = method.ReadInteger();<br>                print(count);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallOverMember</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            <span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br><br>            <span class="hljs-comment">//1.参数数量不同</span><br>            <span class="hljs-comment">//1-1.通过appDomain.Invoke调用参数数量不同格式，传入参数即可自动分别</span><br>            appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-literal">null</span>);<br>            appDomain.Invoke(<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>, <span class="hljs-string">&quot;TestFun&quot;</span>, obj, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//对于参数数量相同 类型不同 的函数 这样调用会出现问题</span><br>            <span class="hljs-comment">//appDomain.Invoke(&quot;HotFix_Project.Learn.TestClass&quot;, &quot;TestFun&quot;, obj, 1.1f);</span><br><br>            <span class="hljs-comment">//1-2.通过GetMethod的第二个参数来获取对应参数个数的函数</span><br>            IMethod method1 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">0</span>);<br>            IMethod method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, <span class="hljs-number">1</span>);<br>            appDomain.Invoke(method1, obj);<br>            appDomain.Invoke(method2, obj, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//appDomain.Invoke(method2,obj,1.1);</span><br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method3 = appDomain.BeginInvoke(method2))<br>            &#123;<br>                method3.PushObject(obj);<br>                method3.PushInteger(<span class="hljs-number">6</span>);<br>                method3.Invoke();<br>            &#125;<br><br>            <span class="hljs-comment">//2.参数数量相同，类型不同，通过上面两种方式直接使用无法确定取出来的函数是谁</span><br>            <span class="hljs-comment">//  我们需要通过GetMethod方法来获取指定参数类型的函数</span><br>            <span class="hljs-comment">//  2.1-获取参数对应的IType类型，利用appDomain中的GetType方法 获取指定变量类型的IType</span><br>            <span class="hljs-comment">//  2.2-放入参数列表中，将获取到的IType放入List&lt;IType&gt;中</span><br>            <span class="hljs-comment">//  2.3-传入GetMethod中获取指定类型参数，使用GetMethod的另一个重载，传入指定类型获取方法信息</span><br>            IType floatType = appDomain.GetType(<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">float</span>));<br>            List&lt;IType&gt; list = <span class="hljs-keyword">new</span> List&lt;IType&gt;();<br>            list.Add(floatType);<br>            method2 = type.GetMethod(<span class="hljs-string">&quot;TestFun&quot;</span>, list, <span class="hljs-literal">null</span>);<br>            appDomain.Invoke(method2, obj, <span class="hljs-number">1.1f</span>);<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method4 = appDomain.BeginInvoke(method2))<br>            &#123;<br>                method4.PushObject(obj);<br>                method4.PushFloat(<span class="hljs-number">11.1f</span>);<br>                method4.Invoke();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallRefOut</span>(<span class="hljs-params">AppDomain appDomain</span>)</span><br>        &#123;<br>            IType type = appDomain.LoadedTypes[<span class="hljs-string">&quot;HotFix_Project.Learn.TestClass&quot;</span>];<br>            <span class="hljs-built_in">object</span> obj = ((ILType)type).Instantiate();<br>            <span class="hljs-comment">//需要通过IMethod方法调用 并且需要使用无GC Alloc方法调用</span><br>            <span class="hljs-comment">//1.和其他函数不一样的地方 需要先压入ref或out参数的初始值</span><br>            <span class="hljs-comment">//2.和其它函数调用写法一致 压入调用对象 压入各参数</span><br>            <span class="hljs-comment">//3.ref和out因为在一开始就压入了值</span><br>            <span class="hljs-comment">//在这里需要压入他们的索引位置</span><br>            <span class="hljs-comment">//ref和out参数 压入参数引用索引值即可 从0开始</span><br>            <span class="hljs-comment">//4.通过Read按顺序获取ref/out参数的值 和返回值，返回值最后获取</span><br>            IMethod methodName = type.GetMethod(<span class="hljs-string">&quot;TestFun3&quot;</span>, <span class="hljs-number">3</span>);<br>            List&lt;<span class="hljs-built_in">int</span>&gt; list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;() &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br><br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> method = appDomain.BeginInvoke(methodName))<br>            &#123;<br>                method.PushObject(list); <span class="hljs-comment">//ref 需要在外部初始化</span><br>                method.PushObject(<span class="hljs-literal">null</span>); <span class="hljs-comment">//out 不需要在外部初始化</span><br>                method.PushObject(obj);<br>                method.PushInteger(<span class="hljs-number">100</span>);<br>                <span class="hljs-comment">//ref和out的索引值 只算他们 从0开始</span><br>                method.PushReference(<span class="hljs-number">0</span>);<br>                method.PushReference(<span class="hljs-number">1</span>);<br><br>                method.Invoke();<br><br>                <span class="hljs-comment">//获取ref和out参数的值</span><br>                List&lt;<span class="hljs-built_in">int</span>&gt; list2 = method.ReadObject&lt;List&lt;<span class="hljs-built_in">int</span>&gt;&gt;(<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">float</span> f = method.ReadFloat(<span class="hljs-number">1</span>);<br><br>                <span class="hljs-comment">//获取函数返回值</span><br>                <span class="hljs-built_in">float</span> returnValue = method.ReadFloat();<br><br>                print(<span class="hljs-string">&quot;ref参数的长度: &quot;</span> + list2.Count);<br>                print(<span class="hljs-string">&quot;out参数: &quot;</span> + f);<br>                print(<span class="hljs-string">&quot;返回值: &quot;</span> + returnValue);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>ILRuntime</tag>
      
      <tag>热更新</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据持久化-二进制</title>
    <link href="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <url>/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>Unity中，数据持久化可以使用二进制格式进行存储。通过将数据编码为二进制形式，可以实现更高效的存储和读取操作。同时也可以防止被修改游戏文件数据</p><p>C#提供了一个公共类帮助我们转化</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BitConverter</span><br></code></pre></td></tr></table></figure><p><code>BitConverter.GetBytes()</code> 将各种类型转为二进制字节数组</p><p><code>BitConverter.ToXX(,);</code> 将二进制字节数组转为指定类型</p><p>同时C#也有一个专门的编码格式类来帮助我们将字符串和字节数组进行转换</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Encoding</span><br></code></pre></td></tr></table></figure><p><code>byte[] bytes1 = Encoding.UTF8.GetBytes(&quot;Heart&quot;);</code> 将字符串以指定编码格式转字节数组</p><p><code>string s = Encoding.UTF8.GetString(bytes1);</code> 将字节数组串以指定编码格式转字符串</p><h3 id="文件相关操作"><a href="#文件相关操作" class="headerlink" title="文件相关操作"></a>文件相关操作</h3><p>文件操作File类的常用内容</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>File.Exists(path)</td><td>检查指定路径的文件是否存在。如果文件存在，则返回 true；否则返回 false。</td></tr><tr><td>File.Open(path, mode)</td><td>使用指定的模式打开指定路径的文件。可以使用 FileMode 枚举中的值来指定打开文件的模式。</td></tr><tr><td>File.Create(path)</td><td>在指定路径创建一个新文件。如果文件已存在，则此方法将覆盖该文件。</td></tr><tr><td>File.Delete(path)</td><td>删除指定路径的文件。如果文件不存在，则不会引发异常。</td></tr><tr><td>File.Copy(source, destination)</td><td>将源文件复制到目标路径。如果目标路径已存在文件，则该文件将被覆盖。</td></tr><tr><td>File.Move(source, destination)</td><td>将源文件移动到目标路径。如果目标路径已存在文件，则该文件将被覆盖。</td></tr><tr><td>File.ReadAllBytes(path)</td><td>以字节数组的形式读取指定路径文件中的所有字节。</td></tr><tr><td>File.ReadAllText(path)</td><td>以文本形式读取指定路径文件中的所有内容。</td></tr><tr><td>File.WriteAllBytes(path, bytes)</td><td>将字节数组中的数据写入指定路径的文件中。如果文件已存在，则该文件将被覆盖。</td></tr><tr><td>File.WriteAllText(path, text)</td><td>将指定的文本写入指定路径的文件中。如果文件已存在，则该文件将被覆盖。</td></tr><tr><td>File.WriteAllLines(path,text)</td><td>将指定的String数组内容，一行行写入到指定路径</td></tr></tbody></table><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p>在C#中，文件流是进行文件读写操作的一种常用方式。可以使用<code>FileStream</code>类来创建和操作文件流。</p><img src="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20231004155502181.png" class="" title="image-20231004155502181"><p>以下是文件流的常用方法：</p><ul><li><code>FileStream(string path, FileMode mode)</code>：使用指定的路径和文件打开模式创建一个新的<code>FileStream</code>对象。</li><li><code>Read(byte[] buffer, int offset, int count)</code>：从文件流中读取指定数量的字节到缓冲区。</li><li><code>Write(byte[] buffer, int offset, int count)</code>：将指定数量的字节从缓冲区写入文件流。</li><li><code>Flush</code>  <strong>将字节写入文件 写入后 一定执行一次</strong></li><li><code>Seek(long offset, SeekOrigin origin)</code>：将文件流中的位置设置为指定的偏移量和起始点。</li><li><code>Close()</code>：<strong>关闭文件流，并释放与之关联的所有资源。</strong></li><li><code>Dispose</code> <strong>缓存资源销毁回收</strong></li></ul><p>以下是使用文件流进行文件操作的示例：在C#中，<code>using</code>关键字用于确保在使用完特定资源后，自动释放或关闭该资源。这在处理文件流等需要手动释放资源的情况下非常有用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 打开一个文件流来读取文件</span><br><span class="hljs-keyword">using</span> (FileStream fileStream = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;file.txt&quot;</span>, FileMode.Open))<br>&#123;<br>    <span class="hljs-comment">// 在这里使用文件流进行读取操作</span><br><br>&#125; <span class="hljs-comment">// 在此处自动释放和关闭文件流</span><br><br><span class="hljs-comment">// 打开一个文件流来写入文件</span><br><span class="hljs-keyword">using</span> (FileStream fileStream = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;file.txt&quot;</span>, FileMode.Create))<br>&#123;<br>    <span class="hljs-comment">// 在这里使用文件流进行写入操作</span><br><br>&#125; <span class="hljs-comment">// 在此处自动释放和关闭文件流</span><br>使用`<span class="hljs-keyword">using</span>`关键字，可以确保资源在使用完毕后得到正确的释放，提高代码的可读性和可维护性。<br><span class="hljs-comment">//写入字符串</span><br><span class="hljs-keyword">using</span> (FileStream fileStream = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;file.txt&quot;</span>, FileMode.Create))<br>&#123;<br>    <span class="hljs-built_in">string</span> text = <span class="hljs-string">&quot;This is a sample text.&quot;</span>;<br>    <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(text);<br>    fileStream.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><p>C#中，可以使用<code>Directory</code>类进行文件夹的操作。以下是一些常用的文件夹操作方法：</p><ul><li><code>Directory.CreateDirectory(path)</code>：创建一个新的文件夹。</li><li><code>Directory.Exists(path)</code>：检查指定路径的文件夹是否存在。</li><li><code>Directory.Delete(path)</code>：删除指定路径的文件夹。</li><li><code>Directory.GetFiles(path)</code>：获取指定路径下的所有文件的路径。</li><li><code>Directory.GetDirectories(path)</code>：获取指定路径下的所有子文件夹的路径。</li><li><code>Directory.Move(source, destination)</code>：移动文件夹到指定路径。</li><li><code>Directory.GetFiles(path, searchPattern)</code>：获取指定路径下符合搜索模式的文件的路径。</li><li><code>Directory.GetDirectories(path, searchPattern)</code>：获取指定路径下符合搜索模式的子文件夹的路径。</li></ul><p>以下是使用<code>Directory</code>类进行文件夹操作的示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 创建一个新的文件夹</span><br>Directory.CreateDirectory(<span class="hljs-string">&quot;新文件夹&quot;</span>);<br><br><span class="hljs-comment">// 检查文件夹是否存在</span><br><span class="hljs-built_in">bool</span> exists = Directory.Exists(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br><br><span class="hljs-comment">// 删除文件夹</span><br>Directory.Delete(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br><br><span class="hljs-comment">// 获取指定路径下的所有文件的路径</span><br><span class="hljs-built_in">string</span>[] files = Directory.GetFiles(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br><br><span class="hljs-comment">// 获取指定路径下的所有子文件夹的路径</span><br><span class="hljs-built_in">string</span>[] directories = Directory.GetDirectories(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br><br><span class="hljs-comment">// 移动文件夹到指定路径</span><br>Directory.Move(<span class="hljs-string">&quot;源文件夹路径&quot;</span>, <span class="hljs-string">&quot;目标文件夹路径&quot;</span>);<br><br><span class="hljs-comment">// 获取指定路径下符合搜索模式的文件的路径</span><br><span class="hljs-built_in">string</span>[] files = Directory.GetFiles(<span class="hljs-string">&quot;文件夹路径&quot;</span>, <span class="hljs-string">&quot;搜索模式&quot;</span>);<br><br><span class="hljs-comment">// 获取指定路径下符合搜索模式的子文件夹的路径</span><br><span class="hljs-built_in">string</span>[] directories = Directory.GetDirectories(<span class="hljs-string">&quot;文件夹路径&quot;</span>, <span class="hljs-string">&quot;搜索模式&quot;</span>);<br></code></pre></td></tr></table></figure><p>FileMode 枚举定义了几个文件打开模式的类型</p><ol><li>CreateNew：创建一个新文件。如果文件已存在，则引发异常。</li><li>Create：创建一个新文件。如果文件已存在，则覆盖该文件。</li><li>Open：打开现有文件。如果文件不存在，则引发异常。</li><li>OpenOrCreate：打开现有文件，如果文件不存在则创建新文件。</li><li>Truncate：打开现有文件并截断文件的长度为零。如果文件不存在，则引发异常。</li><li>Append：打开现有文件并在文件末尾追加数据。如果文件不存在，则创建新文件</li></ol><p>FileAccess 枚举类型用于指定对文件的访问权限，包括：</p><ul><li>Read：允许读取文件的权限。</li><li>Write：允许写入文件的权限。</li><li>ReadWrite：同时允许读取和写入文件的权限。</li></ul><p>FileShare 枚举类型用于指定其他进程是否可以访问已打开的文件，包括：</p><ul><li>None：不允许其他进程访问已打开的文件。</li><li>Read：允许其他进程以读取方式访问已打开的文件。</li><li>Write：允许其他进程以写入方式访问已打开的文件。</li><li>ReadWrite：允许其他进程以读取和写入方式访问已打开的文件。</li><li>Delete：允许其他进程删除已打开的文件。</li></ul><p><code>DirectoryInfo</code> 类和 <code>FileInfo</code> 类是 C# 中用于操作文件夹和文件的两个重要的类。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**DirectoryInfo 目录信息类**</span><br><span class="hljs-strong">**FIleInfo 文件信息类**</span><br></code></pre></td></tr></table></figure><p><code>DirectoryInfo</code> 类提供了许多用于操作文件夹的方法和属性，例如：</p><ul><li><code>Create()</code>：创建文件夹。</li><li><code>Delete()</code>：删除文件夹。</li><li><code>Exists</code>：<strong>检查文件夹是否存在。</strong></li><li><code>GetFiles()</code>：<strong>获取文件夹中的所有文件。</strong></li><li><code>GetDirectories()</code>：<strong>获取文件夹中的所有子文件夹</strong>。</li><li><code>GetParent</code> <strong>查找上级文件夹信息</strong></li><li><code>FullName</code> 全路径</li><li><code>Name</code> 文件名</li></ul><p>以下是 <code>DirectoryInfo</code> 类的示例用法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 创建一个新的文件夹</span><br>DirectoryInfo directory = <span class="hljs-keyword">new</span> DirectoryInfo(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br>directory.Create();<br><br><span class="hljs-comment">// 删除文件夹</span><br>DirectoryInfo directory = <span class="hljs-keyword">new</span> DirectoryInfo(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br>directory.Delete();<br><br><span class="hljs-comment">// 检查文件夹是否存在</span><br>DirectoryInfo directory = <span class="hljs-keyword">new</span> DirectoryInfo(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br><span class="hljs-built_in">bool</span> exists = directory.Exists;<br><br><span class="hljs-comment">// 获取文件夹中的所有文件</span><br>DirectoryInfo directory = <span class="hljs-keyword">new</span> DirectoryInfo(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br>FileInfo[] files = directory.GetFiles();<br><br><span class="hljs-comment">// 获取文件夹中的所有子文件夹</span><br>DirectoryInfo directory = <span class="hljs-keyword">new</span> DirectoryInfo(<span class="hljs-string">&quot;文件夹路径&quot;</span>);<br>DirectoryInfo[] directories = directory.GetDirectories();<br></code></pre></td></tr></table></figure><p><code>FileInfo</code> 类提供了许多用于操作文件的方法和属性，例如：</p><ul><li><code>Exists</code>：检查文件是否存在。</li><li><code>Length</code>：获取文件的大小。</li><li><code>CopyTo()</code>：将文件复制到指定路径。</li><li><code>MoveTo()</code>：将文件移动到指定路径。</li><li><code>Delete()</code>：删除文件。</li></ul><p>以下是 <code>FileInfo</code> 类的示例用法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 检查文件是否存在</span><br>FileInfo file = <span class="hljs-keyword">new</span> FileInfo(<span class="hljs-string">&quot;文件路径&quot;</span>);<br><span class="hljs-built_in">bool</span> exists = file.Exists;<br><br><span class="hljs-comment">// 获取文件的大小</span><br>FileInfo file = <span class="hljs-keyword">new</span> FileInfo(<span class="hljs-string">&quot;文件路径&quot;</span>);<br><span class="hljs-built_in">long</span> size = file.Length;<br><br><span class="hljs-comment">// 将文件复制到指定路径</span><br>FileInfo file = <span class="hljs-keyword">new</span> FileInfo(<span class="hljs-string">&quot;源文件路径&quot;</span>);<br>file.CopyTo(<span class="hljs-string">&quot;目标文件路径&quot;</span>);<br><br><span class="hljs-comment">// 将文件移动到指定路径</span><br>FileInfo file = <span class="hljs-keyword">new</span> FileInfo(<span class="hljs-string">&quot;源文件路径&quot;</span>);<br>file.MoveTo(<span class="hljs-string">&quot;目标文件路径&quot;</span>);<br><br><span class="hljs-comment">// 删除文件</span><br>FileInfo file = <span class="hljs-keyword">new</span> FileInfo(<span class="hljs-string">&quot;文件路径&quot;</span>);<br>file.Delete();<br></code></pre></td></tr></table></figure><h3 id="练习题：-以二进制存储读取内容"><a href="#练习题：-以二进制存储读取内容" class="headerlink" title="练习题： 以二进制存储读取内容"></a>练习题： 以二进制存储读取内容</h3><img src="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20231004155433300.png" class="" title="image-20231004155433300"><p><code>Save</code> 方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName</span>)</span><br>        &#123;<br>            Debug.Log(Application.persistentDataPath);<br>            <span class="hljs-comment">//创建文件流</span><br>            <span class="hljs-keyword">if</span> (!Directory.Exists(Application.persistentDataPath + <span class="hljs-string">&quot;/Binary&quot;</span>))<br>            &#123;<br>                Directory.CreateDirectory(Application.persistentDataPath + <span class="hljs-string">&quot;/Binary&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//新建文件流 并且返回文件流进行字节的存储</span><br>            <span class="hljs-keyword">using</span> (FileStream fs = <span class="hljs-keyword">new</span> FileStream(Application.persistentDataPath + <span class="hljs-string">&quot;/Binary/&quot;</span> + fileName + <span class="hljs-string">&quot;.txt&quot;</span>,<br>                       FileMode.OpenOrCreate, FileAccess.Write))<br>            &#123;<br>                <span class="hljs-comment">//写age int</span><br>                <span class="hljs-keyword">var</span> bytes = BitConverter.GetBytes(age);<br>                fs.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>                <span class="hljs-comment">//写name string  除了字符串其他的写入都是简单的</span><br>                bytes = Encoding.UTF8.GetBytes(name);<br>                <span class="hljs-comment">//存储字符串字节数组的长度</span><br>                fs.Write(BitConverter.GetBytes(bytes.Length), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//4个字节的字节数组</span><br>                <span class="hljs-comment">//存储字符串字节数组</span><br>                fs.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>                <span class="hljs-comment">//写number int</span><br>                bytes = BitConverter.GetBytes(number);<br>                fs.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>                <span class="hljs-comment">//写sex bool</span><br>                bytes = BitConverter.GetBytes(sex);<br>                fs.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>            &#125;<br>        &#125;<br><span class="hljs-function">Load</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title">Load</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!File.Exists(Application.persistentDataPath + <span class="hljs-string">&quot;/Binary/&quot;</span> + fileName + <span class="hljs-string">&quot;.txt&quot;</span>))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            Student s = <span class="hljs-keyword">new</span> Student();<br>            <span class="hljs-comment">//加载文件流</span><br>            <span class="hljs-keyword">using</span> (FileStream fs = File.Open(Application.persistentDataPath + <span class="hljs-string">&quot;/Binary/&quot;</span> + fileName + <span class="hljs-string">&quot;.txt&quot;</span>,<br>                       FileMode.Open, FileAccess.Read))<br>            &#123;<br>                <span class="hljs-comment">//把文件子节读取出来</span><br>                <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[fs.Length];<br>                fs.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                <span class="hljs-comment">//挨个读取内容</span><br><br>                <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//读取age</span><br>                s.age = BitConverter.ToInt32(bytes, index);<br>                index += <span class="hljs-number">4</span>; <span class="hljs-comment">//以4个字节为单位 读取</span><br>                <span class="hljs-comment">//读取name  字符串 读取字符串的长度  读取字符串</span><br>                <span class="hljs-built_in">int</span> length = BitConverter.ToInt32(bytes, index);<br>                index += <span class="hljs-number">4</span>;<br>                s.name = Encoding.UTF8.GetString(bytes, index, length);<br>                index+= length;<br>                <br>                <span class="hljs-comment">//读取number</span><br>                s.number = BitConverter.ToInt32(bytes, index);<br>                index += <span class="hljs-number">4</span>;<br>                <span class="hljs-comment">//读取Sex</span><br>                s.sex = BitConverter.ToBoolean(bytes, index);<br>                index += <span class="hljs-number">1</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br></code></pre></td></tr></table></figure><p>当然如果我们对每一个类都有加载和保存的方法，那么就太臃肿了，所以我们采用C#序列化和反序列化，方便我们快速对二进制文件的读取和存储</p><h3 id="C-序列化与反序列化"><a href="#C-序列化与反序列化" class="headerlink" title="C#序列化与反序列化"></a>C#序列化与反序列化</h3><p>数据</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> id2 = <span class="hljs-number">1.1f</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> id3 = <span class="hljs-number">2.2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;Heart&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> name2 = <span class="hljs-string">&#x27;H&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] ints = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>        <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; Lists = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;() &#123; <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; dic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt;() &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;123&quot;</span> &#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;456&quot;</span> &#125;, &#123; <span class="hljs-number">3</span>, <span class="hljs-string">&quot;789&quot;</span> &#125; &#125;;<br>        <span class="hljs-keyword">public</span> StructTest structTest = <span class="hljs-keyword">new</span> StructTest(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Heart&quot;</span>);<br>        <span class="hljs-keyword">public</span> ClssTest clssTest = <span class="hljs-keyword">new</span> ClssTest();<br>    &#125;<br><br>    [<span class="hljs-meta">System.Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StructTest</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;Heart&quot;</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StructTest</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i, <span class="hljs-built_in">string</span> s</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.i = i;<br>            <span class="hljs-keyword">this</span>.s = s;<br>        &#125;<br>    &#125;<br><br>    [<span class="hljs-meta">System.Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ClssTest</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClssTest</span>()</span><br>        &#123;<br>        &#125;<br>    &#125;<br>   <span class="hljs-comment">//1.使用内存流得到字节数组</span><br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>            &#123;<br>                BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                bf.Serialize(ms, p); <span class="hljs-comment">//在要序列化的类上添加[Serializable]特性</span><br><br>                <span class="hljs-built_in">byte</span>[] bytes = ms.GetBuffer(); <span class="hljs-comment">//得到字节数组</span><br>                <span class="hljs-comment">//2.使用文件流写入文件</span><br>                <span class="hljs-keyword">if</span> (!File.Exists(Application.dataPath + <span class="hljs-string">&quot;/Binary/Heart&quot;</span>))<br>                &#123;<br>                    Directory.CreateDirectory(Application.dataPath + <span class="hljs-string">&quot;/Binary/Heart&quot;</span>);<br>                    File.WriteAllBytes(Application.dataPath + <span class="hljs-string">&quot;/Binary/Heart/Person.Heart&quot;</span>, bytes);<br>                    ms.Close();<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//2.使用文件流进行存储 这个方法用的比较多</span><br>            <span class="hljs-keyword">using</span> (FileStream fs =<span class="hljs-keyword">new</span> FileStream(Application.dataPath+<span class="hljs-string">&quot;/Binary/Heart/Person2.Heart&quot;</span>,FileMode.OpenOrCreate,FileAccess.Write))<br>            &#123;<br>                BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                bf.Serialize(fs, p);<br>                fs.Flush();<br>                fs.Close();<br>            &#125;<br><span class="hljs-comment">//文件流的读取</span><br>            <span class="hljs-keyword">using</span> (FileStream fs = <span class="hljs-keyword">new</span> FileStream(Application.dataPath + <span class="hljs-string">&quot;/Binary/Heart/Person2.Heart&quot;</span>, FileMode.Open,<br>                       FileAccess.Read))<br>            &#123;<br>                BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                <span class="hljs-keyword">var</span> p = bf.Deserialize(fs) <span class="hljs-keyword">as</span> Person;<br>                fs.Close();<br><br>            <br>            &#125;<br><br>            print(<span class="hljs-string">&quot;=====================================&quot;</span>);<br>            <span class="hljs-comment">//网络传输的字节数组的读取 没有网络传输就用本地文件</span><br>            <span class="hljs-built_in">byte</span>[] bytes = File.ReadAllBytes(Application.dataPath + <span class="hljs-string">&quot;/Binary/Heart/Person2.Heart&quot;</span>);<br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream(bytes))<br>            &#123;<br>                BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                <span class="hljs-keyword">var</span> deserialize = bf.Deserialize(ms) <span class="hljs-keyword">as</span> Person;<br></code></pre></td></tr></table></figure><h2 id="实践项目：Excel互转二进制工具"><a href="#实践项目：Excel互转二进制工具" class="headerlink" title="实践项目：Excel互转二进制工具"></a>实践项目：Excel互转二进制工具</h2><h3 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h3><ul><li><code>[MenuItem(&quot;目录名字/二级目录&quot;)]</code></li><li><code>AssetDatabase.Refresh();</code> 刷新文件夹</li><li>ExcelDll文件夹建议导入在Editor文件夹内</li><li><strong>获取Excel表中的数据能让我们动态的生成相关数据 1.数据结构类 2. 容器类 3.二进制数据</strong></li><li><code>Editor</code> 文件夹是 Unity 中用于编写编辑器扩展脚本的文件夹。在这个文件夹中创建的脚本将只在 Unity 编辑器中起作用，不会被构建到最终的游戏或应用程序中。</li></ul><p>你可以使用 <code>Editor</code> 文件夹来自定义 Unity 编辑器界面、添加自定义菜单项、创建自定义工具等。在创建编辑器脚本时，可以使用 <code>UnityEditor</code> 命名空间中的类和方法来访问 Unity 编辑器的功能和资源。</p><p>要创建一个位于 <code>Editor</code> 文件夹中的编辑器脚本，请在 <code>Editor</code> 文件夹内创建一个新的 C# 脚本，并将其命名为你想要的名称。然后，你可以在脚本中使用 <code>Editor</code> 属性来指定该脚本应该在 Unity 编辑器中的哪个菜单项下显示，以及触发特定操作的方式。</p><p>以下是一个示例，演示了如何在 <code>Editor</code> 文件夹中创建一个简单的编辑器脚本：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomEditorScript</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;Custom Tools/Open Custom Editor&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenCustomEditor</span>()</span><br>    &#123;<br>        CustomEditorScript window = GetWindow&lt;CustomEditorScript&gt;();<br>        window.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;Custom Editor&quot;</span>);<br>        window.Show();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>    &#123;<br>        GUILayout.Label(<span class="hljs-string">&quot;This is a custom editor window.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个继承自 <code>EditorWindow</code> 的类 <code>CustomEditorScript</code>。我们使用 <code>MenuItem</code> 属性将这个类的 <code>OpenCustomEditor</code> 方法添加到 Unity 编辑器的 “Custom Tools” 菜单下。当用户点击菜单项时，将打开一个自定义的编辑器窗口，并在窗口中显示 “This is a custom editor window.”。</p><p><code>Editor</code> 文件夹中的脚本仅在 Unity 编辑器中起作用。如果你希望脚本在游戏或应用程序运行时也能起作用，你需要将其放在其他文件夹中，例如 <code>Scripts</code> 文件夹。</p><h3 id="正式编写工具"><a href="#正式编写工具" class="headerlink" title="正式编写工具"></a>正式编写工具</h3><p>配置表规则</p><ul><li>第一行：字段名</li><li>第二行： 字段类型</li><li>第三行 主键是哪一个字段 需要通过key来标识主键</li><li>第四行： 描述信息</li><li>第五行之后就是具体数据信息</li><li>表名决定了数据结构类 容器类 二进制文件的文件名</li></ul><p><code>Excel转数据结构类  容器类 二进制文件工具</code>  其中的路径都是自己自定义的 二进制文件的后缀也是能修改的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EditorTool</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> Excel文件存放路径</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> EXCEL_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/ArtRes/Excel/&quot;</span>;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 数据结构类存放路径</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> DATA_CLASS_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/Scripts/DataClass/&quot;</span>;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 数据容器类存放路径</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> DATA_CONTAINER_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/Scripts/Container/&quot;</span>;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 二进制数据存放路径</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> DATA_BINARY_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/Data/&quot;</span>;<br>        <br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 真正内容开始的索引</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> BEGIN_INDEX = <span class="hljs-number">4</span>;<br><br>        [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;GameTools/生成Excel信息&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateExcelInfo</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> dInfo = Directory.CreateDirectory(EXCEL_PATH);<br>            <span class="hljs-keyword">var</span> files = dInfo.GetFiles(); <span class="hljs-comment">//得到文件夹下所有的文件</span><br><br>            <span class="hljs-comment">//数据表集合 容器</span><br>            DataTableCollection tableCollection;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; files.Length; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (files[i].Extension != <span class="hljs-string">&quot;.xlsx&quot;</span> &amp;&amp; files[i].Extension != <span class="hljs-string">&quot;.xls&quot;</span>)<br>                    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果不是Excel文件就跳过</span><br>                <span class="hljs-keyword">using</span> (FileStream fs = files[i].Open(FileMode.Open, FileAccess.Read))<br>                &#123;<br>                    IExcelDataReader excelDataReader = ExcelReaderFactory.CreateOpenXmlReader(fs);<br>                    tableCollection = excelDataReader.AsDataSet().Tables;<br>                    fs.Close();<br>                &#125;<br><br>                <span class="hljs-keyword">foreach</span> (DataTable dataTable <span class="hljs-keyword">in</span> tableCollection)<br>                &#123;<br>                    <span class="hljs-comment">//遍历文件中所有表的信息</span><br>                    <span class="hljs-comment">//生成数据结构类</span><br>                    GenerateDataClass(dataTable);<br>                    <span class="hljs-comment">//生成数据容器类</span><br>                    GenerateExcelContainer(dataTable);<br>                    <span class="hljs-comment">//生成二进制数据</span><br>                    GenerateExcelBinary(dataTable);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成数据结构类Excel表对应的</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateDataClass</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            DataRow rowName = GetVariableNameRow(table);<br>            DataRow rowType = GetVariableTypeRow(table);<br><br>            <span class="hljs-comment">//生成数据结构类 判断路径  生成代码脚本无非就是字符串拼接</span><br>            <span class="hljs-keyword">if</span> (!Directory.Exists(DATA_CLASS_PATH))<br>                Directory.CreateDirectory(DATA_CLASS_PATH);<br><br>            <span class="hljs-built_in">string</span> str =<br>                <span class="hljs-string">&quot;public class &quot;</span> + table.TableName + <span class="hljs-string">&quot;\\n&#123;\\n&quot;</span>; <span class="hljs-comment">//生成类名 以Excel表名为类名</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; table.Columns.Count; i++)<br>            &#123;<br>                str += <span class="hljs-string">&quot;   public &quot;</span> + rowType[i].ToString() + <span class="hljs-string">&quot; &quot;</span> + rowName[i].ToString() + <span class="hljs-string">&quot;;\\n&quot;</span>;<br>            &#125;<br><br>            str += <span class="hljs-string">&quot;&#125;&quot;</span>;<br><br>            File.WriteAllText(DATA_CLASS_PATH + table.TableName + <span class="hljs-string">&quot;.cs&quot;</span>, str);<br>            AssetDatabase.Refresh();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取变量名所在行</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataRow <span class="hljs-title">GetVariableNameRow</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> table.Rows[<span class="hljs-number">0</span>];<br>            <br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取变量类型所在行</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataRow <span class="hljs-title">GetVariableTypeRow</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> table.Rows[<span class="hljs-number">1</span>];<br>            <br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成容器类</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateExcelContainer</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> keyIndex = GetKeyIndex(table); <span class="hljs-comment">//主键索引</span><br>            <span class="hljs-comment">//得到字段类型行</span><br>            DataRow rowType = GetVariableTypeRow(table);<br>            <span class="hljs-keyword">if</span> (!Directory.Exists(DATA_CONTAINER_PATH))<br>            &#123;<br>                Directory.CreateDirectory(DATA_CONTAINER_PATH);<br>            &#125;<br><br>            <span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;using System.Collections.Generic;\\n\\n\\n&quot;</span>;<br>            s += <span class="hljs-string">&quot;public class &quot;</span> + table.TableName + <span class="hljs-string">&quot;Container&quot;</span> + <span class="hljs-string">&quot;\\n&#123;\\n&quot;</span>;<br>            s += <span class="hljs-string">&quot; &quot;</span>;<br>            s += <span class="hljs-string">&quot;  public Dictionary&lt;&quot;</span> + rowType[keyIndex].ToString() + <span class="hljs-string">&quot;,&quot;</span> + table.TableName + <span class="hljs-string">&quot;&gt;&quot;</span>;<br>        s += <span class="hljs-string">&quot;dataDic = new &quot;</span> + <span class="hljs-string">&quot;Dictionary&lt;&quot;</span> + rowType[keyIndex].ToString() + <span class="hljs-string">&quot;, &quot;</span> + table.TableName + <span class="hljs-string">&quot;&gt;();\\n&quot;</span>;<br><br>            s += <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            File.WriteAllText(DATA_CONTAINER_PATH + table.TableName + <span class="hljs-string">&quot;Container.cs&quot;</span>, s);<br>            AssetDatabase.Refresh();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取主键索引</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetKeyIndex</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            DataRow row = table.Rows[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; table.Columns.Count; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (row[i].ToString() == <span class="hljs-string">&quot;key&quot;</span>)<br>                    <span class="hljs-keyword">return</span> i;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成二进制数据</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateExcelBinary</span>(<span class="hljs-params">DataTable table</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!Directory.Exists(DATA_BINARY_PATH))<br>            &#123;<br>                Directory.CreateDirectory(DATA_BINARY_PATH);<br>            &#125;<br><br>            <span class="hljs-keyword">using</span> (FileStream fs = <span class="hljs-keyword">new</span> FileStream(DATA_BINARY_PATH + table.TableName + <span class="hljs-string">&quot;.tt&quot;</span>, FileMode.OpenOrCreate,<br>                       FileAccess.Write))<br>            &#123;<br>                <span class="hljs-comment">//1、存储具体的excel对应的2进制信息</span><br>                <span class="hljs-comment">//先要存储我们需要写多少行的数据 方便我们读取 -4是我们这文件的前4行是配置规则</span><br>                fs.Write(BitConverter.GetBytes(table.Rows.Count<span class="hljs-number">-4</span>),<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>                <span class="hljs-comment">//2.存储主键的变量名</span><br>            <span class="hljs-built_in">string</span> keyName = GetVariableNameRow(table)[GetKeyIndex(table)].ToString();<br><br>                <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(keyName);<br>                <span class="hljs-comment">//存储字符串字节数组的长度</span><br>                fs.Write(BitConverter.GetBytes(bytes.Length),<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>                <span class="hljs-comment">//存储字符串字节数组</span><br>                fs.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>                DataRow row;<br>                DataRow rowType = GetVariableTypeRow(table);<span class="hljs-comment">//得到类型行 根据类型写入数据</span><br>                <span class="hljs-comment">//正常存储数据 上面都是存储配置信息</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = BEGIN_INDEX; i &lt; table.Rows.Count; i++)<br>                &#123;<br>                    row = table.Rows[i];<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; table.Columns.Count; j++)<br>                    &#123;<br>                        <span class="hljs-comment">//根据类型写入数据</span><br>                        <span class="hljs-keyword">switch</span> (rowType[j].ToString())<br>                        &#123;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;int&quot;</span>:<br>                                fs.Write(BitConverter.GetBytes(<span class="hljs-built_in">int</span>.Parse(row[j].ToString())),<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;float&quot;</span>:<br>                                fs.Write(BitConverter.GetBytes(<span class="hljs-built_in">float</span>.Parse(row[j].ToString())),<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bool&quot;</span>:<br>                                fs.Write(BitConverter.GetBytes(<span class="hljs-built_in">bool</span>.Parse(row[j].ToString())),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;string&quot;</span>:<br>                                <span class="hljs-comment">//字符串存储规则 字符串长度+字符串字节数组 先写入长度 再写入字节数组(套路写法)</span><br>                                bytes =Encoding.UTF8.GetBytes(row[j].ToString());<br>                                fs.Write(BitConverter.GetBytes(bytes.Length),<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>                                fs.Write(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>                                <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                fs.Close();<br>            &#125;<br><br>            AssetDatabase.Refresh();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>生成的效果</p><img src="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20231004155404623.png" class="" title="image-20231004155404623"><h3 id="二进制数据管理类-BinaryDataManager"><a href="#二进制数据管理类-BinaryDataManager" class="headerlink" title="二进制数据管理类 BinaryDataManager"></a>二进制数据管理类 BinaryDataManager</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BinaryDataManager</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BinaryDataManager _instance = <span class="hljs-keyword">new</span> BinaryDataManager();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BinaryDataManager Instance =&gt; _instance;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> SAVE_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/Data/&quot;</span>;<br><br>        <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; tableDic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;();<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 二进制数据存放路径</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> DATA_BINARY_PATH = Application.dataPath + <span class="hljs-string">&quot;/Binary/Data/&quot;</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BinaryDataManager</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitData</span>()</span><br>        &#123;<br>            LoadTable&lt;TowerInfoContainer, TowerInfo&gt;();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 加载Excel表二进制数据到内存中</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>容器类名<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;K&quot;&gt;</span>数据结构体名<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadTable</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">K</span>&gt;()</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (FileStream fs = File.Open(DATA_BINARY_PATH + <span class="hljs-keyword">typeof</span>(K).Name + <span class="hljs-string">&quot;.tt&quot;</span>, FileMode.Open,<br>                       FileAccess.Read))<br>            &#123;<br>                <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[fs.Length];<br>                fs.Read(bytes, <span class="hljs-number">0</span>, bytes.Length);<br>                fs.Close();<br>                <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>; <span class="hljs-comment">//同于记录当前读取到的位置</span><br><br>                <span class="hljs-comment">//读取多少行数据 </span><br>                <span class="hljs-built_in">int</span> count = BitConverter.ToInt32(bytes, index);<br>                index += <span class="hljs-number">4</span>;<br>                <span class="hljs-comment">//读取主键的数据</span><br>                <span class="hljs-built_in">int</span> keyNameLength = BitConverter.ToInt32(bytes, index);<br>                index += <span class="hljs-number">4</span>;<br>                <span class="hljs-built_in">string</span> keyName = Encoding.UTF8.GetString(bytes, index, keyNameLength); <span class="hljs-comment">//读取主键的名字</span><br>                index += keyNameLength;<br><br>                <span class="hljs-comment">//创建容器类对象</span><br>                Type contaninerType = <span class="hljs-keyword">typeof</span>(T);<br>                <span class="hljs-built_in">object</span> contaninerObj = Activator.CreateInstance(contaninerType);<br>                <span class="hljs-comment">//获取数据结构类对象</span><br>                Type classType = <span class="hljs-keyword">typeof</span>(K);<br>                <span class="hljs-comment">//获取数据结构类的所有字段信息 PS</span><br>                FieldInfo[] infos = classType.GetFields();<br>                <span class="hljs-comment">//读取每一行的数据</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>                &#123;<br>                    <span class="hljs-comment">//实例化类对象</span><br>                    <span class="hljs-built_in">object</span> dataObj = Activator.CreateInstance(classType);<br><br>                    <span class="hljs-keyword">foreach</span> (FieldInfo info <span class="hljs-keyword">in</span> infos)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (info.FieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">int</span>))<br>                        &#123;<br>                            <span class="hljs-comment">//给类对象的字段赋值 转int值赋值给对应的字段</span><br>                            info.SetValue(dataObj, BitConverter.ToInt32(bytes, index));<br>                            index += <span class="hljs-number">4</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.FieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">float</span>))<br>                        &#123;<br>                            info.SetValue(dataObj, BitConverter.ToSingle(bytes, index));<br>                            index += <span class="hljs-number">4</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.FieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>))<br>                        &#123;<br>                            info.SetValue(dataObj, BitConverter.ToBoolean(bytes, index));<br>                            index += <span class="hljs-number">1</span>; <span class="hljs-comment">//bool类型占用1个字节</span><br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.FieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>))<br>                        &#123;<br>                            <span class="hljs-built_in">int</span> length = BitConverter.ToInt32(bytes, index);<br>                            index += <span class="hljs-number">4</span>;<br>                            info.SetValue(dataObj, Encoding.UTF8.GetString(bytes, index, length));<br>                            index += length; <span class="hljs-comment">//每次读取字符串的长度 必须加！！！！！</span><br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-comment">//将数据存储到容器类中</span><br>                    <span class="hljs-built_in">object</span> dicObject = contaninerType.GetField(<span class="hljs-string">&quot;dataDic&quot;</span>).GetValue(contaninerObj);<br>                    <span class="hljs-comment">//获取Add方法</span><br>                    MethodInfo mInfo = dicObject.GetType().GetMethod(<span class="hljs-string">&quot;Add&quot;</span>);<br>                    <span class="hljs-comment">//获取主键的值</span><br>                    <span class="hljs-built_in">object</span> keyValue = classType.GetField(keyName).GetValue(dataObj);<br>                    <span class="hljs-comment">// Add方法的参数</span><br>                    mInfo.Invoke(dicObject, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; keyValue, dataObj &#125;);<br>                &#125;<br><br>                <span class="hljs-comment">//表读取完就记录下来</span><br>                tableDic.Add(<span class="hljs-keyword">typeof</span>(T).Name, contaninerObj);<br>                fs.Close();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 得到表中的数据</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">GetTable</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>        &#123;<br>            <span class="hljs-built_in">string</span> tableName = <span class="hljs-keyword">typeof</span>(T).Name;<br>            <span class="hljs-keyword">if</span> (tableDic.ContainsKey(tableName))<br>            &#123;<br>                <span class="hljs-keyword">return</span> tableDic[tableName] <span class="hljs-keyword">as</span> T;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 存储类对象数据</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;fileName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj, <span class="hljs-built_in">string</span> fileName</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!Directory.Exists(SAVE_PATH))<br>            &#123;<br>                Directory.CreateDirectory(SAVE_PATH);<br>            &#125;<br><br>            <span class="hljs-built_in">byte</span> encryptionKey = <span class="hljs-number">0xAA</span>;<br>            <span class="hljs-built_in">byte</span>[] data = SerializeObject(obj);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>            &#123;<br>                data[i] ^= encryptionKey;<br>            &#125;<br><br>            <span class="hljs-keyword">using</span> (FileStream fs = <span class="hljs-keyword">new</span> FileStream(SAVE_PATH + fileName + <span class="hljs-string">&quot;.tt&quot;</span>, FileMode.OpenOrCreate,<br>                       FileAccess.Write))<br>            &#123;<br>                <span class="hljs-comment">// BinaryFormatter bf = new BinaryFormatter();</span><br>                <span class="hljs-comment">// bf.Serialize(fs, obj);</span><br>                <span class="hljs-comment">// fs.Close();</span><br>                fs.Write(data, <span class="hljs-number">0</span>, data.Length);<br>                fs.Close();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">SerializeObject</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>            &#123;<br>                BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                bf.Serialize(ms, obj);<br>                <span class="hljs-keyword">return</span> ms.ToArray();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 读取2进制数据转换成对象</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;fileName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Load</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName</span>) <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!File.Exists(SAVE_PATH + fileName + <span class="hljs-string">&quot;.tt&quot;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<br>            &#125;<br><br>            T obj;<br>            <span class="hljs-built_in">byte</span> encryptionKey = <span class="hljs-number">0xAA</span>;<br><br>            <span class="hljs-keyword">using</span> (FileStream fs = <span class="hljs-keyword">new</span> FileStream(SAVE_PATH + fileName + <span class="hljs-string">&quot;.tt&quot;</span>, FileMode.Open, FileAccess.Read))<br>            &#123;<br>                <span class="hljs-built_in">byte</span>[] encryptionData = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[fs.Length];<br>                fs.Read(encryptionData, <span class="hljs-number">0</span>, encryptionData.Length);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; encryptionData.Length; i++)<br>                &#123;<br>                    encryptionData[i] ^= encryptionKey;<br>                &#125;<br><br>                <span class="hljs-comment">// BinaryFormatter bf = new BinaryFormatter();</span><br>                <span class="hljs-comment">// obj = bf.Deserialize(fs) as T;</span><br>                <span class="hljs-comment">// fs.Close();</span><br><br>                <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream(encryptionData))<br>                &#123;<br>                    BinaryFormatter bf = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                    obj = bf.Deserialize(ms) <span class="hljs-keyword">as</span> T;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">BinaryDataManager</span>.<span class="hljs-type">Instance</span>.<span class="hljs-type">InitData</span>();var <span class="hljs-class"><span class="hljs-keyword">data</span> = <span class="hljs-type">BinaryDataManager</span>.<span class="hljs-type">Instance</span>.<span class="hljs-type">GetTable</span>&lt;<span class="hljs-type">TowerInfoContainer</span>&gt;();</span><br><span class="hljs-title">print</span>(<span class="hljs-class"><span class="hljs-keyword">data</span>.dataDic[5].name);</span><br></code></pre></td></tr></table></figure><img src="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20231004155327177.png" class="" title="image-20231004155327177"><img src="/2023/10/04/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20231004155337251.png" class="" title="image-20231004155337251">]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>数据持久化</tag>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PureMVC基础</title>
    <link href="/2023/09/18/Engine/PureMVC%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/18/Engine/PureMVC%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="PureMVC"><a href="#PureMVC" class="headerlink" title="PureMVC"></a>PureMVC</h2><p>PureMVC是一种基于MVC设计模式的框架，用于开发面向对象的应用程序。在PureMVC中，模型、视图和控制器之间的关注点分离有助于减少耦合并提高可维护性。PureMVC将其分为三个核心部分：模型、视图和控制器。</p><p>模型组件负责维护应用程序数据和业务逻辑，视图组件负责渲染用户界面，而控制器组件包含应用程序逻辑并处理用户输入。通过分离这些关注点，PureMVC使得修改、测试和重用应用程序的各个组件更加容易。此外，PureMVC提供了各种附加功能，如命令模式、观察者模式和代理模式，以进一步简化应用程序的开发。</p><img src="/2023/09/18/Engine/PureMVC%E5%9F%BA%E7%A1%80/image-20230918094841068.png" class="" title="image-20230918094841068"><h3 id="MVC-Proxy-Mediator-Command-Facade"><a href="#MVC-Proxy-Mediator-Command-Facade" class="headerlink" title="MVC+Proxy+Mediator+Command+Facade"></a><strong>MVC+Proxy+Mediator+Command+Facade</strong></h3><p>Model(数据模型)：</p><p>关联Proxy(代理) 对象，负责处理数据</p><p>View(界面)：</p><p>关联Mediator(中介)对象，负责处理界面</p><p>Controller(业务控制):</p><p>管理Command(命令) 对象，负责处理业务逻辑</p><p>Facade(外观)：</p><p>是MVC三者的经纪人,统管全局</p><p>可以获取代理，中介 命令</p><p>Notification： 通知，负责传递消息</p><p>PureMVC将应用程序分为三个核心部分：模型、视图和控制器。模型负责维护应用程序数据和业务逻辑，视图负责渲染用户界面，而控制器包含应用程序逻辑并处理用户输入。通过分离这些关注点，PureMVC使得修改、测试和重用应用程序的各个组件更加容易。</p><p>在PureMVC中，这些组件通过代理、中介、命令和外观等模式进行通信。代理负责处理数据，中介负责处理界面，命令负责处理业务逻辑，而外观是它们的经纪人，统管全局。它可以获取代理、中介和命令，并调度它们之间的通信。</p><p>命令对象通过外观对象发送消息，而中介对象通过观察者模式来监听这些消息。当命令对象发送消息时，中介对象会收到通知，并相应地更新视图或模型。代理对象可以在模型和控制器之间起到桥梁的作用，帮助它们之间进行数据传递。</p><p>PureMVC中的通信是通过观察者模式和命令模式来实现的。观察者模式用于中介与视图之间的通信，而命令模式用于控制器与模型之间的通信。这种通信方式降低了不同层之间的耦合程度，使得代码更具有可读性和可维护性。</p><p>其中Facade是它们的经纪人，统管全局，而Proxy、Mediator、Command则分别代表了模型、视图和控制器。命令、观察者和代理模式等设计模式有助于解耦应用程序的不同组件</p><p>在PureMvC中，Model是由Proxy进行管理的。Proxy是一个中介类，它充当Model和View之间的桥梁。它负责从Model中检索数据，并将数据发送到View以呈现给用户。这种设计模式的优点之一是将Model和View分离，从而实现更好的可维护性和扩展性。此外，Proxy还可以用于缓存数据，以提高性能并减少不必要的数据访问。因此，使用Proxy来管理Model是一种非常常用的方法，尤其是在大型应用程序中。</p><p>例子代码：Model  玩家数据结构 <code>PlayerDataObj</code>   数据代理对象 <code>PlayerProxy</code></p><p>Facade(外观)：</p><p>是MVC三者的经纪人,统管全局</p><p>可以获取代理，中介 命令</p><p>Notification： 通知，负责传递消息</p><p>PureMVC将应用程序分为三个核心部分：模型、视图和控制器。模型负责维护应用程序数据和业务逻辑，视图负责渲染用户界面，而控制器包含应用程序逻辑并处理用户输入。通过分离这些关注点，PureMVC使得修改、测试和重用应用程序的各个组件更加容易。</p><p>在PureMVC中，这些组件通过代理、中介、命令和外观等模式进行通信。代理负责处理数据，中介负责处理界面，命令负责处理业务逻辑，而外观是它们的经纪人，统管全局。它可以获取代理、中介和命令，并调度它们之间的通信。</p><p>命令对象通过外观对象发送消息，而中介对象通过观察者模式来监听这些消息。当命令对象发送消息时，中介对象会收到通知，并相应地更新视图或模型。代理对象可以在模型和控制器之间起到桥梁的作用，帮助它们之间进行数据传递。</p><p>PureMVC中的通信是通过观察者模式和命令模式来实现的。观察者模式用于中介与视图之间的通信，而命令模式用于控制器与模型之间的通信。这种通信方式降低了不同层之间的耦合程度，使得代码更具有可读性和可维护性。</p><p>其中Facade是它们的经纪人，统管全局，而Proxy、Mediator、Command则分别代表了模型、视图和控制器。命令、观察者和代理模式等设计模式有助于解耦应用程序的不同组件</p><p>在PureMvC中，Model是由Proxy进行管理的。Proxy是一个中介类，它充当Model和View之间的桥梁。它负责从Model中检索数据，并将数据发送到View以呈现给用户。这种设计模式的优点之一是将Model和View分离，从而实现更好的可维护性和扩展性。此外，Proxy还可以用于缓存数据，以提高性能并减少不必要的数据访问。因此，使用Proxy来管理Model是一种非常常用的方法，尤其是在大型应用程序中。</p><p>例子代码：Model  玩家数据结构 <code>PlayerDataObj</code>   数据代理对象 <code>PlayerProxy</code></p><p>Facade(外观)：</p><p>是MVC三者的经纪人,统管全局</p><p>可以获取代理，中介 命令</p><p>Notification： 通知，负责传递消息</p><p>PureMVC将应用程序分为三个核心部分：模型、视图和控制器。模型负责维护应用程序数据和业务逻辑，视图负责渲染用户界面，而控制器包含应用程序逻辑并处理用户输入。通过分离这些关注点，PureMVC使得修改、测试和重用应用程序的各个组件更加容易。</p><p>在PureMVC中，这些组件通过代理、中介、命令和外观等模式进行通信。代理负责处理数据，中介负责处理界面，命令负责处理业务逻辑，而外观是它们的经纪人，统管全局。它可以获取代理、中介和命令，并调度它们之间的通信。</p><p>命令对象通过外观对象发送消息，而中介对象通过观察者模式来监听这些消息。当命令对象发送消息时，中介对象会收到通知，并相应地更新视图或模型。代理对象可以在模型和控制器之间起到桥梁的作用，帮助它们之间进行数据传递。</p><p>PureMVC中的通信是通过观察者模式和命令模式来实现的。观察者模式用于中介与视图之间的通信，而命令模式用于控制器与模型之间的通信。这种通信方式降低了不同层之间的耦合程度，使得代码更具有可读性和可维护性。</p><p>其中Facade是它们的经纪人，统管全局，而Proxy、Mediator、Command则分别代表了模型、视图和控制器。命令、观察者和代理模式等设计模式有助于解耦应用程序的不同组件</p><p>在PureMvC中，Model是由Proxy进行管理的。Proxy是一个中介类，它充当Model和View之间的桥梁。它负责从Model中检索数据，并将数据发送到View以呈现给用户。这种设计模式的优点之一是将Model和View分离，从而实现更好的可维护性和扩展性。此外，Proxy还可以用于缓存数据，以提高性能并减少不必要的数据访问。因此，使用Proxy来管理Model是一种非常常用的方法，尤其是在大型应用程序中。</p><p>例子代码：Model  玩家数据结构 <code>PlayerDataObj</code>   数据代理对象 <code>PlayerProxy</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>   <span class="hljs-comment"><span class="hljs-doctag">///</span> 玩家数据结构</span><br>   <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerDataObj</span><br>   &#123;<br>       <span class="hljs-comment">//数据内容 玩家属性的变量</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> PlayerName;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Lev;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Money;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>  Gem;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Power;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Hp;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Atk;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Def;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Crit;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Miss;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Luck;<br>       <br>   &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 玩家数据代理对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 主要处理 玩家数据的获取和更新</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 数据更新相关的逻辑</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerProxy</span> : <span class="hljs-title">Proxy</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> NAME = <span class="hljs-string">&quot;PlayerProxy&quot;</span>; <span class="hljs-comment">//代理的名字</span><br>        <br>        <span class="hljs-comment">//1. 继承Proxy类</span><br>        <span class="hljs-comment">//2. 写构造函数</span><br>        <span class="hljs-comment">//重点 代理的名字和数据的名字一致 代理相关的数据</span><br>        <span class="hljs-comment">//将外部传入的数据赋值给代理 完成数据的关联</span><br>        <span class="hljs-comment">//方法1</span><br>        <span class="hljs-comment">// public PlayerProxy(PlayerProxy data) : base(NAME,data)</span><br>        <span class="hljs-comment">// &#123;</span><br>             <span class="hljs-comment">//初始化外部传入的数据</span><br>        <span class="hljs-comment">// &#125;</span><br>        <br>        <span class="hljs-comment">//方法2 PS 数据的传入根据关系来决定外部传入还是内部初始</span><br>        <span class="hljs-comment">//存在 一对一和一对多的关系</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlayerProxy</span>() : <span class="hljs-title">base</span>(<span class="hljs-params">NAME</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//在构造函数中初始化数据</span><br>            PlayerDataObj obj = <span class="hljs-keyword">new</span> PlayerDataObj();<br>            <span class="hljs-comment">//初始化数据</span><br>            obj.PlayerName = PlayerPrefs.GetString(<span class="hljs-string">&quot;PlayerName&quot;</span>, <span class="hljs-string">&quot;Heart&quot;</span>);<br>            obj. Lev =PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerLev&quot;</span>, <span class="hljs-number">1</span>);<br>            obj.Money = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerMoney&quot;</span>, <span class="hljs-number">888</span>);<br>            obj.Gem = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerGem&quot;</span>, <span class="hljs-number">999</span>);<br>            obj.Power = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerPower&quot;</span>, <span class="hljs-number">99</span>);<br>            <br>            obj.Hp = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerHp&quot;</span>, <span class="hljs-number">100</span>);<br>            obj.Atk = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerAtk&quot;</span>, <span class="hljs-number">20</span>);<br>            obj.Def = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerDef&quot;</span>, <span class="hljs-number">10</span>);<br>            obj.Crit = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerCrit&quot;</span>, <span class="hljs-number">30</span>);<br>            obj.Miss = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerMiss&quot;</span>, <span class="hljs-number">15</span>);<br>            obj.Luck = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerLuck&quot;</span>, <span class="hljs-number">25</span>);  <br>            <span class="hljs-comment">//这些就是通过代理关联数据</span><br>            <br>            <span class="hljs-comment">//将数据存储到代理中</span><br>            Data = obj;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 更新 升级</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LevUp</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//Data是父类装子类的形式装载的</span><br>            PlayerDataObj data = Data <span class="hljs-keyword">as</span> PlayerDataObj;<br>            <br>            data.Lev += <span class="hljs-number">1</span>;<br>            data.Hp += data.Lev;<br>            data.Atk += data.Lev;<br>            data.Def += data.Lev;<br>            data.Crit += data.Lev;<br>            data.Miss += data.Lev;<br>            data.Luck += data.Lev;<br>            <br>            SaveData();<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>()</span><br>        &#123;<br>            PlayerDataObj data = Data <span class="hljs-keyword">as</span> PlayerDataObj;<br>            <br>            <span class="hljs-comment">//保存数据</span><br>            PlayerPrefs.SetString(<span class="hljs-string">&quot;PlayerName&quot;</span>, data.PlayerName);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerLev&quot;</span>, data.Lev);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerMoney&quot;</span>, data.Money);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerGem&quot;</span>, data.Gem);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerPower&quot;</span>, data.Power);<br>            <br>            <br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerHp&quot;</span>, data.Hp);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerAtk&quot;</span>, data.Atk);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerDef&quot;</span>, data.Def);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerCrit&quot;</span>, data.Crit);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerMiss&quot;</span>, data.Miss);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerLuck&quot;</span>, data.Luck);<br>            <br>            <br>            <span class="hljs-comment">//UpdateInfo(); //通过这种形式和外部进行联系</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>而 View 则和<code>Mediator</code>相关</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMainView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-comment">//1.找控件</span><br>        <span class="hljs-keyword">public</span> Button btnRole;<br>        <span class="hljs-comment">//public Button btnBag;</span><br><br>        <span class="hljs-keyword">public</span> Text txtName;<br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtMoney;<br>        <span class="hljs-keyword">public</span> Text txtGem;<br>        <span class="hljs-keyword">public</span> Text txtPower;<br>        <br>        <br>        <span class="hljs-comment">// 按MVC的思想是直接在这里写更新数据的方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerDataObj data</span>)</span><br>        &#123;<br>            txtName.text = data.PlayerName;<br>            txtLev.text = <span class="hljs-string">&quot;Lv.&quot;</span> + data.Lev;<br>            txtMoney.text = data.Money.ToString();<br>            txtGem.text = data.Gem.ToString();<br>            txtPower.text = data.Power.ToString();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMainViewMediator</span> : <span class="hljs-title">Mediator</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span> NAME = <span class="hljs-string">&quot;PureMainViewMediator&quot;</span>; <span class="hljs-comment">//通过名字来获取Mediator</span><br><br>        <span class="hljs-comment">//套路写法 继承PureMvC的Mediator脚本</span><br>        <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PureMainViewMediator</span>() : <span class="hljs-title">base</span>(<span class="hljs-params">NAME</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//这里可以写创建面板的代码</span><br>            <span class="hljs-comment">//但是界面显示应该是触发控制的</span><br>            <span class="hljs-comment">//且创建界面代码重复性高 所以不写</span><br>        &#125;<br><br>        <span class="hljs-comment">//重写监听通知的方法  这是告诉PureMVC我们关心这个通知 触发的时候得处理</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span>[] <span class="hljs-title">ListNotificationInterests</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//这是一个规则</span><br>            <span class="hljs-comment">//你需要监听哪些通知 那就在这里把通知通过字符串数组的形式返回</span><br>            <span class="hljs-comment">//PureMVC就会帮助我们监听这些通知</span><br>            <span class="hljs-comment">//return base.ListNotificationInterests();</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[]<br>            &#123;<br>                PureNotification.UPDATE_PLAYER_INFO,<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-comment">//重写处理通知的方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleNotification</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//INotification 这个接口对象包含对我们来说重要的参数</span><br>            <span class="hljs-comment">// 通知名 通知包含的信息</span><br>            <span class="hljs-keyword">switch</span> (notification.Name)<br>            &#123;<br>                <span class="hljs-keyword">case</span>  PureNotification.UPDATE_PLAYER_INFO:<br>                    <span class="hljs-comment">//收到更新通知 做处理 使用ViewComponent串联起UI</span><br>                    (ViewComponent <span class="hljs-keyword">as</span> PureMainView).UpdateInfo(notification.Body <span class="hljs-keyword">as</span> PlayerDataObj);<br>                    <span class="hljs-keyword">break</span>;<br>                    <br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//重写注册通知的方法 可选</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRegister</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//初始化一些内容</span><br>            <span class="hljs-keyword">base</span>.OnRegister();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRemove</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnRemove();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureRoleView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Button btnClose;<br>        <span class="hljs-keyword">public</span> Button btnLevUp;<br><br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtHp;<br>        <span class="hljs-keyword">public</span> Text txtAtk;<br>        <span class="hljs-keyword">public</span> Text txtDef;<br>        <span class="hljs-keyword">public</span> Text txtCrit;<br>        <span class="hljs-keyword">public</span> Text txtMiss;<br>        <span class="hljs-keyword">public</span> Text txtLuck;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerDataObj data</span>)</span><br>        &#123;<br>            txtLev.text = <span class="hljs-string">&quot;LV.&quot;</span> + data.Lev;<br>            txtHp.text = data.Hp.ToString();<br>            txtAtk.text = data.Atk.ToString();<br>            txtDef.text = data.Def.ToString();<br>            txtCrit.text = data.Crit.ToString();<br>            txtMiss.text = data.Miss.ToString();<br>            txtLuck.text = data.Luck.ToString();<br>            <br>        &#125;<br>        <br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureRoleViewMediator</span> : <span class="hljs-title">Mediator</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> NAME = <span class="hljs-string">&quot;PureRoleViewMediator&quot;</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PureRoleViewMediator</span>() : <span class="hljs-title">base</span>(<span class="hljs-params">NAME</span>)</span><br>        &#123;<br>            <br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span>[] <span class="hljs-title">ListNotificationInterests</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[]<br>            &#123;<br>                PureNotification.UPDATE_PLAYER_INFO,<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleNotification</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span> (notification.Name)<br>            &#123;<br>                <span class="hljs-keyword">case</span> PureNotification.UPDATE_PLAYER_INFO :<br>                    (ViewComponent <span class="hljs-keyword">as</span> PureRoleView).UpdateInfo(notification.Body <span class="hljs-keyword">as</span> PlayerDataObj);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中重要的方法 继承Mediator 重写构造方法 以<code>mediatorName</code>来进行传递 监听和处理通知</p><p>数据由Proxy管理 UI由Mediator管理 在M和V之间包裹着这么一层</p><h3 id="Facade管理者MVC-MVC又管理者-Proxy-Mediator-Command"><a href="#Facade管理者MVC-MVC又管理者-Proxy-Mediator-Command" class="headerlink" title="Facade管理者MVC MVC又管理者 Proxy Mediator Command"></a>Facade管理者MVC MVC又管理者 Proxy Mediator Command</h3><p>Facade的执行流程如下：</p><ol><li>客户端调用Facade的方法。</li><li>客户端调用Facade的方法后，Facade会调用相应的Command。这是整个过程中的一个重要步骤，因为它允许Facade将任务委托给适当的Command。Command负责执行系统的实际工作，将系统的不同职责分解到不同的Command中，</li><li>Command调用对应的Proxy和Mediator方法。Proxy进行数据管理，Mediator进行UI管理。</li><li>Proxy和Mediator进行交互。</li><li>响应操作返回客户端。</li></ol><p>而 View 则和<code>Mediator</code>相关</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMainView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-comment">//1.找控件</span><br>        <span class="hljs-keyword">public</span> Button btnRole;<br>        <span class="hljs-comment">//public Button btnBag;</span><br><br>        <span class="hljs-keyword">public</span> Text txtName;<br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtMoney;<br>        <span class="hljs-keyword">public</span> Text txtGem;<br>        <span class="hljs-keyword">public</span> Text txtPower;<br>        <br>        <br>        <span class="hljs-comment">// 按MVC的思想是直接在这里写更新数据的方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerDataObj data</span>)</span><br>        &#123;<br>            txtName.text = data.PlayerName;<br>            txtLev.text = <span class="hljs-string">&quot;Lv.&quot;</span> + data.Lev;<br>            txtMoney.text = data.Money.ToString();<br>            txtGem.text = data.Gem.ToString();<br>            txtPower.text = data.Power.ToString();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMainViewMediator</span> : <span class="hljs-title">Mediator</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span> NAME = <span class="hljs-string">&quot;PureMainViewMediator&quot;</span>; <span class="hljs-comment">//通过名字来获取Mediator</span><br><br>        <span class="hljs-comment">//套路写法 继承PureMvC的Mediator脚本</span><br>        <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PureMainViewMediator</span>() : <span class="hljs-title">base</span>(<span class="hljs-params">NAME</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//这里可以写创建面板的代码</span><br>            <span class="hljs-comment">//但是界面显示应该是触发控制的</span><br>            <span class="hljs-comment">//且创建界面代码重复性高 所以不写</span><br>        &#125;<br><br>        <span class="hljs-comment">//重写监听通知的方法  这是告诉PureMVC我们关心这个通知 触发的时候得处理</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span>[] <span class="hljs-title">ListNotificationInterests</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//这是一个规则</span><br>            <span class="hljs-comment">//你需要监听哪些通知 那就在这里把通知通过字符串数组的形式返回</span><br>            <span class="hljs-comment">//PureMVC就会帮助我们监听这些通知</span><br>            <span class="hljs-comment">//return base.ListNotificationInterests();</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[]<br>            &#123;<br>                PureNotification.UPDATE_PLAYER_INFO,<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-comment">//重写处理通知的方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleNotification</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//INotification 这个接口对象包含对我们来说重要的参数</span><br>            <span class="hljs-comment">// 通知名 通知包含的信息</span><br>            <span class="hljs-keyword">switch</span> (notification.Name)<br>            &#123;<br>                <span class="hljs-keyword">case</span>  PureNotification.UPDATE_PLAYER_INFO:<br>                    <span class="hljs-comment">//收到更新通知 做处理 使用ViewComponent串联起UI</span><br>                    (ViewComponent <span class="hljs-keyword">as</span> PureMainView).UpdateInfo(notification.Body <span class="hljs-keyword">as</span> PlayerDataObj);<br>                    <span class="hljs-keyword">break</span>;<br>                    <br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//重写注册通知的方法 可选</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRegister</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//初始化一些内容</span><br>            <span class="hljs-keyword">base</span>.OnRegister();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRemove</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnRemove();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureRoleView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Button btnClose;<br>        <span class="hljs-keyword">public</span> Button btnLevUp;<br><br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtHp;<br>        <span class="hljs-keyword">public</span> Text txtAtk;<br>        <span class="hljs-keyword">public</span> Text txtDef;<br>        <span class="hljs-keyword">public</span> Text txtCrit;<br>        <span class="hljs-keyword">public</span> Text txtMiss;<br>        <span class="hljs-keyword">public</span> Text txtLuck;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerDataObj data</span>)</span><br>        &#123;<br>            txtLev.text = <span class="hljs-string">&quot;LV.&quot;</span> + data.Lev;<br>            txtHp.text = data.Hp.ToString();<br>            txtAtk.text = data.Atk.ToString();<br>            txtDef.text = data.Def.ToString();<br>            txtCrit.text = data.Crit.ToString();<br>            txtMiss.text = data.Miss.ToString();<br>            txtLuck.text = data.Luck.ToString();<br>            <br>        &#125;<br>        <br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureRoleViewMediator</span> : <span class="hljs-title">Mediator</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> NAME = <span class="hljs-string">&quot;PureRoleViewMediator&quot;</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PureRoleViewMediator</span>() : <span class="hljs-title">base</span>(<span class="hljs-params">NAME</span>)</span><br>        &#123;<br>            <br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span>[] <span class="hljs-title">ListNotificationInterests</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[]<br>            &#123;<br>                PureNotification.UPDATE_PLAYER_INFO,<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleNotification</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span> (notification.Name)<br>            &#123;<br>                <span class="hljs-keyword">case</span> PureNotification.UPDATE_PLAYER_INFO :<br>                    (ViewComponent <span class="hljs-keyword">as</span> PureRoleView).UpdateInfo(notification.Body <span class="hljs-keyword">as</span> PlayerDataObj);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中重要的方法 继承Mediator 重写构造方法 以<code>mediatorName</code>来进行传递 监听和处理通知</p><p>数据由Proxy管理 UI由Mediator管理 在M和V之间包裹着这么一层</p><p>Facade管理者MVC MVC又管理者 Proxy Mediator Command</p><p>Facade的执行流程如下：</p><ol><li>客户端调用Facade的方法。</li><li>客户端调用Facade的方法后，Facade会调用相应的Command。这是整个过程中的一个重要步骤，因为它允许Facade将任务委托给适当的Command。Command负责执行系统的实际工作，将系统的不同职责分解到不同的Command中，</li><li>Command调用对应的Proxy和Mediator方法。Proxy进行数据管理，Mediator进行UI管理。</li><li>Proxy和Mediator进行交互。</li><li>响应操作返回客户端。</li></ol><p>在这个流程中，Facade作为MVC的入口点，客户端只需要和Facade打交道，Facade负责协调Command、Proxy和Mediator</p><p>例子 <code>GameFacade</code>  <code>StartUpCommand</code>  <code>PureMvcMain</code> **** 之间的通讯</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameFacade</span> : <span class="hljs-title">Facade</span><br>    &#123;<br>        <span class="hljs-comment">//1. 继承PureMvC的Facade脚本</span><br>        <span class="hljs-comment">//2.为了方便使用Facade 写单例</span><br>        <span class="hljs-comment">//3.初始化控制层相关的内容</span><br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameFacade Instance<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>                    instance = <span class="hljs-keyword">new</span> GameFacade();<br>                <span class="hljs-keyword">return</span> instance <span class="hljs-keyword">as</span> GameFacade;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 控制器相关的内容</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeController</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.InitializeController(); <span class="hljs-comment">//这个方法是必须调用的</span><br>            <span class="hljs-comment">//这里写一些关于命令 通知 绑定的逻辑</span><br>            RegisterCommand(PureNotification.START_UP, () =&gt;<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StartUpCommand(); <span class="hljs-comment">//这就是一个最简单的方式来绑定通知和命令</span><br>            &#125;);<br>        &#125;<br>        <br>        <span class="hljs-comment">//4.一定有一个启动函数</span><br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartUp</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//启动函数</span><br>            <span class="hljs-comment">//启动的时候发送一个通知</span><br>            SendNotification(PureNotification.START_UP);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StartUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-comment">//1.继承Command 相关</span><br>        <span class="hljs-comment">//2. 重写执行函数方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            Debug.Log(<span class="hljs-string">&quot;Heart Beat&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMvcMain</span>: <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            GameFacade.Instance.StartUp();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这就实现了PureMVC的初步通讯</p><p>Facade 首先得实现Facade的单列 随后初始化控制层相关的内容 如果得需要启动函数</p><p>而Controller中的每一个Command的都必须要继承<code>SimpleCommand</code> 重写 <code>Execute</code> 方法 在这个函数内写命令的相关逻辑  随后在Facade初始化控制器内容内的时候才能初始 同时也必须要有<code>PureNotification</code> 的通知名类 随后在与View的Mediator做交互</p><p>套路写法：先写数据 后界面 再用命令做串联 再用 Facade 做判断 注册和获取</p><p>最后是例子里的Controller代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c#">StartUpCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StartUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-comment">//1.继承Command 相关</span><br>        <span class="hljs-comment">//2. 重写执行函数方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            <span class="hljs-comment">// 启动命令中往往是做一些初始化的操作</span><br>            <span class="hljs-keyword">if</span> (!Facade.HasProxy(PlayerProxy.NAME))<br>            &#123;<br>                Facade.RegisterProxy(<span class="hljs-keyword">new</span> PlayerProxy());<br>            &#125;<br>        &#125;<br>    &#125;<br>ShowPanelCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShowPanelCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            <br>            <span class="hljs-comment">//这里写面板创建的命令</span><br>            <span class="hljs-built_in">string</span> panel = notification.Body.ToString();<br><br>            <span class="hljs-keyword">switch</span> (panel)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;MainPanel&quot;</span>:<br>                    <span class="hljs-comment">//显示面板相关内容</span><br>                    <span class="hljs-comment">//如果要使用Mediator 就得去 Facade中注册 Command和proxy都是一样的，要用就得注册</span><br>                    <span class="hljs-keyword">if</span> (!Facade.HasMediator(PureMainViewMediator.NAME))<br>                    &#123;<br>                        Facade.RegisterMediator(<span class="hljs-keyword">new</span> PureMainViewMediator()); <span class="hljs-comment">//等于新建一个Mediator对象，注册到Facade中</span><br>                    &#125;<br>                    <span class="hljs-comment">//得到Mediator之后关联到ViewComponent</span><br>                    PureMainViewMediator mm = Facade.RetrieveMediator(PureMainViewMediator.NAME) <span class="hljs-keyword">as</span> PureMainViewMediator;<br>                    <span class="hljs-keyword">if</span> (mm.ViewComponent==<span class="hljs-literal">null</span>)<br>                    &#123;<br>                        <span class="hljs-comment">//有了Mediator之后就可以创建面板了 创建预设体</span><br>                        GameObject res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br>                        GameObject obj = GameObject.Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br>                        <span class="hljs-comment">//mm.ViewComponent = obj.GetComponent&lt;PureMainView&gt;();//关联成功</span><br>                        mm.SetView(obj.GetComponent&lt;PureMainView&gt;()); <span class="hljs-comment">//关联脚本 同时监听按钮事件</span><br>                    &#125;<br>                    <span class="hljs-comment">//往往在显示面板之后就显示更新</span><br>                    SendNotification(PureNotification.UPDATE_PLAYER_INFO,Facade.RetrieveProxy(PlayerProxy.NAME).Data);<span class="hljs-comment">//通过发通知来更新数据</span><br>                    <span class="hljs-comment">//得到Proxy之后将数据也传入到通知里 然后Mediator里处理通知 ListNotificationInterests和HandleNotification函数很重要</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;RolePanel&quot;</span>:<br>                    <span class="hljs-keyword">if</span> (!Facade.HasMediator(PureRoleViewMediator.NAME))<br>                    &#123;<br>                        Facade.RegisterMediator(<span class="hljs-keyword">new</span> PureRoleViewMediator());<br>                    &#125;<br>                    <br>                    <span class="hljs-keyword">var</span> rv = Facade.RetrieveMediator(PureRoleViewMediator.NAME) <span class="hljs-keyword">as</span> PureRoleViewMediator;<br>                    <span class="hljs-keyword">if</span> (rv.ViewComponent == <span class="hljs-literal">null</span>) <br>                    &#123;<br>                        GameObject res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/RolePanel&quot;</span>);<br>                        GameObject obj = GameObject.Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br>                        <span class="hljs-comment">//rv.ViewComponent = obj.GetComponent&lt;PureRoleView&gt;();//关联成功</span><br>                        rv.SetView(obj.GetComponent&lt;PureRoleView&gt;());<br>                    &#125;<br>                    SendNotification(PureNotification.UPDATE_PLAYER_INFO,Facade.RetrieveProxy(PlayerProxy.NAME).Data);<span class="hljs-comment">//通过发通知来更新数据</span><br>                    <span class="hljs-comment">//得到Proxy之后将数据也传入到通知里 然后Mediator里处理通知 ListNotificationInterests和HandleNotification函数很重要</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>LevelUpCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LevelUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-keyword">var</span> retrieveProxy = Facade.RetrieveProxy(PlayerProxy.NAME) <span class="hljs-keyword">as</span> PlayerProxy;<br>            <span class="hljs-keyword">if</span> (retrieveProxy != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-comment">//升级 </span><br>                retrieveProxy.LevUp();<br>                retrieveProxy.SaveData();<span class="hljs-comment">//保存数据</span><br>                <span class="hljs-comment">//通知更新</span><br>                SendNotification(PureNotification.UPDATE_PLAYER_INFO, retrieveProxy.Data);<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><code>HidePanelCommand</code></p><p>其中重要的方法 继承Mediator 重写构造方法 以<code>mediatorName</code>来进行传递 监听和处理通知</p><p>数据由Proxy管理 UI由Mediator管理 在M和V之间包裹着这么一层</p><p>Facade管理者MVC MVC又管理者 Proxy Mediator Command</p><p>Facade的执行流程如下：</p><ol><li>客户端调用Facade的方法。</li><li>客户端调用Facade的方法后，Facade会调用相应的Command。这是整个过程中的一个重要步骤，因为它允许Facade将任务委托给适当的Command。Command负责执行系统的实际工作，将系统的不同职责分解到不同的Command中，</li><li>Command调用对应的Proxy和Mediator方法。Proxy进行数据管理，Mediator进行UI管理。</li><li>Proxy和Mediator进行交互。</li><li>响应操作返回客户端。</li></ol><p>在这个流程中，Facade作为MVC的入口点，客户端只需要和Facade打交道，Facade负责协调Command、Proxy和Mediator</p><p>例子 <code>GameFacade</code>  <code>StartUpCommand</code>  <code>PureMvcMain</code> **** 之间的通讯</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameFacade</span> : <span class="hljs-title">Facade</span><br>    &#123;<br>        <span class="hljs-comment">//1. 继承PureMvC的Facade脚本</span><br>        <span class="hljs-comment">//2.为了方便使用Facade 写单例</span><br>        <span class="hljs-comment">//3.初始化控制层相关的内容</span><br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameFacade Instance<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>                    instance = <span class="hljs-keyword">new</span> GameFacade();<br>                <span class="hljs-keyword">return</span> instance <span class="hljs-keyword">as</span> GameFacade;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 控制器相关的内容</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeController</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.InitializeController(); <span class="hljs-comment">//这个方法是必须调用的</span><br>            <span class="hljs-comment">//这里写一些关于命令 通知 绑定的逻辑</span><br>            RegisterCommand(PureNotification.START_UP, () =&gt;<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StartUpCommand(); <span class="hljs-comment">//这就是一个最简单的方式来绑定通知和命令</span><br>            &#125;);<br>        &#125;<br>        <br>        <span class="hljs-comment">//4.一定有一个启动函数</span><br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartUp</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//启动函数</span><br>            <span class="hljs-comment">//启动的时候发送一个通知</span><br>            SendNotification(PureNotification.START_UP);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StartUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-comment">//1.继承Command 相关</span><br>        <span class="hljs-comment">//2. 重写执行函数方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            Debug.Log(<span class="hljs-string">&quot;Heart Beat&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PureMvcMain</span>: <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            GameFacade.Instance.StartUp();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这就实现了PureMVC的初步通讯</p><p>Facade 首先得实现Facade的单列 随后初始化控制层相关的内容 如果得需要启动函数</p><p>而Controller中的每一个Command的都必须要继承<code>SimpleCommand</code> 重写 <code>Execute</code> 方法 在这个函数内写命令的相关逻辑  随后在Facade初始化控制器内容内的时候才能初始 同时也必须要有<code>PureNotification</code> 的通知名类 随后在与View的Mediator做交互</p><p>套路写法：先写数据 后界面 再用命令做串联 再用 Facade 做判断 注册和获取</p><p>最后是例子里的Controller代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c#">StartUpCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StartUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-comment">//1.继承Command 相关</span><br>        <span class="hljs-comment">//2. 重写执行函数方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            <span class="hljs-comment">// 启动命令中往往是做一些初始化的操作</span><br>            <span class="hljs-keyword">if</span> (!Facade.HasProxy(PlayerProxy.NAME))<br>            &#123;<br>                Facade.RegisterProxy(<span class="hljs-keyword">new</span> PlayerProxy());<br>            &#125;<br>        &#125;<br>    &#125;<br>ShowPanelCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShowPanelCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-comment">//当命令执行的时候调用的方法 Execute</span><br>            <br>            <span class="hljs-comment">//这里写面板创建的命令</span><br>            <span class="hljs-built_in">string</span> panel = notification.Body.ToString();<br><br>            <span class="hljs-keyword">switch</span> (panel)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;MainPanel&quot;</span>:<br>                    <span class="hljs-comment">//显示面板相关内容</span><br>                    <span class="hljs-comment">//如果要使用Mediator 就得去 Facade中注册 Command和proxy都是一样的，要用就得注册</span><br>                    <span class="hljs-keyword">if</span> (!Facade.HasMediator(PureMainViewMediator.NAME))<br>                    &#123;<br>                        Facade.RegisterMediator(<span class="hljs-keyword">new</span> PureMainViewMediator()); <span class="hljs-comment">//等于新建一个Mediator对象，注册到Facade中</span><br>                    &#125;<br>                    <span class="hljs-comment">//得到Mediator之后关联到ViewComponent</span><br>                    PureMainViewMediator mm = Facade.RetrieveMediator(PureMainViewMediator.NAME) <span class="hljs-keyword">as</span> PureMainViewMediator;<br>                    <span class="hljs-keyword">if</span> (mm.ViewComponent==<span class="hljs-literal">null</span>)<br>                    &#123;<br>                        <span class="hljs-comment">//有了Mediator之后就可以创建面板了 创建预设体</span><br>                        GameObject res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br>                        GameObject obj = GameObject.Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br>                        <span class="hljs-comment">//mm.ViewComponent = obj.GetComponent&lt;PureMainView&gt;();//关联成功</span><br>                        mm.SetView(obj.GetComponent&lt;PureMainView&gt;()); <span class="hljs-comment">//关联脚本 同时监听按钮事件</span><br>                    &#125;<br>                    <span class="hljs-comment">//往往在显示面板之后就显示更新</span><br>                    SendNotification(PureNotification.UPDATE_PLAYER_INFO,Facade.RetrieveProxy(PlayerProxy.NAME).Data);<span class="hljs-comment">//通过发通知来更新数据</span><br>                    <span class="hljs-comment">//得到Proxy之后将数据也传入到通知里 然后Mediator里处理通知 ListNotificationInterests和HandleNotification函数很重要</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;RolePanel&quot;</span>:<br>                    <span class="hljs-keyword">if</span> (!Facade.HasMediator(PureRoleViewMediator.NAME))<br>                    &#123;<br>                        Facade.RegisterMediator(<span class="hljs-keyword">new</span> PureRoleViewMediator());<br>                    &#125;<br>                    <br>                    <span class="hljs-keyword">var</span> rv = Facade.RetrieveMediator(PureRoleViewMediator.NAME) <span class="hljs-keyword">as</span> PureRoleViewMediator;<br>                    <span class="hljs-keyword">if</span> (rv.ViewComponent == <span class="hljs-literal">null</span>) <br>                    &#123;<br>                        GameObject res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/RolePanel&quot;</span>);<br>                        GameObject obj = GameObject.Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br>                        <span class="hljs-comment">//rv.ViewComponent = obj.GetComponent&lt;PureRoleView&gt;();//关联成功</span><br>                        rv.SetView(obj.GetComponent&lt;PureRoleView&gt;());<br>                    &#125;<br>                    SendNotification(PureNotification.UPDATE_PLAYER_INFO,Facade.RetrieveProxy(PlayerProxy.NAME).Data);<span class="hljs-comment">//通过发通知来更新数据</span><br>                    <span class="hljs-comment">//得到Proxy之后将数据也传入到通知里 然后Mediator里处理通知 ListNotificationInterests和HandleNotification函数很重要</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>LevelUpCommand<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LevelUpCommand</span> : <span class="hljs-title">SimpleCommand</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">INotification notification</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute(notification);<br>            <span class="hljs-keyword">var</span> retrieveProxy = Facade.RetrieveProxy(PlayerProxy.NAME) <span class="hljs-keyword">as</span> PlayerProxy;<br>            <span class="hljs-keyword">if</span> (retrieveProxy != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-comment">//升级 </span><br>                retrieveProxy.LevUp();<br>                retrieveProxy.SaveData();<span class="hljs-comment">//保存数据</span><br>                <span class="hljs-comment">//通知更新</span><br>                SendNotification(PureNotification.UPDATE_PLAYER_INFO, retrieveProxy.Data);<br>            &#125;<br>        &#125;<br>    &#125;<br>HidePanelCommand<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>PureMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC</title>
    <link href="/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/"/>
    <url>/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="MVC基础"><a href="#MVC基础" class="headerlink" title="MVC基础"></a>MVC基础</h2><p>MVC的名称来自于三个组件：模型（Model），视图（View）和控制器（Controller）。这三个组件分别代表了业务逻辑、用户界面和输入&#x2F;输出。MVC模式的目的是将应用程序的三个核心组件分离开来，以便可以在不影响其他组件的情况下修改其中一个组件。这使得代码更易于维护和测试，并允许开发人员专注于特定组件的开发和优化。</p><img src="/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/image-20230918094649061.png" class="" title="image-20230918094649061"><h3 id="MVC的一般流程如下："><a href="#MVC的一般流程如下：" class="headerlink" title="MVC的一般流程如下："></a>MVC的一般流程如下：</h3><ol><li>用户与视图进行交互，视图将用户输入传递给控制器。</li><li>控制器接收到用户输入后，决定如何处理这些输入。</li><li>控制器与模型进行交互，更新模型的状态。</li><li>视图通过查询模型的状态来更新自己的状态，这样它就可以显示出正确的信息。</li><li>如果需要，视图可以向控制器请求新的用户输入。</li></ol><p>这个流程可以不断重复，使得用户可以与应用程序进行交互并进行操作。</p><p>在游戏开发中主要用于UI系统逻辑</p><p>好处： 降低耦合 方便修改 逻辑更加清晰</p><p>缺点： 脚本变多 体量表大 流程变复杂</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>Model层：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//数据相关的操作</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 作为一个唯一的数据模型 一般情况下 要不自己是个单例对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 要么自己存在于一个单例对象中  以此来保护唯一性</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerModel</span> <br>    &#123;<br>        <span class="hljs-comment">//数据内容</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _playerName;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> PlayerName =&gt; _playerName; <span class="hljs-comment">//通过属性来包裹一次 能防止外部改变数据</span><br><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _lev;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Lev =&gt; _lev;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _money;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Money =&gt; _money;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _gem;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Gem =&gt; _gem;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _power;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Power =&gt; _power;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _hp;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Hp =&gt; _hp;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _atk;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Atk =&gt; _atk;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _def;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Def =&gt; _def;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _crit;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Crit =&gt; _crit;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _miss;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Miss =&gt; _miss;<br>        <span class="hljs-keyword">private</span>  <span class="hljs-built_in">int</span> _luck;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Luck =&gt; _luck;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> UnityAction&lt;PlayerModel&gt; UpdateEvent; <span class="hljs-comment">//通知外部更新的事件 而不是直接获取外部的面板</span><br>        <br>        <span class="hljs-comment">//在外部第一次获取数据的时候进行初始化 一般情况下玩家数据是只有一个的</span><br>        <span class="hljs-comment">//通过单列模式进行数据的获取</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PlayerModel _instance;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PlayerModel Data<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (_instance == <span class="hljs-literal">null</span>)<br>                &#123;<br>                    _instance = <span class="hljs-keyword">new</span> PlayerModel();<br>                    _instance.Init();<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> _instance;<br>            &#125;<br>        &#125;<br>        <br>        <br>        <span class="hljs-comment">//初始化</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>()</span><br>        &#123;<br>            _playerName = PlayerPrefs.GetString(<span class="hljs-string">&quot;PlayerName&quot;</span>, <span class="hljs-string">&quot;Heart&quot;</span>);<br>            _lev =PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerLev&quot;</span>, <span class="hljs-number">1</span>);<br>            _money = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerMoney&quot;</span>, <span class="hljs-number">888</span>);<br>            _gem = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerGem&quot;</span>, <span class="hljs-number">999</span>);<br>            _power = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerPower&quot;</span>, <span class="hljs-number">99</span>);<br>            _hp = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerHp&quot;</span>, <span class="hljs-number">100</span>);<br>            _atk = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerAtk&quot;</span>, <span class="hljs-number">20</span>);<br>            _def = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerDef&quot;</span>, <span class="hljs-number">10</span>);<br>            _crit = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerCrit&quot;</span>, <span class="hljs-number">30</span>);<br>            _miss = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerMiss&quot;</span>, <span class="hljs-number">15</span>);<br>            _luck = PlayerPrefs.GetInt(<span class="hljs-string">&quot;PlayerLuck&quot;</span>, <span class="hljs-number">25</span>);<br>            <br>        &#125;<br>        <br>        <span class="hljs-comment">// 更新 升级</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LevUp</span>()</span><br>        &#123;<br>            _lev += <span class="hljs-number">1</span>;<br>            _hp += _lev;<br>            _atk += _lev;<br>            _def += _lev;<br>            _crit += _lev;<br>            _miss += _lev;<br>            _luck += _lev;<br>            <br>            SaveData();<br>        &#125;<br>        <br>        <span class="hljs-comment">//保存</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//保存数据</span><br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerLev&quot;</span>, _lev);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerMoney&quot;</span>, _money);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerGem&quot;</span>, _gem);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerPower&quot;</span>, _power);<br>            <br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerHp&quot;</span>, _hp);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerAtk&quot;</span>, _atk);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerDef&quot;</span>, _def);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerCrit&quot;</span>, _crit);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerMiss&quot;</span>, _miss);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;PlayerLuck&quot;</span>, _luck);<br>            <br>            UpdateInfo(); <span class="hljs-comment">//通过这种形式和外部进行联系</span><br>        &#125;<br>        <br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddEventListener</span>(<span class="hljs-params">UnityAction&lt;PlayerModel&gt; action</span>)</span><br>        &#123;<br>            UpdateEvent += action;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveEventListener</span>(<span class="hljs-params">UnityAction&lt;PlayerModel&gt; action</span>)</span><br>        &#123;<br>            UpdateEvent -= action;<br>        &#125;<br>        <br>        <span class="hljs-comment">//通知外部更新数据的方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>()</span><br>        &#123;<br>           <span class="hljs-comment">//找到对应使用数据的脚本 去更新数据</span><br>           <span class="hljs-keyword">if</span> (UpdateEvent != <span class="hljs-literal">null</span> )<br>           &#123;<br>               <span class="hljs-comment">//外面谁关心model 的变化就传一个函数进行监听 </span><br>               <span class="hljs-comment">//当数据变化的时候执行这方法 将自己传出去</span><br>               <span class="hljs-comment">//外部接到数据后进行更新</span><br>                UpdateEvent(<span class="hljs-keyword">this</span>);<br>           &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>View层：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-comment">//1.找控件</span><br>        <span class="hljs-keyword">public</span> Button btnRole;<br>        <span class="hljs-comment">//public Button btnBag;</span><br><br>        <span class="hljs-keyword">public</span> Text txtName;<br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtMoney;<br>        <span class="hljs-keyword">public</span> Text txtGem;<br>        <span class="hljs-keyword">public</span> Text txtPower;<br><br>        <span class="hljs-comment">//2.提供更新的方法给外部</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerModel data</span>)</span><br>        &#123;<br>            txtName.text = data.PlayerName;<br>            txtLev.text = <span class="hljs-string">&quot;Lv.&quot;</span> + data.Lev;<br>            txtMoney.text = data.Money.ToString();<br>            txtGem.text = data.Gem.ToString();<br>            txtPower.text = data.Power.ToString();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RoleView</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Button btnClose;<br>        <span class="hljs-keyword">public</span> Button btnLevUp;<br><br>        <span class="hljs-keyword">public</span> Text txtLev;<br>        <span class="hljs-keyword">public</span> Text txtHp;<br>        <span class="hljs-keyword">public</span> Text txtAtk;<br>        <span class="hljs-keyword">public</span> Text txtDef;<br>        <span class="hljs-keyword">public</span> Text txtCrit;<br>        <span class="hljs-keyword">public</span> Text txtMiss;<br>        <span class="hljs-keyword">public</span> Text txtLuck;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerModel data</span>)</span><br>        &#123;<br>            txtLev.text = <span class="hljs-string">&quot;LV.&quot;</span> + data.Lev;<br>            txtHp.text = data.Hp.ToString();<br>            txtAtk.text = data.Atk.ToString();<br>            txtDef.text = data.Def.ToString();<br>            txtCrit.text = data.Crit.ToString();<br>            txtMiss.text = data.Miss.ToString();<br>            txtLuck.text = data.Luck.ToString();<br>            <br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Controller层</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> Controller层的主要作用是接收View层的事件，</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 然后调用Model层的方法，更新数据，然后再更新View层的显示。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 主要是业务逻辑层</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> MainView _mainView;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MainController controller = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> MainController Controller =&gt; controller;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            _mainView = <span class="hljs-keyword">this</span>.GetComponent&lt;MainView&gt;();<br>            _mainView.UpdateInfo(PlayerModel.Data);<br><br>            <span class="hljs-comment">//注册事件 </span><br>            _mainView.btnRole.onClick.AddListener(ClickBtnRole);<br>            <br>            <span class="hljs-comment">//升级之后的界面更新 </span><br>            PlayerModel.Data.AddEventListener(UpdateInfo);<br>        &#125;<br><br>        <span class="hljs-comment">//界面更新的通知</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerModel arg0</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_mainView!=<span class="hljs-literal">null</span>)<br>            &#123;<span class="hljs-comment">//更新界面</span><br>                _mainView.UpdateInfo(arg0);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClickBtnRole</span>()</span><br>        &#123;<br>            RoleController.ShowMe();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowMe</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (controller == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">var</span> res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br>                <span class="hljs-keyword">var</span> go = Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br><br>                controller = go.gameObject.GetComponent&lt;MainController&gt;();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideMe</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (controller != <span class="hljs-literal">null</span>)<br>            &#123;<br>                Destroy(controller.gameObject);<br>                controller = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//移除事件</span><br>            PlayerModel.Data.RemoveEventListener(UpdateInfo);<br>        &#125;<br>    &#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 业务逻辑</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RoleController</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> RoleView _roleView;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RoleController controller = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RoleController Controller =&gt; controller;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            _roleView = GetComponent&lt;RoleView&gt;();<br>            _roleView.UpdateInfo(PlayerModel.Data);<br>            _roleView.btnClose.onClick.AddListener(ClickBtnClose);<br>            _roleView.btnLevUp.onClick.AddListener(ClickLevUp);<br><br>            <span class="hljs-comment">//告知数据模块 当更新时 那个函数做处理</span><br>            PlayerModel.Data.AddEventListener(UpdateInfo);<br>        &#125;<br><br>        <br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerModel arg0</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_roleView != <span class="hljs-literal">null</span>)<br>            &#123;<br>                _roleView.UpdateInfo(arg0);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClickBtnClose</span>()</span><br>        &#123;<br>            HideMe();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClickLevUp</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//通过数据模块升级</span><br>            PlayerModel.Data.LevUp();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowMe</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (controller == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">var</span> res = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/RolePanel&quot;</span>);<br>                <span class="hljs-keyword">var</span> go = Instantiate(res, GameObject.Find(<span class="hljs-string">&quot;Canvas&quot;</span>).transform, <span class="hljs-literal">false</span>);<br><br>                controller = go.gameObject.GetComponent&lt;RoleController&gt;();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideMe</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (controller != <span class="hljs-literal">null</span>)<br>            &#123;<br>                Destroy(controller.gameObject);<br>                controller = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            PlayerModel.Data.RemoveEventListener(UpdateInfo);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这些代码展示了UnityMVC（Model-View-Controller）架构的思想。在这个架构中，Model层存储着游戏数据，View层渲染游戏对象，Controller层处理用户输入并修改Model和View层。</p><p>这个例子展示了不同层之间的通信方式。View层可以通过调用Controller层的方法来处理用户输入。Controller层可以调用Model层的方法来更新游戏数据。Model层通过事件的方式通知外部更新数据。这种方式可以使得不同层之间的耦合程度降低，代码更具有可读性和可维护性。 在这个例子中，MainView和RoleView通过调用Controller层的方法来处理用户输入。</p><p>例如，MainView中的btnRole按钮点击事件被MainController中的ClickBtnRole方法处理。MainController中的Start方法负责注册MainView中的按钮点击事件，以及注册PlayerModel中的数据更新事件。当PlayerModel中的数据发生变化时，它会通过事件的方式通知外部更新数据。MainController中的UpdateInfo方法负责更新MainView中的数据。</p><p>RoleView中的btnClose和btnLevUp按钮点击事件被RoleController中的ClickBtnClose和ClickLevUp方法处理。RoleController中的Start方法负责注册RoleView中的按钮点击事件，以及注册PlayerModel中的数据更新事件。当PlayerModel中的数据发生变化时，它会通过事件的方式通知外部更新数据。RoleController中的UpdateInfo方法负责更新RoleView中的数据。</p><p>PlayerModel中的数据更新事件被MainController和RoleController中的UpdateInfo方法处理。当PlayerModel中的数据发生变化时，它会通过事件的方式通知外部更新数据。MainController和RoleController中的UpdateInfo方法会更新相应的View层中的数据。</p><p>这种通信方式降低了不同层之间的耦合程度，使得代码更具有可读性和可维护性。</p><h2 id="MVX"><a href="#MVX" class="headerlink" title="MVX"></a>MVX</h2><p>MVC的美中不足</p><p>M和V之间存在着联系，也就是数据和界面之间存在着耦合性，当数据结构改变时会牵扯界面逻辑随之改动 在MVC中当需求变化时，需要维护的对象数量会增加</p><p>如上述 代码 修改数据Model 可能涉及View 和Controller 都要修改 是因为界面还存在耦合</p><p>MVX是一种设计模式，包括多个基于Model-View-Controller（MVC）模式的变体，例如Model-View-Presenter（MVP）、Model-View-ViewModel（MVVM）等。MVX的目标是进一步解耦软件系统的组件，使其更易于开发和维护。在MVX中，Model组件负责维护数据，View组件负责渲染用户界面，而Presenter&#x2F;ViewModel组件包含应用逻辑并处理用户输入。通过分离这些关注点，MVX使得修改、测试和重用软件系统的各个组件更加容易。</p><ul><li>MVP: 切断View和Model的耦合，让Presenter处理一切</li><li>MVVM: MVP的升级版，让ViewModel和V进行双向数据绑定，更新VM等同于更新V，反之同理</li><li>MVE: 用EventCenter事件中心来分发消息</li></ul><p>MVP（Model-View-Presenter）和MVX（Model-View-Anything）都是旨在进一步解耦软件组件，使其更易于维护和重用的设计模式。MVP将视图和模型组件的关注点分离，演示者作为中介，处理两者之间的所有交互。相比之下，MVX包含了MVC模式的几个变体，例如MVP和MVVM（Model-View-ViewModel），旨在分离模型、视图和应用程序逻辑组件的关注点。MVVM将其提升了一步，通过启用视图和视图模型之间的双向数据绑定，使视图模型的更新反映在视图中，反之亦然。</p><p>在UnityMVC的背景下，模型、视图和控制器组件之间的关注点分离有助于减少耦合并提高可维护性。采用MVP或MVVM，开发人员可以进一步解耦视图和模型组件，并改善其Unity项目的架构。</p><p>MVP和MVC有着一个重大的区别</p><p>在MVC中View会从Model中读取数据 而不通过Controller</p><img src="/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/image-20230918094623106.png" class="" title="image-20230918094623106"><p>而MVP则View不直接使用Model 它们之间的通讯都是通过Presenter来进行 所有交互都发生在Presenter内部</p><img src="/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/image-20230918094614107.png" class="" title="image-20230918094614107"><p>MVP的关键就是Presenter断绝View和Model之间的来往</p><p>接上面例子</p><p>重点在于 <strong><code>MainPresenter</code></strong> 代码中的UpdateInfo方法 直接将数据更新 断开Model和View的往来</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateInfo</span>(<span class="hljs-params">PlayerModel data</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (_mainView!=<span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-comment">// 这就是MVP模式的关键点 更新的数据可以直接在Presenter里处理 断绝 model和view的联系</span><br>        <span class="hljs-comment">// 而 MVC模式的关键点是 model和view的联系 将数据M传到V中左更新 现在全是用P来做</span><br>        _mainView.txtName.text = data.PlayerName;<br>        _mainView.txtLev.text = <span class="hljs-string">&quot;Lv.&quot;</span> + data.Lev;<br>        _mainView.txtMoney.text = data.Money.ToString();<br>        _mainView.txtGem.text = data.Gem.ToString();<br>        _mainView.txtPower.text = data.Power.ToString();<br>      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM (Model-View-ViewModel) 是一种基于MVC和MVP模式的UI架构模式。MVVM模式的目的是将UI逻辑与业务逻辑分离，。View和ViewModel。View是视图，负责展示数据和与用户交互；ViewModel是视图模型，负责处理业务逻辑和数据展示，将数据从Model中取出并转换为View可以显示的形式，同时也将用户的操作转换为Model可以理解的形式。</p><p>在MVVM模式中，View与ViewModel之间通过数据绑定进行通信，View可以直接访问ViewModel中的数据和方法，ViewModel中的数据和方法也可以直接影响View的状态。ViewModel中的数据和方法还可以与Model中的数据和方法进行通信，完成业务逻辑的处理。</p><p>在MVVM中，数据绑定是一种将视图和视图模型连接起来的技术，使得视图可以显示视图模型中的数据，并且视图模型可以更新视图中的数据。数据绑定是通过一些特定的语法来实现的，例如WPF中的绑定表达式。当视图模型中的数据发生变化时，数据绑定会自动更新视图中的数据，而当用户修改视图中的数据时，数据绑定会自动将修改同步到视图模型中的数据。</p><p>在MVVM中，视图和视图模型是分离的，它们通过数据绑定进行通信，而不是直接调用对方的方法或属性。</p><p>需要注意的是，在MVVM中，数据绑定应该只用于视图和视图模型之间的数据交互，而不应该使用在视图模型和模型之间的数据交互。视图模型和模型之间的交互应该通过其他机制实现，例如通过调用模型的方法或使用事件机制。这样可以保持MVVM的分离性，</p><h3 id="MVE"><a href="#MVE" class="headerlink" title="MVE"></a>MVE</h3><p>MVE为 模型 Model 视图 View 事件中心 EventCenter</p><p>Model负责数据 View负责界面 EventCenter负责数据传递</p><img src="/2023/09/18/Engine/MVC%E6%80%9D%E6%83%B3/image-20230918094556883.png" class="" title="image-20230918094556883">]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
      <tag>MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据持久化-Json</title>
    <link href="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-Json/"/>
    <url>/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-Json/</url>
    
    <content type="html"><![CDATA[<h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，常用于前后端数据传输和存储。它基于JavaScript的一个子集，但可以被多种编程语言解析和生成。JSON使用易于阅读和编写的文本格式，具有良好的可读性和可扩展性。</p><p>JSON由键值对组成，键是字符串，值可以是字符串、数字、布尔值、数组、对象或null。它可以表示简单的数据结构，如数字和字符串，也可以表示复杂的嵌套结构，如数组和对象。</p><p>JSON的常见用途包括Web应用程序中的数据传输，配置文件的存储和API的响应格式。它已成为一种广泛使用的数据交换格式，具有简洁、易于理解和易于处理的特点。</p><h3 id="Json的基本规则"><a href="#Json的基本规则" class="headerlink" title="Json的基本规则"></a>Json的基本规则</h3><p>![image-20230918094305574](数据持久化 -json&#x2F;image-20230918094305574.png)</p><p>注意事项</p><ol><li>如果数据表示对象那么最外层有大括号包裹</li><li>一定是键值对形式</li><li>键一定是字符串格式</li><li>键值对用逗号分开</li><li>数组用[] 包裹</li><li>对象用{} 包裹</li></ol><p>如有这么一个C#的类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>        <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; ids;<br>        <span class="hljs-keyword">public</span> List&lt;Person&gt; students;<br>        <span class="hljs-keyword">public</span> Home home;<br>        <span class="hljs-keyword">public</span> Person son;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Home</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> adress;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> street;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>    &#125;<br></code></pre></td></tr></table></figure><p>那么它对应的json数据就是 (字典的话 键会转为双引号 注意！！)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Heart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ids&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;easily&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sakura&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;street&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;朝阳区&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;son&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Item</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> num;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Item</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id,<span class="hljs-built_in">int</span> num</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>            <span class="hljs-keyword">this</span>.num = num;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> atk;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> def;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> moveSpeed;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> roundSpeed;<br>        <span class="hljs-keyword">public</span> Item weapon;<br>        <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; listInt;<br>        <span class="hljs-keyword">public</span> List&lt;Item&gt; ItemList;<br>        <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>, Item&gt; itemDic;<br>        <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Item&gt; ItemDic2;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> privateI = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> protrctedI = <span class="hljs-number">2</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Json格式为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Heart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;atk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;def&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;moveSpeed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5.5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;roundSpeed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.4</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;weapon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;listInt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;itemDic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ItemDic2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;棍&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;枪&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;privateI&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;protected&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>C#读取存储Json格式</p><h3 id="C-序列化Json-–-JsonUtility"><a href="#C-序列化Json-–-JsonUtility" class="headerlink" title="C#序列化Json  – JsonUtility"></a>C#序列化Json  – JsonUtility</h3><p>数据</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age, <span class="hljs-built_in">string</span> name</span>)</span><br>     &#123;<br>         <span class="hljs-keyword">this</span>.age = age;<br>         <span class="hljs-keyword">this</span>.name = name;<br>     &#125;<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyHeart</span><br> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> testF;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> testD;<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] array;<br>     <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; list;<br>     <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; dic;<br>     <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; dic2;<br>     <span class="hljs-keyword">public</span> Student s1;<br>     <span class="hljs-keyword">public</span> List&lt;Student&gt; s2;<br>     [<span class="hljs-meta">SerializeField</span>]<br>     <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> private1 = <span class="hljs-number">1</span>;<br>     [<span class="hljs-meta">SerializeField</span>]<br>     <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> protected1 = <span class="hljs-number">2</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>序列化代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">MyHeart h = <span class="hljs-keyword">new</span> MyHeart();<br> h.name = <span class="hljs-string">&quot; Heart&quot;</span>;<br> h.age = <span class="hljs-number">22</span>;<br> h.sex = <span class="hljs-literal">true</span>;<br> h.testF = <span class="hljs-number">1.1f</span>;<br> h.testD = <span class="hljs-number">2.2</span>;<br> h.array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br> h.list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;() &#123; <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span> &#125;;<br> h.dic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt;() &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;123&quot;</span> &#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;456&quot;</span> &#125; &#125;;<br> h.dic2 = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;() &#123; &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;123&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;456&quot;</span> &#125; &#125;;<br> h.s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Heart&quot;</span>);<br> h.s2 = <span class="hljs-keyword">new</span> List&lt;Student&gt;() &#123; <span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;easily&quot;</span>), <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Sakura&quot;</span>) &#125;;<br> <br> <span class="hljs-comment">//序列化前面数据</span><br> <span class="hljs-comment">//注意JsonUtility 序列化的时候在自定义类上要加上 [System.Serializable]</span><br> <span class="hljs-comment">//在私有变量上加上 [SerializeField]</span><br> <span class="hljs-comment">//JsonUtility 不支持字典</span><br> <span class="hljs-comment">//JsonUtility 存储null对象时不会为null 会变成默认值的数据</span><br> <span class="hljs-keyword">var</span> jsonStr = JsonUtility.ToJson(h);<br> File.WriteAllText(Application.persistentDataPath+<span class="hljs-string">&quot;/MyHeart.json&quot;</span>,jsonStr);<br> print(Application.persistentDataPath);<br></code></pre></td></tr></table></figure><p>反序列</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//读取文件中的json字符串</span><br>    jsonStr =File.ReadAllText(Application.persistentDataPath+<span class="hljs-string">&quot;/MyHeart.json&quot;</span>);<br>    <span class="hljs-comment">//反序列化 两种写法</span><br> <span class="hljs-comment">// MyHeart fromJson = JsonUtility.FromJson(jsonStr,typeof(MyHeart)) as MyHeart;</span><br>    MyHeart h3 = JsonUtility.FromJson&lt;MyHeart&gt;(jsonStr);<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>JsonUtility 无法直接读取数据集合 如果想要读取的话 一定是需要包裹在一个对象里面</p><p>Json的编码格式必须要是UTF-8 其他的会出问题</p><p>直接读取报错</p><p>![image-20230918094248353](数据持久化 -json&#x2F;image-20230918094248353.png)</p><p>像这样包裹一层</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;resName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Resources/1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;resName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Resources/2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;resName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Resources/3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;resName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Resources/4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>          <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;resName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Resources/5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>就能正常读取</p><p>![image-20230918094236782](数据持久化 -json&#x2F;image-20230918094236782.png)</p><p>知识点总结：</p><ul><li>FIle 读写 <code>ReadAllText</code>  <code>WriteAllText</code></li><li><code>JsonUtility</code> 序列化 <code>ToJson</code> 反序列化<code>FromJson</code></li><li>自定义类进行序列化需要加上特性 <em><code>[System.Serializable]</code></em>  <em><code>[SerializeField]</code></em></li><li><code>JsonUtility</code>  不支持字典</li><li>不能将数据直接反序列化为数据集合</li><li>编码格式必须为 UTF - 8</li></ul><h3 id="ListJson"><a href="#ListJson" class="headerlink" title="ListJson"></a>ListJson</h3><p>知识点</p><ul><li>相对<code>JsonUtility</code>  不需要加特性就能对自定义类等序列化</li><li>不能序列化私有变量</li><li>支持字典</li><li>可以准确的保存null值  序列化Api <code>JsonMapper.ToJson</code></li><li>反序列化Api<code>JsonMapper.ToObject</code></li><li><em><code>jsonData 是ListJson 提供的类对象 可以直接使用键值对的方式来获取 使用 数据</code></em></li><li><em><code>通过泛型去读取更加方便</code></em></li><li><em><code>注意 字典类型 因为json的原因 键 会变成string 所以int 类型的键 会变成string类型 报错</code></em></li><li>自定义类型*<code>必须 带 无参构造函数 因为lIstjson在反序列化的时候会去创建对象</code>*</li><li>ListJson可以直接读取数据集合</li><li>编码格式必须为 UTF - 8</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//ListJson 支持字典  空值就用空值 私有变量不会被序列化</span><br><span class="hljs-comment">//不需要加上 [System.Serializable] 和 [SerializeField]</span><br><span class="hljs-built_in">string</span> js= JsonMapper.ToJson(h2);<span class="hljs-comment">//第二个重载，我们可以自定义存储规则</span><br>File.WriteAllText(Application.persistentDataPath+<span class="hljs-string">&quot;/MyHeart2.json&quot;</span>,js);<br><br><span class="hljs-comment">//反序列化</span><br>js =File.ReadAllText(Application.persistentDataPath+<span class="hljs-string">&quot;/MyHeart2.json&quot;</span>);<br><span class="hljs-comment">//jsonData 是ListJson 提供的类对象 可以直接使用键值对的方式来获取 使用 数据</span><br>JsonData jsonData = JsonMapper.ToObject(js);<br>print(jsonData[<span class="hljs-string">&quot;name&quot;</span>]);<br>print(jsonData[<span class="hljs-string">&quot;age&quot;</span>]);<br><br><span class="hljs-comment">//通过泛型去读取更加方便</span><br><span class="hljs-comment">//注意 字典类型 因为json的原因 键 会变成string 所以int 类型的键 会变成string类型 报错</span><br><span class="hljs-comment">// 且必须 带 无参构造函数 因为lIstjson在反序列化的时候会去创建对象</span><br>MyHeart2 data = JsonMapper.ToObject&lt;MyHeart2&gt;(js);<br>print(data.name);<br>print(data.age);<br></code></pre></td></tr></table></figure><p>Json数据管理器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 序列化和反序列化Json时  使用的是哪种方案</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> JsonType<br>    &#123;<br>        JsonUtlity,<br>        LitJson,<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> Json数据管理类</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 用于 序列化和反序列化</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JsonManager</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JsonManager _instance = <span class="hljs-keyword">new</span> JsonManager();<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonManager Instance =&gt; _instance;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">JsonManager</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 存储数据 序列化</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> data, <span class="hljs-built_in">string</span> fileName, JsonType type = JsonType.LitJson</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//确定存储路径</span><br>            <span class="hljs-built_in">string</span> path = Application.persistentDataPath + <span class="hljs-string">&quot;/&quot;</span> + fileName + <span class="hljs-string">&quot;.json&quot;</span>;<br>            <span class="hljs-comment">//序列化 得到json 字符串</span><br>            <span class="hljs-built_in">string</span> jsonStr = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">switch</span> (type)<br>            &#123;<br>                <span class="hljs-keyword">case</span> JsonType.JsonUtlity:<br>                    jsonStr = JsonUtility.ToJson(data);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> JsonType.LitJson:<br>                    jsonStr = JsonMapper.ToJson(data);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//把序列化的Json存储到路径</span><br>            File.WriteAllText(path, jsonStr);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">LoadData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, JsonType type = JsonType.LitJson</span>) <span class="hljs-keyword">where</span> T: <span class="hljs-keyword">new</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//确定从哪个路径读取</span><br><br>            <span class="hljs-built_in">string</span> path = Application.streamingAssetsPath + <span class="hljs-string">&quot;/&quot;</span> + fileName + <span class="hljs-string">&quot;.json&quot;</span>;<br>            <span class="hljs-keyword">if</span> (!File.Exists(path))<br>                path = Application.persistentDataPath + <span class="hljs-string">&quot;/&quot;</span> + fileName + <span class="hljs-string">&quot;.json&quot;</span>;<br>            <br>            <span class="hljs-keyword">if</span> (!File.Exists(path))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> T();<br><br>            <span class="hljs-comment">//进行反序列化</span><br>            <span class="hljs-built_in">string</span> jsonStr = File.ReadAllText(path);<br>            T data =<span class="hljs-literal">default</span>(T);<br>            <span class="hljs-keyword">switch</span> (type)<br>            &#123;<br>                <span class="hljs-keyword">case</span> JsonType.JsonUtlity:<br>                    data = JsonUtility.FromJson&lt;T&gt;(jsonStr);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> JsonType.LitJson:<br>                    data = JsonMapper.ToObject&lt;T&gt;(jsonStr);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//把对象返回出去</span><br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
      <tag>技巧</tag>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据持久化-PlayerPrefs</title>
    <link href="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/"/>
    <url>/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/</url>
    
    <content type="html"><![CDATA[<h3 id="PlayerPrefs"><a href="#PlayerPrefs" class="headerlink" title="PlayerPrefs"></a>PlayerPrefs</h3><p>PlayerPrefs 的数据类型 类似于键值对存储 一个键对应一个值 (同一键名 不同类型就会覆盖数据)</p><p>提供了存储3种数据类型的方法 int float string</p><p>Set方法 直接调用只会把数据存到内存里 当游戏结束时 Unity会自动存储到硬盘中 但注意是要正常的游戏结束</p><p>Save调用该方法 就会立刻存到硬盘中</p><p>对数据的加密就是在原数据的基础上加上别的数据 在读取的时候减去这个数据 让别人不知道你的数据规则 他就无法在基础上得到你正确的数据</p><h3 id="数据存储位置"><a href="#数据存储位置" class="headerlink" title="数据存储位置"></a>数据存储位置</h3><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918093918549.png" class="" title="image-20230918093918549"><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918093959634.png" class="" title="image-20230918093959634"><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918094010033.png" class="" title="image-20230918094010033"><h3 id="练习题一："><a href="#练习题一：" class="headerlink" title="练习题一："></a>练习题一：</h3><p> 有玩家信息类 名字 年龄攻击力 防御力等成员 为其封装两个方法 一个用来 存储数据一个用来读取数据</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Player</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Atk;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Def;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>()</span><br>        &#123;<br>            PlayerPrefs.SetString(<span class="hljs-string">&quot;Name&quot;</span>, Name);<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;Age&quot;</span>, Age);<br>            PlayerPrefs.SetFloat(<span class="hljs-string">&quot;Atk&quot;</span>, Atk);<br>            PlayerPrefs.SetFloat(<span class="hljs-string">&quot;Def&quot;</span>, Def);<br>            PlayerPrefs.Save();<span class="hljs-comment">//存储</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Load</span>()</span><br>        &#123;<br>            Name = PlayerPrefs.GetString(<span class="hljs-string">&quot;Name&quot;</span>, <span class="hljs-string">&quot;Heart&quot;</span>);<br>            Age = PlayerPrefs.GetInt(<span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-number">18</span>);<br>            Atk = PlayerPrefs.GetFloat(<span class="hljs-string">&quot;Atk&quot;</span>, <span class="hljs-number">10.5f</span>);<br>            Def = PlayerPrefs.GetFloat(<span class="hljs-string">&quot;Def&quot;</span>, <span class="hljs-number">5.5f</span>);<br>        &#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestPrefs</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            Player p = <span class="hljs-keyword">new</span> Player();<br>            p.Load();<br>            print(p.Name);<br>            print(p.Age);<br>            print(p.Atk);<br>            print(p.Def);<br>            p.Name = <span class="hljs-string">&quot;easily&quot;</span>;<br>            p.Age = <span class="hljs-number">20</span>;<br>            p.Atk = <span class="hljs-number">9.5f</span>;<br>            p.Def = <span class="hljs-number">4.5f</span>;<br>            p.Save();<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918094025151.png" class="" title="image-20230918094025151"><h3 id="练习题二："><a href="#练习题二：" class="headerlink" title="练习题二："></a>练习题二：</h3><p>现在有装备信息类，装备类中有id，数量两个成员，上一题的玩家类中包含一个List存储了拥有的所有装备信息，请在上一题的基础上，把装备信息的存储和读取加上</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Item</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> num;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id;<br>    &#125;<br>--Save<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;ItemNum&quot;</span>, Itemlist.Count);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Itemlist.Count; i++)<br>            &#123;<br>                PlayerPrefs.SetInt(<span class="hljs-string">&quot;itemId&quot;</span> + i, Itemlist[i].id);<br>                PlayerPrefs.SetInt(<span class="hljs-string">&quot;itemNum&quot;</span> + i, Itemlist[i].num);<br>            &#125;<br><br>--Load<br><br>            <span class="hljs-built_in">int</span> num = PlayerPrefs.GetInt(<span class="hljs-string">&quot;ItemNum&quot;</span>, <span class="hljs-number">0</span>);<br>            Itemlist = <span class="hljs-keyword">new</span> List&lt;Item&gt;();<br>            Item item;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>            &#123;<br>                item = <span class="hljs-keyword">new</span> Item();<br>                item.id = PlayerPrefs.GetInt(<span class="hljs-string">&quot;itemId&quot;</span> + i);<br>                item.num = PlayerPrefs.GetInt(<span class="hljs-string">&quot;itemNum&quot;</span> + i);<br>                Itemlist.Add(item);<br>            &#125;<br><br>--初始化<br>             print(p.Itemlist.Count);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; p.Itemlist.Count; i++)<br>            &#123;<br>                print(<span class="hljs-string">&quot;道具ID&quot;</span> + p.Itemlist[i].id);<br>                print(<span class="hljs-string">&quot;道具数量&quot;</span> + p.Itemlist[i].num);<br>            &#125;<br><br>            Item item = <span class="hljs-keyword">new</span> Item();<br>            item.id = <span class="hljs-number">1</span>;<br>            item.num = <span class="hljs-number">1</span>;<br>            p.Itemlist.Add(item);<br>            item = <span class="hljs-keyword">new</span> Item();<br>            item.id = <span class="hljs-number">2</span>;<br>            item.num = <span class="hljs-number">2</span>;<br>            p.Itemlist.Add(item);<br><br>            p.Save();<br></code></pre></td></tr></table></figure><h3 id="练习题三："><a href="#练习题三：" class="headerlink" title="练习题三："></a>练习题三：</h3><p>一. 将知识点一中的练习题，改为可以支持存储多个玩家信息 不同的玩家 我们只需要在方法里传入KeyName</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//这个变量是应该存储和读取的一个唯一性标识</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _keyName;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>()</span><br>        &#123;<br>            PlayerPrefs.SetString(_keyName + <span class="hljs-string">&quot;Name&quot;</span>, Name);<br>            PlayerPrefs.SetInt(_keyName + <span class="hljs-string">&quot;Age&quot;</span>, Age);<br>            PlayerPrefs.SetFloat(_keyName + <span class="hljs-string">&quot;Atk&quot;</span>, Atk);<br>            PlayerPrefs.SetFloat(_keyName + <span class="hljs-string">&quot;Def&quot;</span>, Def);<br><br>            PlayerPrefs.SetInt(_keyName + <span class="hljs-string">&quot;ItemNum&quot;</span>, Itemlist.Count);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Itemlist.Count; i++)<br>            &#123;<br>                PlayerPrefs.SetInt(_keyName + <span class="hljs-string">&quot;itemId&quot;</span> + i, Itemlist[i].id);<br>                PlayerPrefs.SetInt(_keyName + <span class="hljs-string">&quot;itemNum&quot;</span> + i, Itemlist[i].num);<br>            &#125;<br><br>            PlayerPrefs.Save(); <span class="hljs-comment">//存储</span><br>        &#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918094037240.png" class="" title="image-20230918094037240"><p>这样就达到存储多个玩家信息的情况</p><p>二. 要在游戏中做一个排行榜功能，排行榜主要记录玩家名 (可重复),玩家得分，玩家通关时间请用PlayerPrefs存储读取排行榜相关信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 排行榜具体信息</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RankListInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> List&lt;RankInfo&gt; rankInfos;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RankListInfo</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//初始化</span><br>            Load();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> score, <span class="hljs-built_in">int</span> time</span>)</span><br>        &#123;<br>            rankInfos.Add(<span class="hljs-keyword">new</span> RankInfo(name, score, time));<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>()</span><br>        &#123;<br>            PlayerPrefs.SetInt(<span class="hljs-string">&quot;rankListNum&quot;</span>, rankInfos.Count);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; rankInfos.Count; i++)<br>            &#123;<br>                RankInfo info = rankInfos[i];<br>                PlayerPrefs.SetString(<span class="hljs-string">&quot;rankInfo&quot;</span> + i, info.PlayerName);<br>                PlayerPrefs.SetInt(<span class="hljs-string">&quot;rankScore&quot;</span> + i, info.PlayerScore);<br>                PlayerPrefs.SetInt(<span class="hljs-string">&quot;rankTime&quot;</span> + i, info.PlayerTime);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Load</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> num = PlayerPrefs.GetInt(<span class="hljs-string">&quot;rankListNum&quot;</span>, <span class="hljs-number">0</span>);<br>            rankInfos = <span class="hljs-keyword">new</span> List&lt;RankInfo&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>            &#123;<br>                RankInfo info = <span class="hljs-keyword">new</span> RankInfo(PlayerPrefs.GetString(<span class="hljs-string">&quot;rankInfo&quot;</span> + i), <br>                    PlayerPrefs.GetInt(<span class="hljs-string">&quot;rankScore&quot;</span> + i),<br>                    PlayerPrefs.GetInt(<span class="hljs-string">&quot;rankTime&quot;</span> + i));<br>                rankInfos.Add(info);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 排行榜单条信息</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RankInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> PlayerName;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> PlayerScore;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> PlayerTime;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RankInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> score, <span class="hljs-built_in">int</span> time</span>)</span><br>        &#123;<br>            PlayerName = name;<br>            PlayerScore = score;<br>            PlayerTime = time;<br>        &#125;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>RankListInfo info = <span class="hljs-keyword">new</span> RankListInfo();<br>            print(info.rankInfos.Count);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; info.rankInfos.Count; i++)<br>            &#123;<br>                print(<span class="hljs-string">&quot;姓名&quot;</span>+info.rankInfos[i].PlayerName);<br>                print(<span class="hljs-string">&quot;分数&quot;</span>+info.rankInfos[i].PlayerScore);<br>                print(<span class="hljs-string">&quot;时间&quot;</span>+info.rankInfos[i].PlayerTime);<br>            &#125;<br>            info.Add(<span class="hljs-string">&quot;Heart&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>);<br>            info.Save();<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918094049998.png" class="" title="image-20230918094049998"><h3 id="PlayerPrefs-适合存储一些对安全性要求不高的简单数据"><a href="#PlayerPrefs-适合存储一些对安全性要求不高的简单数据" class="headerlink" title="PlayerPrefs 适合存储一些对安全性要求不高的简单数据"></a>PlayerPrefs 适合存储一些对安全性要求不高的简单数据</h3><img src="/2023/09/18/Engine/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-PlayerPrefs/image-20230918094110595.png" class="" title="image-20230918094110595"><p>要使用反射进行数据持久化存储，可以使用<code>PlayerPrefs</code>结合<code>System.Reflection</code>命名空间中的相关类和方法。以下是一个示例代码，演示了如何使用反射将对象的属性存储到<code>PlayerPrefs</code>中，并从<code>PlayerPrefs</code>中加载属性值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs csharp">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 数据管理类 统一管理数据的读取和存储</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerPrefsDataMgr</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PlayerPrefsDataMgr _instance = <span class="hljs-keyword">new</span> PlayerPrefsDataMgr();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PlayerPrefsDataMgr Instance =&gt; _instance;<br><br>        <span class="hljs-comment">//私有构造 保证单例 让外部无法创建</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">PlayerPrefsDataMgr</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 存储数据</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;data&quot;&gt;</span> 数据对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;keyName&quot;&gt;</span>数据对象的唯一性<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> data, <span class="hljs-built_in">string</span> keyName</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//就是要通过Type得到传入数据的所有字段 然后结合PlayerPrefs进行存储</span><br>            Type dataType = data.GetType();<br>            <span class="hljs-keyword">var</span> infos = dataType.GetFields();<br>            <span class="hljs-built_in">string</span> saveKeyName = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; infos.Length; i++)<br>            &#123;<br>                FieldInfo info = infos[i]; <span class="hljs-comment">//获取字段</span><br>                <span class="hljs-comment">//定义数据的存储规则 通过数据的类型和数据的唯一性来进行存储</span><br>                <span class="hljs-comment">//keyname_字段类型_字段名字</span><br>                saveKeyName = keyName + <span class="hljs-string">&quot;_&quot;</span> + dataType.Name + <span class="hljs-string">&quot;_&quot;</span> + info.Name;<br>                SaveValue(info.GetValue(data), saveKeyName);<br>            &#125;<br><br>            PlayerPrefs.Save();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveValue</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> <span class="hljs-keyword">value</span>, <span class="hljs-built_in">string</span> keyName</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//直接使用PlayerPrefs进行存储 根据数据类型的不同来决定存储类型 int float string </span><br>            <span class="hljs-keyword">var</span> fieldType = <span class="hljs-keyword">value</span>.GetType();<br>            <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">int</span>))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;存储int类型&quot;</span> + <span class="hljs-keyword">value</span>);<br>                PlayerPrefs.SetInt(keyName, (<span class="hljs-built_in">int</span>)<span class="hljs-keyword">value</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">float</span>))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;存储float类型&quot;</span> + <span class="hljs-keyword">value</span>);<br>                PlayerPrefs.SetFloat(keyName, (<span class="hljs-built_in">float</span>)<span class="hljs-keyword">value</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;存储string类型&quot;</span> + <span class="hljs-keyword">value</span>);<br>                PlayerPrefs.SetString(keyName, (<span class="hljs-built_in">string</span>)<span class="hljs-keyword">value</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;存储bool类型&quot;</span> + <span class="hljs-keyword">value</span>);<br>                PlayerPrefs.SetInt(keyName, (<span class="hljs-built_in">bool</span>)<span class="hljs-keyword">value</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IList).IsAssignableFrom(fieldType))<br>            &#123;<br>                <span class="hljs-comment">//父类装子类 通过父类来确定泛型的类型</span><br>                Debug.Log(<span class="hljs-string">&quot;存储List类型&quot;</span> + keyName);<br>                IList list = <span class="hljs-keyword">value</span> <span class="hljs-keyword">as</span> IList;<br>                PlayerPrefs.SetInt(keyName, list.Count);<br>                <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> obj <span class="hljs-keyword">in</span> list)<br>                &#123;<br>                    <span class="hljs-comment">//存储具体的值</span><br>                    SaveValue(obj, keyName + index);<br>                    ++index;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IDictionary).IsAssignableFrom(fieldType))<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;存储Dictionary类型&quot;</span> + keyName);<br>                IDictionary dic = <span class="hljs-keyword">value</span> <span class="hljs-keyword">as</span> IDictionary;<br>                PlayerPrefs.SetInt(keyName, dic.Count);<br>                <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> obj <span class="hljs-keyword">in</span> dic.Keys) <span class="hljs-comment">//要遍历的是key</span><br>                &#123;<br>                    SaveValue(obj, keyName + <span class="hljs-string">&quot;_key_&quot;</span> + index);<br>                    SaveValue(dic[obj], keyName + <span class="hljs-string">&quot;_value_&quot;</span> + index);<br>                    ++index;<br>                &#125;<br>            &#125; <span class="hljs-comment">//判断是不是自定义类</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                SaveData(<span class="hljs-keyword">value</span>, keyName);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 读取数据 </span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;data&quot;&gt;</span>想要读取数据的 数据类型<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;keyName&quot;&gt;</span>数据对象的唯一性<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">object</span> <span class="hljs-title">LoadData</span>(<span class="hljs-params">Type type, <span class="hljs-built_in">string</span> keyName</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//不用object传入 而用Type 传入 主要节约一行代码(在外部)</span><br>            <span class="hljs-comment">//假设你要读取一个player 数据 如果是object 就必须在外部 new对象传入</span><br>            <span class="hljs-comment">//如果是Type 只需要传入 typeof(Player) 就可以了 就能在内部创建 达到在外部少些一行代码的目的</span><br><br>            <span class="hljs-comment">//根据传入的类型和keyName 依据存储数据和 key的规则 来进行数据的获取赋值 然后返回出去</span><br>            <span class="hljs-built_in">object</span> data = Activator.CreateInstance(type);<br>            <span class="hljs-keyword">var</span> infos = type.GetFields();<br>            <span class="hljs-built_in">string</span> loadName = <span class="hljs-string">&quot;&quot;</span>;<br>            FieldInfo info;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; infos.Length; i++)<br>            &#123;<br>                info = infos[i];<br>                loadName = keyName + <span class="hljs-string">&quot;_&quot;</span> + type.Name + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> + info.FieldType.Name + <span class="hljs-string">&quot;_&quot;</span> + info.Name;<br>                info.SetValue(data, LoadValue(info.FieldType, loadName));<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">object</span> <span class="hljs-title">LoadValue</span>(<span class="hljs-params">Type fieldType, <span class="hljs-built_in">string</span> keyName</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">int</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> PlayerPrefs.GetInt(keyName, <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">float</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> PlayerPrefs.GetFloat(keyName, <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> PlayerPrefs.GetString(keyName, <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fieldType == <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> PlayerPrefs.GetInt(keyName, <span class="hljs-number">0</span>) == <span class="hljs-number">1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IList).IsAssignableFrom(fieldType))<br>            &#123;<br>                <span class="hljs-comment">//得到长度</span><br>                <span class="hljs-built_in">int</span> count = PlayerPrefs.GetInt(keyName, <span class="hljs-number">0</span>);<br>                IList list = Activator.CreateInstance(fieldType) <span class="hljs-keyword">as</span> IList;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>                &#123;<br>                    list.Add(LoadValue(fieldType.GetGenericArguments()[<span class="hljs-number">0</span>], keyName + i));<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> list;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IDictionary).IsAssignableFrom(fieldType))<br>            &#123;<br>                <span class="hljs-built_in">int</span> count = PlayerPrefs.GetInt(keyName, <span class="hljs-number">0</span>);<br>                IDictionary dic = Activator.CreateInstance(fieldType) <span class="hljs-keyword">as</span> IDictionary;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>                &#123;<br>                    dic.Add(LoadValue(fieldType.GetGenericArguments()[<span class="hljs-number">0</span>], keyName + <span class="hljs-string">&quot;_key_&quot;</span> + i),<br>                        LoadValue(fieldType.GetGenericArguments()[<span class="hljs-number">1</span>], keyName + <span class="hljs-string">&quot;_value_&quot;</span> + i));<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> dic;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> LoadData(fieldType, keyName);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name = <span class="hljs-string">&quot;Heart&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age = <span class="hljs-number">22</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Height = <span class="hljs-number">170</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Sex = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;() &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br><br>        <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; dic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt;()<br>        &#123;<br>            &#123; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;123&quot;</span> &#125;,<br>            &#123; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;456&quot;</span> &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">public</span> ItemInfo ItemInfo = <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">3</span>, <span class="hljs-number">99</span>);<br><br>        <span class="hljs-keyword">public</span> List&lt;ItemInfo&gt; itemList = <span class="hljs-keyword">new</span> List&lt;ItemInfo&gt;()<br>        &#123;<br>            <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>),<br>            <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>)<br>        &#125;;<br><br>        <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>, ItemInfo&gt; dics = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, ItemInfo&gt;()<br>        &#123;<br>            &#123; <span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">3</span>, <span class="hljs-number">22</span>) &#125;,<br>            &#123; <span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">4</span>, <span class="hljs-number">44</span>) &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ItemInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> num;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ItemInfo</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//要记得写无参构造</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ItemInfo</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id, <span class="hljs-built_in">int</span> num</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>            <span class="hljs-keyword">this</span>.num = num;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//读取数据</span><br>            PlayerInfo p = PlayerPrefsDataMgr.Instance.LoadData(<span class="hljs-keyword">typeof</span>(PlayerInfo), <span class="hljs-string">&quot;Player1&quot;</span>) <span class="hljs-keyword">as</span> PlayerInfo;<br><br>            <span class="hljs-comment">//游戏逻辑中 会去 修改这个玩家数据</span><br>            p.Age = <span class="hljs-number">18</span>;<br>            p.Name = <span class="hljs-string">&quot;easily&quot;</span>;<br>            p.Height = <span class="hljs-number">1000</span>;<br>            p.Sex = <span class="hljs-literal">true</span>;<br><br>            p.itemList.Add(<span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">1</span>, <span class="hljs-number">99</span>));<br>            p.itemList.Add(<span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">2</span>, <span class="hljs-number">199</span>));<br><br>            p.dics.Add(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>));<br>            p.dics.Add(<span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> ItemInfo(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>));<br>            <br>            <span class="hljs-comment">//保存数据</span><br>            PlayerPrefsDataMgr.Instance.SaveData(p, <span class="hljs-string">&quot;Player1&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过使用<code>PlayerPrefsDataMgr.``SaveData</code>方法，可以将<code>Player</code>对象的属性存储到<code>PlayerPrefs</code>中。然后，使用<code>PlayerPrefsUtils.``LoadData</code>方法，可以从<code>PlayerPrefs</code>中加载属性值，并将其赋值给<code>Player</code>对象。</p>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
      <tag>技巧</tag>
      
      <tag>PlayerPrefs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xlua</title>
    <link href="/2023/05/04/Lua/Xlua/"/>
    <url>/2023/05/04/Lua/Xlua/</url>
    
    <content type="html"><![CDATA[<h1 id="XLua"><a href="#XLua" class="headerlink" title="XLua"></a>XLua</h1><p>xLua是用来实现Lua代码与C#代码相互调用的插件。我们可以借助这个插件来实现热更新方案。</p><p>可以运行时把C#实现（方法，操作符，属性，事件，构造函数，析构函数，支持泛化）替换成lua实现<br>为Unity提供Lua编程能力，让C#和Lua可以相互调用访问</p><p>热更新原理：</p><p><img src="http://fussen.top/photo/image-20230607210704674.png"></p><blockquote><p>万物 Hello World</p></blockquote><p>在C#中运行Lua代码首先我们要创建Lua运行环境，XLua中有一个LuaEnv可供我们使用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br><span class="hljs-comment">//打印字符串 可传入三个参数 内容, 哪个脚本, 哪个解析器   </span><br>luaEnv.DoString(<span class="hljs-string">&quot;print(&#x27;HelloWord&#x27;)&quot;</span>);<br></code></pre></td></tr></table></figure><p>XLua常用方法：</p><ul><li>DoString</li></ul><h2 id="Xlua的配置"><a href="#Xlua的配置" class="headerlink" title="Xlua的配置"></a>Xlua的配置</h2><p><code>xLua</code>所有的配置都支持三种方式：打标签、静态列表、动态列表。</p><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><p>其中打标签的方式最常用。您可以在字段、属性、方法、类、结构体、枚举等定义之前使用<code>XLua.LuaCallCSharpAttribute</code>打标签。例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">XLua.LuaCallCSharp</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleClass</span> &#123;<br>    [<span class="hljs-meta">XLua.CSharpCallLua</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleDelegate</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleMethod</span>(<span class="hljs-params">ExampleDelegate callback</span>)</span> &#123;<br>        callback(<span class="hljs-string">&quot;Hello from C#!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>XLua.LuaCallCSharpAttribute</code>标记了<code>ExampleClass</code>，表示该类中的所有方法、属性等都可以从Lua中调用。<code>XLua.CSharpCallLuaAttribute</code>标记了<code>ExampleDelegate</code>，表示该委托定义可以从Lua代码中调用。</p><p>然后，您可以在Lua中使用以下代码调用C#：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> example = <span class="hljs-built_in">require</span> <span class="hljs-string">&#x27;example&#x27;</span><br>example.ExampleMethod(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(message)</span></span><br>    <span class="hljs-built_in">print</span>(message)<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>这将打印“Hello from C#！”</p><h4 id="静态列表"><a href="#静态列表" class="headerlink" title="静态列表"></a>静态列表</h4><p>有时我们无法直接给一个类型打标签，比如系统api、没源码的库或者实例化的泛化类型，这时你可以在一个静态类里声明一个静态字段，该字段的类型除<code>BlackList</code>和<code>AdditionalProperties</code>之外只要实现了<code>IEnumerable&lt;Type&gt;</code>就可以了（这两个例外后面具体会说），然后为这字段加上标签：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">XLua.LuaCallCSharp</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Type&gt; mymodule_lua_call_cs_list = <span class="hljs-keyword">new</span> List&lt;Type&gt;()<br>&#123;<br>    <span class="hljs-keyword">typeof</span>(GameObject),<br>    <span class="hljs-keyword">typeof</span>(Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;),<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个字段需要放到一个静态类里头，建议放到<code>Editor</code>目录。</p><h4 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h4><p>声明一个静态属性，打上相应的标签即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Hotfix</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Type&gt; by_property<br>&#123;<br>    <span class="hljs-keyword">get</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">from</span> type <span class="hljs-keyword">in</span> Assembly.GetExecutingAssembly().GetTypes()<br>                <span class="hljs-keyword">where</span> type.Namespace == <span class="hljs-string">&quot;XXXX&quot;</span><br>                <span class="hljs-keyword">select</span> type).ToList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Getter</code>是代码，你可以实现很多效果，比如按名字空间配置，按程序集配置等等。</p><p>以下是一些常用的配置：</p><ul><li><code>XLua.LuaCallCSharp</code>：允许从Lua中调用C#代码。</li><li><code>XLua.CSharpCallLua</code>：允许从C#中调用Lua代码。</li><li><code>XLua.ReflectionUse</code>：启用反射支持。</li><li><code>XLua.BlackList</code>：指定不能从Lua中调用或访问的类型。</li><li><code>XLua.BlackList</code>：指定可以从Lua中调用或访问的类型。</li><li><code>Xlua.GCoptimize</code> 配置选项可用于优化垃圾回收。启用此选项后，它将减少Lua虚拟机执行的垃圾回收次数，从而提高性能。但是，它也可能会增加内存使用量。要启用此选项，请将 <code>LuaEnv</code> 实例的 <code>GC</code> 字段设置为 <code>LuaGCOptions.LUA_GCINC</code>。</li><li><code>XLua.AdditionalProperties</code>是一种配置方式，可以用于指定应从Lua中调用的附加属性。这些属性可以是C#类的任何公共属性，方法或字段。</li></ul><p>以下是一个示例，显示如何使用<code>AdditionalProperties</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">LuaCallCSharp</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ExampleProperty &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleMethod</span>()</span> &#123; &#125;<br><br>    [<span class="hljs-meta">CSharpCallLua</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleDelegate</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;<br><br>    [<span class="hljs-meta">LuaCallCSharp</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExampleClass instance;<br><br>    [<span class="hljs-meta">LuaCallCSharp</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> exampleIntField;<br><br>    [<span class="hljs-meta">LuaCallCSharp</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleStaticMethod</span>()</span> &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>XLua.LuaCallCSharpAttribute</code>标记了<code>ExampleClass</code>，表示该类中的所有方法、属性等都可以从Lua中调用。<code>XLua.AdditionalPropertiesAttribute</code>标记了<code>ExampleClass.instance</code>，<code>ExampleClass.exampleIntField</code>和<code>ExampleClass.ExampleStaticMethod</code>，表示这些属性是可以从Lua中调用的。</p><p>然后，您可以在Lua中使用以下代码调用C#：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> example = <span class="hljs-built_in">require</span> <span class="hljs-string">&#x27;example&#x27;</span><br><br><span class="hljs-comment">-- 调用属性</span><br>example.ExampleProperty = <span class="hljs-number">42</span><br><span class="hljs-built_in">print</span>(example.ExampleProperty)<br><br><span class="hljs-comment">-- 调用方法</span><br>example.ExampleMethod()<br><br><span class="hljs-comment">-- 调用静态属性</span><br>example.exampleIntField = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(example.exampleIntField)<br><br><span class="hljs-comment">-- 调用静态方法</span><br>example.ExampleStaticMethod()<br></code></pre></td></tr></table></figure><p>请注意，如果您使用<code>AdditionalProperties</code>，请务必小心防范恶意代码注入和安全漏洞。</p><h3 id="Lua与C-之间的通讯"><a href="#Lua与C-之间的通讯" class="headerlink" title="Lua与C#之间的通讯"></a>Lua与C#之间的通讯</h3><h4 id="C-调用Lua"><a href="#C-调用Lua" class="headerlink" title="C#调用Lua"></a>C#调用Lua</h4><p>使用<code>LuaEnv</code>实例的<code>Global</code>属性，可以获取一个<code>LuaTable</code>对象，该对象表示Lua全局变量。您可以使用该对象调用Lua函数，读取和写入Lua变量等。</p><p>以下是一个示例，显示如何使用<code>LuaTable</code>调用Lua函数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> XLua;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;function example_function() print(&#x27;Hello from Lua!&#x27;) end&quot;</span>);<br>        LuaTable <span class="hljs-keyword">global</span> = luaEnv.Global;<br>        <span class="hljs-keyword">global</span>.Get(<span class="hljs-string">&quot;example_function&quot;</span>, <span class="hljs-keyword">out</span> LuaFunction exampleFunction);<br>        exampleFunction.Action();<br>        exampleFunction.Dispose();<br>        luaEnv.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用<code>LuaEnv</code>实例的<code>DoString</code>方法执行了一段Lua代码，该代码定义了一个名为<code>example_function</code>的函数。然后，我们获取了全局<code>LuaTable</code>对象，并使用该对象的<code>Get</code>方法获取<code>example_function</code>函数的引用。最后，我们通过<code>Action</code>方法调用了该函数。</p><p>以下是一个示例，显示如何使用<code>LuaTable</code>读取和写入Lua变量：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> XLua;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;example_variable = 42&quot;</span>);<br>        LuaTable <span class="hljs-keyword">global</span> = luaEnv.Global;<br>        <span class="hljs-keyword">global</span>.Get(<span class="hljs-string">&quot;example_variable&quot;</span>, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> exampleVariable);<br>        Debug.Log(<span class="hljs-string">&quot;Example variable: &quot;</span> + exampleVariable);<br>        <span class="hljs-keyword">global</span>.Set(<span class="hljs-string">&quot;example_variable&quot;</span>, <span class="hljs-string">&quot;Hello from C#!&quot;</span>);<br>        luaEnv.DoString(<span class="hljs-string">&quot;print(example_variable)&quot;</span>);<br>        luaEnv.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用<code>LuaEnv</code>实例的<code>DoString</code>方法执行了一段Lua代码，该代码为<code>example_variable</code>赋值。然后，我们获取了全局<code>LuaTable</code>对象，并使用该对象的<code>Get</code>方法获取<code>example_variable</code>的值。接着，我们使用<code>Set</code>方法将<code>example_variable</code>的值更改为<code>Hello from C#!</code>。最后，我们使用<code>DoString</code>方法执行了一段Lua代码，该代码打印了<code>example_variable</code>的值。</p><h5 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h5><p>以下是C#和Lua之间支持的基本类型：</p><table><thead><tr><th>C#类型</th><th>Lua类型</th></tr></thead><tbody><tr><td>bool</td><td>boolean</td></tr><tr><td>byte</td><td>number</td></tr><tr><td>sbyte</td><td>number</td></tr><tr><td>char</td><td>string</td></tr><tr><td>short</td><td>number</td></tr><tr><td>ushort</td><td>number</td></tr><tr><td>int</td><td>number</td></tr><tr><td>uint</td><td>number</td></tr><tr><td>long</td><td>number</td></tr><tr><td>ulong</td><td>number</td></tr><tr><td>float</td><td>number</td></tr><tr><td>double</td><td>number</td></tr><tr><td>decimal</td><td>number</td></tr><tr><td>string</td><td>string</td></tr></tbody></table><h5 id="Table类型"><a href="#Table类型" class="headerlink" title="Table类型"></a>Table类型</h5><p>您可以使用<code>LuaTable</code>对象在C#和Lua之间传递表数据。<code>LuaTable</code>对象表示Lua表，可以通过索引或键&#x2F;值对的方式访问其中的数据。</p><p>以下是一个示例，显示如何在C#和Lua之间传递表数据：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> XLua;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;example_table = &#123; name = &#x27;John Smith&#x27;, age = 42 &#125;&quot;</span>);<br>        LuaTable <span class="hljs-keyword">global</span> = luaEnv.Global;<br>        <span class="hljs-keyword">global</span>.Get(<span class="hljs-string">&quot;example_table&quot;</span>, <span class="hljs-keyword">out</span> LuaTable exampleTable);<br>        Debug.Log(<span class="hljs-string">&quot;Name: &quot;</span> + exampleTable.Get&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;name&quot;</span>));<br>        Debug.Log(<span class="hljs-string">&quot;Age: &quot;</span> + exampleTable.Get&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-string">&quot;age&quot;</span>));<br>        exampleTable.Set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jane Doe&quot;</span>);<br>        luaEnv.DoString(<span class="hljs-string">&quot;print(example_table.name)&quot;</span>);<br>        exampleTable.Dispose();<br>        luaEnv.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用<code>LuaEnv</code>实例的<code>DoString</code>方法执行了一段Lua代码，该代码定义了一个名为<code>example_table</code>的表。然后，我们获取了全局<code>LuaTable</code>对象，并使用该对象的<code>Get</code>方法获取<code>example_table</code>表的引用。接着，我们使用<code>Get</code>方法获取<code>name</code>和<code>age</code>的值，并使用<code>Set</code>方法将<code>name</code>的值更改为<code>Jane Doe</code>。最后，我们使用<code>DoString</code>方法执行了一段Lua代码，该代码打印了<code>example_table.name</code>的值。</p><h5 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h5><p>在C#中，您可以使用<code>Action</code>或<code>Func</code>泛型类将Lua函数映射为<code>Delegate</code>。例如，要映射到一个不带参数并且不返回值的Lua函数，请使用不带类型参数的<code>Action</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> XLua;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;function example_function() print(&#x27;Hello from Lua!&#x27;) end&quot;</span>);<br>        LuaTable <span class="hljs-keyword">global</span> = luaEnv.Global;<br>        <span class="hljs-keyword">global</span>.Get(<span class="hljs-string">&quot;example_function&quot;</span>, <span class="hljs-keyword">out</span> LuaFunction exampleFunction);<br>        Action action = exampleFunction.Cast&lt;Action&gt;();<br>        action();<br>        exampleFunction.Dispose();<br>        luaEnv.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用<code>Cast</code>将<code>LuaFunction</code>转换为<code>Action</code>，这样我们就可以将其作为委托来调用函数。</p><p>要映射到一个带有一个或多个参数并且返回一个值的Lua函数，请使用适当类型参数的<code>Func</code>。例如，要映射到一个将两个整数相加并返回它们的和的Lua函数，请使用<code>Func&lt;int, int, int&gt;</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> XLua;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;function example_function(x, y) return x + y end&quot;</span>);<br>        LuaTable <span class="hljs-keyword">global</span> = luaEnv.Global;<br>        <span class="hljs-keyword">global</span>.Get(<span class="hljs-string">&quot;example_function&quot;</span>, <span class="hljs-keyword">out</span> LuaFunction exampleFunction);<br>        Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt; func = exampleFunction.Cast&lt;Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt;&gt;();<br>        <span class="hljs-built_in">int</span> result = func(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        Debug.Log(<span class="hljs-string">&quot;Result: &quot;</span> + result);<br>        exampleFunction.Dispose();<br>        luaEnv.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用<code>Cast</code>将<code>LuaFunction</code>转换为<code>Func&lt;int, int, int&gt;</code>，这样我们就可以使用两个整数参数调用该函数并接收一个整数结果。</p><h3 id="Lua调用C"><a href="#Lua调用C" class="headerlink" title="Lua调用C#"></a>Lua调用C#</h3><p>使用<code>XLua</code>库，您可以轻松地从Lua脚本中调用C#方法、属性和字段。</p><p>假设有一个C#类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SayHello</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span> &#123;<br>        Debug.Log(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>您可以在Lua脚本中调用该方法，如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> example = CS.Example()<br>example:SayHello(<span class="hljs-string">&quot;World&quot;</span>)<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们首先创建了一个名为<code>example</code>的C#对象。然后，我们调用了<code>SayHello</code>方法，将<code>&quot;World&quot;</code>作为参数传递。请注意，使用<code>:</code>而不是<code>.</code>来调用方法。</p><p>您也可以从Lua脚本中调用C#属性和字段。以下是一个示例，显示如何在Lua脚本中访问C#属性和字段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> exampleIntProperty &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> exampleIntField;<br>&#125;<br>local example = CS.Example()<br>example.exampleIntProperty = <span class="hljs-number">42</span><br>print(example.exampleIntProperty)<br>example.exampleIntField = <span class="hljs-number">123</span><br>print(example.exampleIntField)<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们首先创建了一个名为<code>example</code>的C#对象。然后，我们将<code>exampleIntProperty</code>属性设置为<code>42</code>，并使用<code>print</code>函数输出该属性的值。接着，我们将<code>exampleIntField</code>字段设置为<code>123</code>，并使用<code>print</code>函数输出该字段的值。</p><p>ref和Out参</p><p><strong>RefOutParam.lua.txt</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> RefOutParam = CS.UnityEngine.Object.FindObjectOfType(typeof(CS.RefOutParam))<br><br><span class="hljs-comment">-- 1. out参数不需要传入实参</span><br><span class="hljs-comment">-- 2. 返回值顺序：如果函数有返回值，那么第一个是函数返回值。其他的都是ref和out参数的传出值，按顺序传出。</span><br><span class="hljs-comment">-- 3. 如果函数没有返回值，那么按顺序返回ref和out参数。</span><br><br><span class="hljs-keyword">local</span> a, b, c = RefOutParam:RefOutParamFunc(<span class="hljs-string">&quot;XX&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Lua Return:&quot;</span>, a, b, c)<br></code></pre></td></tr></table></figure><p><strong>RefOutParam.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RefOutParam</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span> ()</span> &#123;<br>        LuaEnv luaEnv = <span class="hljs-keyword">new</span> LuaEnv();<br>        luaEnv.DoString(<span class="hljs-string">&quot;require &#x27;RefOutParam&#x27;&quot;</span>);<br>        luaEnv.Dispose();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RefOutParamFunc</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s, <span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> a, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> b, <span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> c</span>)</span><br>    &#123;<br>        b = <span class="hljs-number">1</span>;<br>        Debug.Log(<span class="hljs-string">&quot;s: &quot;</span> + s + <span class="hljs-string">&quot;, a: &quot;</span> + a + <span class="hljs-string">&quot;, b: &quot;</span> + b + <span class="hljs-string">&quot;, c: &quot;</span> + c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从Lua脚本中调用C#的各种重载方法和运算符。</p><p>要调用重载方法，您需要在Lua脚本中指定方法的签名。您可以使用<code>System.Type</code>类和<code>typeof</code>运算符来实现这一点。以下是调用具有一个字符串参数和一个整数参数的重载方法的示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> example = CS.ExampleClass()<br><span class="hljs-keyword">local</span> stringParameter = <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-keyword">local</span> intParameter = <span class="hljs-number">42</span><br><span class="hljs-keyword">local</span> parameterTypes = &#123; typeof(CS.System.String), typeof(CS.System.Int32) &#125;<br><span class="hljs-keyword">local</span> method = example:GetType():GetMethod(<span class="hljs-string">&quot;ExampleMethod&quot;</span>, parameterTypes)<br>method:Invoke(example, &#123; stringParameter, intParameter &#125;)<br></code></pre></td></tr></table></figure><p>在此示例中，我们首先创建了一个<code>ExampleClass</code> C#类的实例，并定义了两个参数<code>stringParameter</code>和<code>intParameter</code>。然后，我们使用<code>System.Type</code>类定义一个参数类型的数组，使用<code>GetMethod</code>方法获取到正确方法的引用。最后，我们使用<code>Invoke</code>方法带上参数调用该方法。</p><p>要调用重载运算符，您可以使用<code>XLua.ObjectCast</code>方法将运算符转换为具有正确签名的委托类型。以下是使用两个整数参数调用加法运算符的示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> example = CS.ExampleClass()<br><span class="hljs-keyword">local</span> intParameter1 = <span class="hljs-number">1</span><br><span class="hljs-keyword">local</span> intParameter2 = <span class="hljs-number">2</span><br><span class="hljs-keyword">local</span> additionOperator = example.GetType():GetMethod(<span class="hljs-string">&quot;op_Addition&quot;</span>)<br><span class="hljs-keyword">local</span> functionDelegate = XLua.ObjectCast(additionOperator, typeof(CS.System.Func_CS.System.Int32_CS.System.Int32_CS.System.Int32))<br><span class="hljs-keyword">local</span> result = functionDelegate(intParameter1, intParameter2)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>在此示例中，我们首先创建了一个<code>ExampleClass</code> C#类的实例，并定义了两个整数参数<code>intParameter1</code>和<code>intParameter2</code>。然后，我们使用<code>GetMethod</code>方法获取到加法运算符的引用，并使用<code>XLua.ObjectCast</code>方法将其转换为委托类型。最后，我们调用委托以对两个参数执行加法运算，并输出结果。</p><p>请注意，当调用重载方法和运算符时，您需要指定要调用的方法或运算符的正确签名，否则会在运行时引发异常。</p><h3 id="HotFix-热补丁"><a href="#HotFix-热补丁" class="headerlink" title="HotFix 热补丁"></a>HotFix 热补丁</h3><p><img src="http://fussen.top/photo/image-20230905204500967.png"></p><p><img src="http://fussen.top/photo/image-20230905213514087.png"></p>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Lua</tag>
      
      <tag>热更新</tag>
      
      <tag>Xlua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua</title>
    <link href="/2023/04/03/Lua/Lua/"/>
    <url>/2023/04/03/Lua/Lua/</url>
    
    <content type="html"><![CDATA[<h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><h4 id="类型与值"><a href="#类型与值" class="headerlink" title="类型与值"></a>类型与值</h4><p>lua是一种动态类型的语言，并没有类型定义的语法，每个值都携带<strong>类型</strong>的信息</p><p>函数<strong>type</strong> 可根据传入的值返回其类型</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua">                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;Hello wold&quot;</span>))        <span class="hljs-comment">-- string</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">10.4</span>*<span class="hljs-number">3</span>))              <span class="hljs-comment">-- number</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">print</span>))               <span class="hljs-comment">-- function</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">type</span>))                <span class="hljs-comment">-- function</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">true</span>))                <span class="hljs-comment">-- boolean</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">nil</span>))                 <span class="hljs-comment">-- nil</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">type</span>(X)))             <span class="hljs-comment">-- string</span><br><br><br>变量没有预定义的类型，任何类型值都可以包含进变量<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                <span class="hljs-comment">-- nil （a尚未初始化）</span><br>                a = <span class="hljs-number">10</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                <span class="hljs-comment">-- number</span><br>                a = <span class="hljs-string">&quot;a string!!&quot;</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                <span class="hljs-comment">-- string</span><br>                a = <span class="hljs-built_in">print</span>                     <span class="hljs-comment">-- 是的，这是合法的！</span><br>                a(<span class="hljs-built_in">type</span>(a))                    <span class="hljs-comment">-- function</span><br><br></code></pre></td></tr></table></figure><ul><li>其中 boolean不是一个条件值的唯一表现形式 false 和nil 都被视为nil</li><li>Number类型值可以是32位的 0.3e12 ， 5e+20 都是合法值</li><li>string 我们可以使用 字符# 来获取字符串长度</li></ul><p>string常用API：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua">str=<span class="hljs-string">&quot;abcdefg&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">upper</span>(str)) <span class="hljs-comment">--小转大</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">lower</span>(str)) <span class="hljs-comment">--大转小</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">reverse</span>(str)) <span class="hljs-comment">--翻转</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(str,<span class="hljs-string">&quot;cd&quot;</span>)) <span class="hljs-comment">--查找 按索引查找 按1开始</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(str,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment">--截取 按索引查找  索引按1开始</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">rep</span>(str,<span class="hljs-number">2</span>)) <span class="hljs-comment">--重复</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(str,<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;QW&quot;</span>)) <span class="hljs-comment">--修改 第二个参数是修改了多少次</span><br><span class="hljs-comment">--别的类型转字符串</span><br>a=<span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tostring</span>(a)==<span class="hljs-string">&quot;123&quot;</span>) <span class="hljs-comment">--tostring是显示</span><br><span class="hljs-comment">-- 字符转ASCII码</span><br>a=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;Lua&quot;</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">--第二个参数是指定位置</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment">-- ASCII码 转字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(a))<br><span class="hljs-comment">--字符串拼接使用 .. %d</span><br></code></pre></td></tr></table></figure><p>是的，Lua包含类似于C语言的转义字符</p><table><thead><tr><th align="left">转义符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>\a</code></td><td align="left">响铃</td></tr><tr><td align="left"><code>\b</code></td><td align="left">退格</td></tr><tr><td align="left"><code>\f</code></td><td align="left">提供表格</td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行</td></tr><tr><td align="left"><code>\r</code></td><td align="left">回车</td></tr><tr><td align="left"><code>\t</code></td><td align="left">水平tab</td></tr><tr><td align="left"><code>\v</code></td><td align="left">垂直tab</td></tr><tr><td align="left"><code>\\</code></td><td align="left">反斜杠</td></tr><tr><td align="left"><code>\&quot;</code></td><td align="left">双引号</td></tr><tr><td align="left"><code>\&#39;</code></td><td align="left">单引号</td></tr></tbody></table><h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p> <code>table</code>类型实现了“关联数组”。“关联数组”是一种具有特殊索引方式的数组。不仅可以通过整数来索引它，还可以使用字符串或其他类型的值（除了<code>nil</code>）来索引它。</p><p>  <code>table</code>没有固定的大小，可以动态地添加任意数量的元素到一个<code>table</code>中。</p><p>  <code>table</code>是Lua中主要的（事实上也是仅有的）数据结构机制，具有强大的功能。</p><p>  在Lua中，table既不是“值”也不是“变量”，而是“对象”。</p><p>  <code>table</code>的创建是通过“构造表达式”完成的，最简单的构造表达式就是<code>&#123; &#125;</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = &#123; &#125;             <span class="hljs-comment">-- 创建一个table，并将它的引用存储到a</span><br>k = <span class="hljs-string">&quot;x&quot;</span><br>a[k] = <span class="hljs-number">10</span>           <span class="hljs-comment">-- 新条目，key = &quot;x&quot;, value = 10</span><br>a[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;great&quot;</span>     <span class="hljs-comment">-- 新条目，key = 20, value = &quot;great&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;x&quot;</span>])       <span class="hljs-comment">-- 10</span><br>k = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a[k])         <span class="hljs-comment">-- “great&quot;</span><br>a[<span class="hljs-string">&quot;x&quot;</span>] = a[<span class="hljs-string">&quot;x&quot;</span>] + <span class="hljs-number">1</span> <span class="hljs-comment">-- 递增条目&quot;x&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;x&quot;</span>])       <span class="hljs-comment">-- 11</span><br></code></pre></td></tr></table></figure><p>  <code>table</code>永远是“匿名的”，一个持有<code>table</code>的变量与<code>table</code>自身之间没有固定的关联性。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = &#123; &#125;<br>a[<span class="hljs-string">&quot;x&quot;</span>] = <span class="hljs-number">10</span><br>b = a               <span class="hljs-comment">-- b与a引用了同一个table</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-string">&quot;x&quot;</span>])       <span class="hljs-comment">-- 10</span><br>b[<span class="hljs-string">&quot;x&quot;</span>] = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;x&quot;</span>])       <span class="hljs-comment">-- 20</span><br>a = <span class="hljs-literal">nil</span>             <span class="hljs-comment">-- 现在只有b还在引用table</span><br>b = <span class="hljs-literal">nil</span>             <span class="hljs-comment">-- 再也没有对table的引用了</span><br><span class="hljs-comment">-- 当一个程序再也没有对一个table的引用时，Lua的垃圾收集器最终会删除该table，并复用它的内存。</span><br></code></pre></td></tr></table></figure><p>  所有<code>table</code>都可以用不同类型的索引来访问<code>value</code>（值），当需要容纳新条目时，<code>table</code>会自动增长。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = &#123; &#125;<br><br><span class="hljs-comment">-- 创建1000个新条目</span><br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>, <span class="hljs-number">1000</span> <span class="hljs-keyword">do</span> a[i] = i*<span class="hljs-number">2</span> <span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">9</span>])         <span class="hljs-comment">-- 18</span><br>a[<span class="hljs-string">&quot;x&quot;</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;x&quot;</span>])       <span class="hljs-comment">-- 10</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;y&quot;</span>])       <span class="hljs-comment">-- nil 该元素没有初始化</span><br><span class="hljs-comment">-- 可以将nil赋予table的某个元素来删除该元素。</span><br></code></pre></td></tr></table></figure><p>  Lua对于诸如<code>a[&quot;name&quot;]</code>的写法提供了一种更简便的“语法糖（syntactic sugar）”，可以直接输入<code>a.name</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua">a.x = <span class="hljs-number">10</span>            <span class="hljs-comment">-- 等同于a[&quot;x&quot;] = 10</span><br><span class="hljs-built_in">print</span>(a.x)          <span class="hljs-comment">-- 等同于print(a[&quot;x&quot;])</span><br><span class="hljs-built_in">print</span>(a.y)          <span class="hljs-comment">-- 等同于print(a[&quot;y&quot;])</span><br><br><span class="hljs-comment">-- 对于Lua来说，这两种形式是等价的，可供自由选择使用。</span><br>a.x                 <span class="hljs-comment">-- 等同于a[&quot;x&quot;]</span><br>a[x]                <span class="hljs-comment">-- 以变量x的值来索引table</span><br><br><span class="hljs-comment">----------</span><br>a = &#123; &#125;<br>x = <span class="hljs-string">&quot;y&quot;</span><br>a[x] = <span class="hljs-number">10</span>           <span class="hljs-comment">-- 将10放入字段“y”</span><br><span class="hljs-built_in">print</span>(a[x])         <span class="hljs-comment">-- 10 字段“y”的值</span><br><span class="hljs-built_in">print</span>(a.x)          <span class="hljs-comment">-- nil 字段“x”（未定义）的值</span><br><span class="hljs-built_in">print</span>(a.y)          <span class="hljs-comment">-- 10 字段“y”的值</span><br></code></pre></td></tr></table></figure><p>  若要表示一个传统的数组或线性表，只需以整数作为<code>key</code>来使用<code>table</code>即可。这里不需要（也没有必要）声明一个大小值，直接初始化元素就可以了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 读取10行内容，并存储到一个table中</span><br><br>a = &#123; &#125;<br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,<span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>    a[i] = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">read</span>()<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  虽然可以用任何值作为一个<code>table</code>的索引，也可以用任何数字作为数组索引的起始值。但<strong>数组通常以1作为索引的起始值</strong>。</p><p> 长度操作符“<code>#</code>”用于返回一个数组或线性表的最后一个索引值（或为其大小）。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,#a <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(a[i])<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">print</span>(a[#a])            <span class="hljs-comment">-- 打印列表a的最后一个值</span><br>a[#a] = <span class="hljs-literal">nil</span>             <span class="hljs-comment">-- 删除最后一个值</span><br>a[#a+<span class="hljs-number">1</span>] = v             <span class="hljs-comment">-- 将v添加到列表末尾</span><br><br><span class="hljs-comment">-- 读取一个文件的前10行</span><br>a = &#123; &#125;<br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,<span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>    a[#a+<span class="hljs-number">1</span>] = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">read</span>()<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  当对索引的实际类型不是很确定时，可以明确地使用一个显式转换</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">i = <span class="hljs-number">10</span>; j = <span class="hljs-string">&quot;10&quot;</span>; k = <span class="hljs-string">&quot;+10&quot;</span><br>a = &#123; &#125;<br>a[i] = <span class="hljs-string">&quot;one value&quot;</span><br>a[j] = <span class="hljs-string">&quot;another value&quot;</span><br>a[k] = <span class="hljs-string">&quot;yet another value&quot;</span><br><span class="hljs-built_in">print</span>(a[j])  <span class="hljs-comment">--&gt; another value</span><br><span class="hljs-built_in">print</span>(a[k]) <span class="hljs-comment">--&gt; yet another value</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-built_in">tonumber</span>(j)]) <span class="hljs-comment">--&gt; one value</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-built_in">tonumber</span>(k)]) <span class="hljs-comment">--&gt; one value</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">days = &#123;<span class="hljs-string">&quot;Sunday&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>, <span class="hljs-string">&quot;Tuesday&quot;</span>, <span class="hljs-string">&quot;Wednesday&quot;</span>, <span class="hljs-string">&quot;Thursday&quot;</span>, <span class="hljs-string">&quot;Friday&quot;</span>, <span class="hljs-string">&quot;Saturday&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>  会将<code>days[1]</code>初始化为字符串“<code>Sunday</code>”、<code>days[2]</code>初始化为“<code>Monday</code>”，以此类推。</p><h5 id="复杂数据结构"><a href="#复杂数据结构" class="headerlink" title="复杂数据结构"></a>复杂数据结构</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******复杂数据类型**********&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******字典**********&quot;</span>)<br><span class="hljs-comment">--字典是键值对组成的</span><br>dic = &#123; [<span class="hljs-string">&quot;id1&quot;</span>] = <span class="hljs-string">&quot;dove&quot;</span>, [<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">12</span>, [<span class="hljs-string">&quot;socre&quot;</span>] = <span class="hljs-number">90</span>,[<span class="hljs-number">2</span>]= <span class="hljs-number">100</span> &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;访问方式1&quot;</span>)<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-string">&quot;id1&quot;</span>])<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-string">&quot;age&quot;</span>])<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-string">&quot;socre&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;访问方式2&quot;</span>)<br><span class="hljs-built_in">print</span>(dic.id1)<br><span class="hljs-built_in">print</span>(dic.age)<br><span class="hljs-built_in">print</span>(dic.socre)<br><span class="hljs-comment">--print(dic.2)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能通过数字&quot;</span>)<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-number">2</span>])<br><span class="hljs-comment">--改 都是适用dic[键名]的</span><br>dic.age=<span class="hljs-number">20</span>;<br><span class="hljs-built_in">print</span>(dic.age)<br><span class="hljs-comment">--增</span><br>dic.sex=<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">print</span>(dic.sex)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******字典的遍历**********&quot;</span>)<br><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(dic) <span class="hljs-keyword">do</span><br>    <span class="hljs-comment">--可以传N个参数</span><br>    <span class="hljs-built_in">print</span>(i,v)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(dic) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(dic[i])<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***********类和结构体*************&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***********lua里没有类的概念，需要自己实现*************&quot;</span>)<br><span class="hljs-comment">--lua没有面对对象的，需要我们自己去实现</span><br><span class="hljs-comment">--类也是一个表,利用表的概念去实现一个类</span><br>Student=&#123;<br>    <span class="hljs-comment">--变量</span><br>    age=<span class="hljs-number">1</span>,<br>    sex=<span class="hljs-literal">true</span>,<br>    up=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-comment">--Lua中不能这样访问变量 这样写是一个全局的变量，值会为nil</span><br>        <span class="hljs-comment">--print(age)</span><br>        <span class="hljs-comment">--想要在表内部函数中，调用表本身的方法或者属性</span><br>        <span class="hljs-comment">--一定要指定是谁的，所以 表名.属性</span><br>        <span class="hljs-built_in">print</span>(Student.age)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我成长了&quot;</span>)<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--函数</span><br>    eat=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃饭了&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-comment">--声明表后，在表外添加变量和方法</span><br>Student.name=<span class="hljs-string">&quot;heart&quot;</span><br>Student.Learn=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>    <span class="hljs-built_in">print</span>(t.sex)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我学习了&quot;</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student.goSchool</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;去学校了&quot;</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--C#中使用类需要实例化new 或者静态直接点</span><br><span class="hljs-comment">--lua这中的表现形式更加像是很多个静态类</span><br><span class="hljs-built_in">print</span>(Student.age)<br>Student.up()<br><span class="hljs-built_in">print</span>(Student.name)<br>Student.Learn(Student) <span class="hljs-comment">--第二种使用变量的方法</span><br><span class="hljs-comment">--Lua中点和冒号的区别</span><br><span class="hljs-comment">--冒号调用方法会默认把调用者作为第一个参数，传入方法中</span><br>Student:Learn()<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student:Run</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">--Lua中有一个关键字self 表示默认传入的第一个参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">self</span>.name..<span class="hljs-string">&quot;跑&quot;</span>)<br><span class="hljs-keyword">end</span><br>Student.goSchool()<br>Student:Run()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***********表的公共操作*************&quot;</span>)<br><span class="hljs-comment">--table中提供了一些公共操作方法</span><br>t1=&#123;&#123;age=<span class="hljs-number">1</span>,name=<span class="hljs-string">&quot;heart&quot;</span>&#125;,&#123;age=<span class="hljs-number">2</span>,name=<span class="hljs-string">&quot;easily&quot;</span>&#125;&#125;<br>t2=&#123;name=<span class="hljs-string">&quot;heart&quot;</span>,sex=<span class="hljs-literal">true</span>&#125;<br><span class="hljs-comment">--插入</span><br><span class="hljs-built_in">print</span>(#t1)<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(t1,t2);<br><span class="hljs-built_in">print</span>(#t1)<br><span class="hljs-built_in">print</span>(t1[<span class="hljs-number">3</span>].name)<br><br><span class="hljs-comment">--删除指定元素</span><br><span class="hljs-comment">--会移除最后一个索引的内容</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(t1)<br><span class="hljs-built_in">print</span>(#t1)<br><span class="hljs-built_in">print</span>(t1[<span class="hljs-number">1</span>].name)<br><span class="hljs-built_in">print</span>(t1[<span class="hljs-number">2</span>].name)<br><span class="hljs-comment">--移除内容的指定位置</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(t1,<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;升序&quot;</span>)<br>t3=&#123;<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">sort</span>(t3)<br><span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t3) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(v)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--降序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;降序&quot;</span>)<br>t4=&#123;<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;<br><span class="hljs-comment">--第二个参数是排序的规则</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">sort</span>(t4,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-keyword">if</span> a&gt;b  <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t4) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(v)<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;拼接&quot;</span>)<br>tb=&#123;<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;456&quot;</span>,<span class="hljs-string">&quot;789&quot;</span>&#125;<br><span class="hljs-comment">--拼接函数 返回值为字符串</span><br>str=<span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(tb,<span class="hljs-string">&quot;;&quot;</span>)<br><span class="hljs-built_in">print</span>(str)<br></code></pre></td></tr></table></figure><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><ul><li>算术运算符 +（加法）、-（减法）、*（乘法）、／（除法）、^（指数）、%（取模）、-（负号）</li><li>关系操作符  &lt;  &gt;  &lt;&#x3D;  &gt;&#x3D;  &#x3D;&#x3D;   ~&#x3D;(不等于) 这些结果返回的都是true或者false</li><li>逻辑操作符 and(逻辑与)  or(逻辑或)  not</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua"> <span class="hljs-comment">--与条件控制语句一样，所有的逻辑操作符将false和nil视为假，而将其他的任何东西视为真。</span><br><br> <span class="hljs-comment">--对于操作符and来说，如果它的第一个操作数为假，就返回第一个操作数；不然返回第二个操作数。</span><br><br> <span class="hljs-comment">--对于操作符or来说，如果它的第一个操作数为真，就返回第一个操作数；不然返回第二个操作数。</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span>)        <span class="hljs-comment">--&gt; 5</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> <span class="hljs-number">13</span>)     <span class="hljs-comment">--&gt; nil</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-literal">false</span> <span class="hljs-keyword">and</span> <span class="hljs-number">13</span>)   <span class="hljs-comment">--&gt; false</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-number">5</span>)         <span class="hljs-comment">--&gt; 4</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-literal">false</span> <span class="hljs-keyword">or</span> <span class="hljs-number">5</span>)     <span class="hljs-comment">--&gt; 5</span><br>  <br><span class="hljs-comment">--and和or都是用“短路求值”，也就是说，它们只会在需要时才去评估第二个操作数。</span><br>  <span class="hljs-comment">--短路求值可以确保像（type(v)==&quot;table&quot; and v.tag == &quot;h1&quot;）这样的表达式不会导致运行时错误。</span><br><br> <span class="hljs-comment">-- 有一种常用的Lua习惯写法“x = x or v”，它等价于：</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x <span class="hljs-keyword">then</span> x = v <span class="hljs-keyword">end</span><br><br> <span class="hljs-comment">-- 另外，还有一种习惯写法是“（a and b）or c”，这等价于表达式a?b:c，但前提是b不为假。</span><br> <span class="hljs-comment">--三目运算符</span><br> <span class="hljs-comment">--例如，为了选出数字x和y中的较大者，可以使用以下语句：</span><br>  <span class="hljs-built_in">max</span> = (x &gt; y) <span class="hljs-keyword">and</span> x <span class="hljs-keyword">or</span> y<br> <span class="hljs-comment">-- 操作符not永远只返回true或false：</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">nil</span>)        <span class="hljs-comment">--&gt; true</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">false</span>)      <span class="hljs-comment">--&gt; true</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-number">0</span>)          <span class="hljs-comment">--&gt; false</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">nil</span>)    <span class="hljs-comment">--&gt; false</span><br></code></pre></td></tr></table></figure><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>Lua的常规语句和C语言差不多 同时也有一些不太常见的语句 如 多重赋值，和局部变量声明</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-string">&quot;hello&quot;</span> .. <span class="hljs-string">&quot;world&quot;</span><br>t = &#123; n = <span class="hljs-number">0</span> &#125;<br>t.n = t.n + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>  Lua允许“多重赋值”，也就是一下子将多个值赋予多个变量。每个值或每个变量之间以逗号分隔。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">a, b = <span class="hljs-number">10</span>, <span class="hljs-number">2</span>*x    <span class="hljs-comment">-- a为10，b为2*x</span><br></code></pre></td></tr></table></figure><p>  在多重赋值中，Lua先对等号右边的所有元素求值，然后才执行赋值。这样便可以用一句多重赋值来交互两个变量了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">x, y = y, x                    <span class="hljs-comment">-- 交换x与x</span><br>a[i], a[j] = a[j], a[i]        <span class="hljs-comment">-- 交换a[i]与a[j]</span><br></code></pre></td></tr></table></figure><p>相对于全局变量 lua的局部变量用 <code>local</code>语句来创建</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">local</span> a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">local</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">end</span>            <span class="hljs-comment">-- a和b的作用域至此结束 do end</span><br></code></pre></td></tr></table></figure><p>Lua提供了一组传统的、小巧的控制结构，包括用于条件执行的<code>if</code>，用于迭代的<code>while</code>、<code>repeat</code>和<code>for</code>。所有的控制结构都有一个显式的终止符：<code>if</code>、<code>for</code>和<code>while</code>以<code>end</code>作为结尾，<code>repeat</code>以<code>until</code>作为结尾。控制结构中的条件表达式可以是任何值，Lua将所有不是<code>false</code>和<code>nil</code>的值视为“真”</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******循环语句*****&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******while循环语句*****&quot;</span>)<br>x = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(x)<br>    x = x + <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******do while循环 也就是repeat*****&quot;</span>)  <span class="hljs-comment">--</span><br>y = <span class="hljs-number">0</span><br><span class="hljs-keyword">repeat</span><br>    <span class="hljs-built_in">print</span>(y)<br>    y = y + <span class="hljs-number">1</span><br><span class="hljs-keyword">until</span> y &gt; <span class="hljs-number">5</span>   <span class="hljs-comment">--满足条件退出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lua中的do whlie 和C# 不一样 用repeat until 同时条件是退出条件不是进入条件&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******for循环语句*****&quot;</span>)<br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">5</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lua i 会默认自增&quot;</span>)<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">5</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">do</span>  <span class="hljs-comment">--另外一个值是指定自增多少  自减的话 改成-1</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;自减&quot;</span>)<br><span class="hljs-keyword">for</span> i = <span class="hljs-number">10</span>, <span class="hljs-number">1</span>,<span class="hljs-number">-2</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;******增强for循环语句*****&quot;</span>)<br>arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(arr) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(v)<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p><code>for</code>语句有两种形式：数字型<code>for</code>和泛型<code>for</code>。</p><h5 id="数字型-for"><a href="#数字型-for" class="headerlink" title="数字型 for"></a>数字型 for</h5><p>  <code>for</code>语句有两种形式：数字型<code>for</code>和泛型<code>for</code>。</p><p>  数字型<code>for</code>的语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> var=exp1, exp2,exp3 <span class="hljs-keyword">do</span><br>    &lt;执行体&gt;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  <code>var</code>从<code>exp1</code>变化到<code>exp2</code>，每次变化都以<code>exp3</code>作为步长（<code>step</code>）递增<code>var</code>，并执行一次“执行体”。第三个表达式是可选的，若不指定的话，Lua会将步长默认为1。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>, f(x) <span class="hljs-keyword">do</span> <span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i=<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span> <span class="hljs-keyword">do</span> <span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  如果不想给循环设置上限的话，可以使用常量<code>math.huge</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>, <span class="hljs-built_in">math</span>.<span class="hljs-built_in">huge</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">0.3</span>*i^<span class="hljs-number">3</span> - <span class="hljs-number">20</span>*i^<span class="hljs-number">2</span> - <span class="hljs-number">500</span> &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  首先，<code>for</code>的3个表达式是在循环开始前一次性求值的。例如，上例中的<code>f(x)</code>只会执行一次。其次，控制变量会被自动地声明为<code>for</code>语句的局部变量，并且仅在循环体内可见。</p><h5 id="泛型for"><a href="#泛型for" class="headerlink" title="泛型for"></a>泛型for</h5><p>  泛型<code>for</code>循环通过一个迭代器函数来遍历所有值：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 打印数组a的所有值</span><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(a) <span class="hljs-keyword">do</span> <span class="hljs-built_in">print</span>(v) <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  Lua的基础库提供了<code>ipairs</code>，这是一个用于遍历数组的迭代器函数。在每次循环中，<code>i</code>会被赋予一个索引值，同时<code>v</code>被赋予一个对应于该索引的数组元素值。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 打印table t中所有的key</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t) <span class="hljs-keyword">do</span> <span class="hljs-built_in">print</span>(k) <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><blockquote><p>  迭代table元素的（pairs）、迭代数组元素的（ipairs）、迭代字符串中单词的（string.gmatch）等。</p></blockquote><p>  </p><p>  <strong>泛型for循环与数字型for循环有两个相同点：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">循环变量是循环体的局部变量；<br>绝不应该对循环变量作任何赋值。<br><span class="hljs-comment">-- 例：</span><br><br>days = &#123;<span class="hljs-string">&quot;Sunday&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>, <span class="hljs-string">&quot;Tuesday&quot;</span>, <span class="hljs-string">&quot;Wednesday&quot;</span>, <span class="hljs-string">&quot;Thursday&quot;</span>, <span class="hljs-string">&quot;Friday&quot;</span>, <span class="hljs-string">&quot;Saturday&quot;</span>&#125;<br><br><span class="hljs-comment">-- 需要创建如下talbe</span><br>revDays = &#123;[<span class="hljs-string">&quot;Sunday&quot;</span>] = <span class="hljs-number">1</span>, [<span class="hljs-string">&quot;Monday&quot;</span>] = <span class="hljs-number">2</span>, [<span class="hljs-string">&quot;Tuesday&quot;</span>] = <span class="hljs-number">3</span>, [<span class="hljs-string">&quot;Wednesday&quot;</span>] = <span class="hljs-number">4</span>, [<span class="hljs-string">&quot;Thursday&quot;</span>] = <span class="hljs-number">5</span>, [<span class="hljs-string">&quot;Friday&quot;</span>] = <span class="hljs-number">6</span>, [<span class="hljs-string">&quot;Saturday&quot;</span>] = <span class="hljs-number">7</span>&#125;<br><br><span class="hljs-comment">-- 则可以按如下实现</span><br>revDays = &#123;&#125;<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(day) <span class="hljs-keyword">do</span><br>    revDays[v]<br></code></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><blockquote><p>Lua为面向对象式的调用也提供了一种特殊的语法—冒号操作符。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">o.foo(o, x)      <span class="hljs-comment">-- 另一种写法是 o::foo(x)</span><br></code></pre></td></tr></table></figure><p>  冒号操作符使调用<code>o.foo</code>时将<code>o</code>隐含地作为函数第一个参数。</p><p>Lua中函数不支持重载，默认调用最后一个函数 </p></blockquote><h5 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h5><p>调用函数时提供的实参数量可以与形參数量不同。Lua会自动调整实参的数量，以匹配参数表的要求。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 假设一个函数如下：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(a, b)</span></span> <span class="hljs-keyword">return</span> a <span class="hljs-keyword">or</span> b <span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 在以下几种调用中，实参与形參的对应关系为：</span><br><span class="hljs-comment">-- 调用        形參</span><br>f(<span class="hljs-number">3</span>)          a=<span class="hljs-number">3</span>, b=<span class="hljs-literal">nil</span><br>f(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)       a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span><br>f(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)    a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span> (<span class="hljs-number">5</span>被丢弃了)<br><span class="hljs-comment">-- 默认实参的应用</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incCount</span><span class="hljs-params">(n)</span></span><br>    n = n <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><br>    count = count + n<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p> Lua允许函数返回多个结果。只需在<code>return</code>关键字后列出所有的返回值即可。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 查找数组中的最大元素，并返回该元素的位置：</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maximum</span><span class="hljs-params">(a)</span></span><br>       <span class="hljs-keyword">local</span> index = <span class="hljs-number">1</span>         <span class="hljs-comment">-- 最大值的索引</span><br>       <span class="hljs-keyword">local</span> <span class="hljs-built_in">max</span> = a[index]    <span class="hljs-comment">-- 最大值</span><br>       <span class="hljs-keyword">for</span> i,val <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(a) <span class="hljs-keyword">do</span><br>           <span class="hljs-keyword">if</span> val &gt; <span class="hljs-built_in">max</span> <span class="hljs-keyword">then</span><br>               <span class="hljs-built_in">max</span> = val; index = i<br>           <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>, index<br>   <span class="hljs-keyword">end</span><br><br>   <span class="hljs-built_in">print</span>(maximum&#123;<span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>&#125;)    <span class="hljs-comment">--&gt; 23   3</span><br></code></pre></td></tr></table></figure><p> Lua会调整一个函数的返回值数量以适应不同的调用情况。若将函数调用作为一条单独语句时，Lua会丢弃函数的所有返回值。<strong>如果你传入的参数，和函数个数不匹配，不会报错，但会补nil或者丢弃</strong>，若将函数作为表达式的一部分来调用时，Lua只保留函数的第一个返回值。<strong>只有当一个函数调用是一系列表达式中的最后一个元素（或仅有一个元素）时，才能获得它的所有返回值。</strong> </p><h5 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h5><p>Lua中的函数可以接受不同数量的实参。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 这个函数返回了所有参数的总和：</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">( ... )</span></span><br>       <span class="hljs-keyword">local</span> s = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>( ... ) <span class="hljs-keyword">do</span>  <span class="hljs-comment">-- 表达式&#123;...&#125;表示一个由所有变长参数构成的数组。</span><br>           s = s + v<br>       <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">return</span> s<br>   <span class="hljs-keyword">end</span><br><br>   <span class="hljs-built_in">print</span>(add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>))        <span class="hljs-comment">--&gt; 54</span><br></code></pre></td></tr></table></figure><p> 参数中的3个点（<code>...</code>）表示该函数可接受不同数量的实参。    </p><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>若将一个函数写在另一个函数之内，那么这个位于内部的函数便可以访问外部函数中的局部变量，这项特征称之为“词法域”。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pack1</span><span class="hljs-params">(x)</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(y)</span></span><br>        <span class="hljs-keyword">return</span> x+y<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--闭包机制改变了传入参数的生命周期</span><br>p=pack1(<span class="hljs-number">10</span>)<br>P= p(<span class="hljs-number">5</span>) <br><span class="hljs-built_in">print</span>(P)  <span class="hljs-comment">--&gt; 15  x的值为10 y为5</span><br></code></pre></td></tr></table></figure><h5 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F8</span><span class="hljs-params">()</span></span><br>    F9=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> F9<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F10</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>f9=F8()<br>f9() <span class="hljs-comment">--&gt;123</span><br>f10= F10()<br>f10() <span class="hljs-comment">--456</span><br></code></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><blockquote><p>Lua将所有关于协同程序的函数放置在一个名为“<code>coroutine</code>”的<code>table</code>中。</p></blockquote><p>函数<code>create</code>用于创建新的协同程序，它只有一个参数，就是一个函数。该函数的代码就是协同程序所需执行的内容。<code>create</code>会返回一个<code>thread</code>类型的值，用以表示新的协同程序。通常<code>create</code>的参数是一个匿名函数。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">    co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;hi&quot;</span> ) <span class="hljs-keyword">end</span> )<br>    <span class="hljs-built_in">print</span>( co )    <span class="hljs-comment">-- thread: 0x7fe2f1506218</span><br><span class="hljs-comment">--一个协程有四种状态</span><br><span class="hljs-comment">--coroutine.status(协程对象)</span><br><span class="hljs-comment">--dead 结束</span><br><span class="hljs-comment">--suspended 暂停</span><br><span class="hljs-comment">--running 进行中</span><br><span class="hljs-comment">--通过 print( coroutine.status( co ) )来检查状态</span><br></code></pre></td></tr></table></figure><p>函数<code>coroutine.resume</code>用于启动或再次启动一个协同程序的执行，并将其状态由挂起改为运行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )             <span class="hljs-comment">-- hi</span><br></code></pre></td></tr></table></figure><p>在运行后协程变终止了 处于<code>dead</code>状态</p><p>协程的本质是一个线程对象</p><p>到目前为止，协同程序看上去还只是像一种复杂的函数调用方法。其实协同程序的真正强大之处在于函数<code>yield</code>的使用上，该函数可以让一个运行中的协同程序挂起，而之后可以再恢复它的运行。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;co&quot;</span>, i )<br>        <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">yield</span>()<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> )<br></code></pre></td></tr></table></figure><p>  现在当唤醒这个协同程序时，它就会开始执行，直到第一个<code>yield</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )    <span class="hljs-comment">-- co 1</span><br></code></pre></td></tr></table></figure><p>  如果此时检查其状态，会发现协同程序处于挂起状态，因此可以再次恢复其运行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>( <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">status</span>( co ) )    <span class="hljs-comment">-- suspended</span><br></code></pre></td></tr></table></figure><p>  从协同程序的角度看，所有在它挂起时发生的活动都发生在<code>yield</code>调用中。当恢复协同程序的执行时，对于<code>yield</code>的调用才最终返回。然后协同程序继续它的执行，直到下一个<code>yield</code>调用或执行结束：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )    <span class="hljs-comment">-- co 2</span><br><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )    <span class="hljs-comment">-- co 3</span><br>...<br><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )    <span class="hljs-comment">-- co 10</span><br><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co )    <span class="hljs-comment">-- 什么都不打印</span><br></code></pre></td></tr></table></figure><p>  在最后一次调用<code>resume</code>时，协同程序的内容已经执行完毕，并已经返回。因此，这时协同程序处于死亡状态。如果试图再次恢复它的执行，<code>resume</code>将返回<code>false</code>及一条错误消息：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co ))    <span class="hljs-comment">-- false cannot resume dead coroutine</span><br></code></pre></td></tr></table></figure><blockquote><p>请注意，<code>resume</code>是在保护模式中运行的。因此，如果在一个协同程序的执行中发生任何错误，Lua是不会显示错误消息的，而是将执行权返回给<code>resume</code>调用。</p></blockquote><p><strong>Lua的协同程序还具有一项有用的机制，就是可以通过一对<code>resume-yield</code>来交换数据。</strong>在第一次调用<code>resume</code>时，并没有对应的<code>yield</code>在等待它，因此所有传递给<code>resume</code>的额外参数都将视为协同程序主函数的参数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">( a, b, c )</span></span><br>    <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;co&quot;</span>, a, b, c )<br><span class="hljs-keyword">end</span> )<br><span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> )    <span class="hljs-comment">-- co 1 2 3</span><br></code></pre></td></tr></table></figure><p>  在<code>resume</code>调用返回的内容中，第一个值为<code>true</code>则表示没有错误，而后面所有的值都是对应<code>yield</code>传入的参数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">( a, b )</span></span><br>    <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">yield</span>( a + b, a - b )<br><span class="hljs-keyword">end</span> )<br><br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co, <span class="hljs-number">20</span>, <span class="hljs-number">10</span> ) )    <span class="hljs-comment">-- true 30 10</span><br></code></pre></td></tr></table></figure><p>  与此对应的是，<code>yield</code>返回的额外值就是对应<code>resume</code>传入的参数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;co&quot;</span>, <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">yield</span>() )<br><span class="hljs-keyword">end</span> )<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co, <span class="hljs-string">&quot;a&quot;</span> ))      <span class="hljs-comment">-- true</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> ))  <span class="hljs-comment">-- co 4 5 6  -- true</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))      <span class="hljs-comment">-- false cannot resume dead coroutine</span><br></code></pre></td></tr></table></figure><p>  最后，当一个协同程序结束时，它的主函数所返回的值都将作为对应<code>resume</code>的返回值：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">co = <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">create</span>( <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span><br><span class="hljs-keyword">end</span> )<br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">coroutine</span>.<span class="hljs-built_in">resume</span>( co ) )        <span class="hljs-comment">-- true 6 7</span><br></code></pre></td></tr></table></figure><h4 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h4><p>任何表变量都可以作为另一个表变量的元素，任何表变量都可以有自己的元表，当我们子表进行一些特定操作时，会执行元表中的内容</p><p>可以通过元表来修改一个值的行为，使其在面对一个非预定义的操作时执行一个指定的操作。例如，假设a和b都是table，通过元表可以定义如何计算表达式a+b。当Lua试图将两个table相加时，它会先检查两者之一是否有元表，然后检查该元表中是否有一个叫__add的字段。如果Lua找到了该字段，就调用该字段对应的值。这个值也就是所谓的“元方法”</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">meta = &#123;&#125;<br>myTable = &#123;&#125;<br><span class="hljs-comment">--设置元表函数 第一个是字表 第二个是元表</span><br><span class="hljs-built_in">setmetatable</span>(myTable, meta)<br></code></pre></td></tr></table></figure><p>tostring操作</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">meta2 = &#123;<br>    <span class="hljs-comment">--当字表要被当做字符串使用时，会默认调用元表中的tostring方法</span><br>    <span class="hljs-built_in">__tostring</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>        <span class="hljs-keyword">return</span> t.name<br>    <span class="hljs-keyword">end</span><br>&#125;<br>myTable2 = &#123;<br>    name = <span class="hljs-string">&quot;Heart&quot;</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(myTable2, meta2)<br><span class="hljs-built_in">print</span>(myTable2) <span class="hljs-comment">--&gt; Heart</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***********特定操作_ Call************&quot;</span>)<br>meta3 = &#123;<br>    <span class="hljs-comment">--当字表要被当做字符串使用时，会默认调用元表中的tostring方法</span><br>    <span class="hljs-built_in">__tostring</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>        <span class="hljs-keyword">return</span> t.name<br>    <span class="hljs-keyword">end</span>,<br><br>    <span class="hljs-comment">--当字表当做一个函数使用时，会默认调用__call里的内容</span><br>    <span class="hljs-comment">--当希望传入参数时，默认第一个参数是调用者自己</span><br>    <span class="hljs-built_in">__call</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t, b)</span></span><br>        <span class="hljs-built_in">print</span>(b)<br>        <span class="hljs-built_in">print</span>(t.name .. <span class="hljs-string">&quot; 在call你&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br>myTable3 = &#123;<br>    name = <span class="hljs-string">&quot;Heart&quot;</span><br>&#125;<br><br><span class="hljs-built_in">setmetatable</span>(myTable3, meta3)<br><span class="hljs-comment">--第一个参数是本身，第二个参数才是传入的值</span><br>myTable3(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***********特定操作_ 运算符重载************&quot;</span>)<br>meta4 = &#123;<br>    <span class="hljs-comment">--相当于运算符重载，当字表调用+运算符时，会调用该方法</span><br>    <span class="hljs-comment">--运算符+</span><br>    <span class="hljs-built_in">__add</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age + t2.age<br>    <span class="hljs-keyword">end</span>,<br><br>    <span class="hljs-comment">--运算符-</span><br>    <span class="hljs-built_in">__sub</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age - t2.age<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符*</span><br>    <span class="hljs-built_in">__mul</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age * t2.age<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符/</span><br>    <span class="hljs-built_in">__div</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age / t2.age<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符%</span><br>    <span class="hljs-built_in">__mod</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符^</span><br>    <span class="hljs-built_in">__pow</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符==</span><br>    <span class="hljs-built_in">__eq</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符&lt;</span><br>    <span class="hljs-built_in">__lt</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符&lt;=</span><br>    <span class="hljs-built_in">__le</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age &lt;= t2.age<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-comment">--运算符 .. 拼接</span><br>    <span class="hljs-built_in">__concat</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t1, t2)</span></span><br>        <span class="hljs-keyword">return</span> t1.age .. t2.age<br>    <span class="hljs-keyword">end</span><br>&#125;<br>myTable4 = &#123;<br>    age = <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(myTable4, meta4)<br>myTable5 = &#123;<br>    age = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(myTable5, meta4)<br><br><span class="hljs-comment">--如果要用条件运算符，来比较两个对象</span><br><span class="hljs-comment">--这两个对象的元表一定要一致 才能准确调用</span><br><span class="hljs-built_in">print</span>(myTable4 + myTable5) <span class="hljs-comment">--2</span><br><span class="hljs-built_in">print</span>(myTable4 .. myTable5) <span class="hljs-comment">-- 02</span><br><span class="hljs-built_in">print</span>(myTable4 &lt;= myTable5) <span class="hljs-comment">--true</span><br></code></pre></td></tr></table></figure><h5 id="table访问的元方法"><a href="#table访问的元方法" class="headerlink" title="table访问的元方法"></a>table访问的元方法</h5><p>  算术类和关系类元算符的元方法都为各种错误情况定义了行为，它们不会改变语言的常规行为。但是Lua还提供了一种可以改变table行为的方法。有两种可以改变的table行为：查询table及修改table中不存在的字段。</p><h6 id="index元方法"><a href="#index元方法" class="headerlink" title="__index元方法"></a>__index元方法</h6><p>当访问一个table中不存在的字段时，得到的结果为nil。这是对的，但并非完全正确。实际上，这些访问会促使解释器去查找一个叫__index的元方法。如果没有这个元方法，那么访问结果如前述的为nil。否则，就由这个元方法来提供最终结果。</p><p>  下面将介绍一个有关继承的典型示例。假设要创建一些描述窗口的table，每个table中必须描述一些窗口参数，例如位置、大小及主题颜色等。所有这些参数都有默认值，因此希望在创建窗口对象时可以仅指定那些不同于默认值的参数。第一种方法是使用一个构造式，在其中填写那些不存在的字段。第二种方法是让新窗口从一个原型窗口处继承所有不存在的字段。首先，声明一个原型和一个构造函数，构造函数创建新的窗口，并使它们共享同一个元表：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">Window = &#123;&#125;         <span class="hljs-comment">-- 创建一个名字空间</span><br><span class="hljs-comment">-- 使用默认值来创建一个原型</span><br>Window.prototype = &#123;x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, width=<span class="hljs-number">100</span>, height=<span class="hljs-number">100</span>&#125;<br>Window.mt = &#123;&#125;         <span class="hljs-comment">-- 创建元表</span><br><span class="hljs-comment">-- 声明构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Window.new</span><span class="hljs-params">(o)</span></span><br>    <span class="hljs-built_in">setmetatable</span>(o, Window.mt)<br>    <span class="hljs-keyword">return</span> o<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  现在，来定义<code>__index</code>元方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">Window.mt.<span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(table, key)</span></span><br>    <span class="hljs-keyword">return</span> Window.prototype[key]<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  在这段代码之后，创建一个新窗口，并查询一个它没有的字段：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">w = Window.new&#123;x=<span class="hljs-number">10</span>, y=<span class="hljs-number">20</span>&#125;<br><span class="hljs-built_in">print</span>(w.width)            <span class="hljs-comment">--&gt; 100</span><br></code></pre></td></tr></table></figure><p>  若Lua检测到<code>w</code>中没有某字段，但在其元表中却有一个<code>__index</code>字段，那么Lua就会以<code>w(table)</code>和“<code>width</code>”（不存在的key）来调用这个<code>__index</code>元方法。随后元方法用这个key来索引原型table，并返回结果。</p><p>  在Lua中，将<code>__index</code>元方法用于继承是很普通的方法，因此Lua还提供了一种更便捷的方式来实现此功能。<code>__index</code>元方法不必一定是一个函数，它还可以是一个table。当它是一个函数时，Lua以table和不存在的key作为参数来调用该函数，这就如同上述内容。而当它是一个table时，Lua就以相同的方式来重新访问这个table。因此，前例中<code>__index</code>的声明可以简单地写为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Window.mt.<span class="hljs-built_in">__index</span> = Window.prototype<br></code></pre></td></tr></table></figure><p>  现在，当Lua查找到元表的<code>__index</code>字段时，发现<code>__index</code>字段的值是一个table，那么Lua就会在Window.prototype中继续查找。也就是说，Lua会在这个table中重复这个访问过程，类似于执行这样的代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Window.prototype[<span class="hljs-string">&quot;width&quot;</span>]<br></code></pre></td></tr></table></figure><p>  然后由这次访问给出想要的结果。</p><p>  将一个table作为<code>__index</code>元方法是一种快捷的、实现单一继承的方式。虽然将函数作为<code>__index</code>来实现相同功能的开销较大，但函数更加灵活。可以通过函数来实现多重继承、缓存及其他一些功能。</p><p>  如果不想在访问一个table时涉及到它的<code>__index</code>元方法，可以使用函数<code>rawget</code>。调用<code>rawget(t, i)</code>就是对table t进行了一个“原始的(raw)”访问，也就是一次不考虑元表的简单访问。一次原始访问并不会加速代码执行，但有时会用到它。</p><h6 id="newindex元方法"><a href="#newindex元方法" class="headerlink" title="__newindex元方法"></a>__newindex元方法</h6><p>  <strong><code>__newindex</code>元方法与<code>__index</code>类似，不同之处在于前者用于table的更新，而后者用于table的查询</strong>。当对一个table中不存在的索引赋值时，解释器就会查找<code>__newindex</code>元方法。如果有这个元方法，解释器就调用它，而不是执行赋值。如果这个元方法是一个table，解释器就在此table中执行赋值，而不是对原来的table。此外，还有一个原始函数允许绕过元方法：调用<code>rawset(t,k,v)</code>就可以不涉及任何元方法而直接设置table t中与key k相关联的value v。</p><p>  组合使用<code>__index</code>和<code>__newindex</code>元方法就可以实现出Lua中的一些强大功能，例如，只读的table、具有默认值的table和面向对象编程中的继承。</p><h4 id="面对对象编程"><a href="#面对对象编程" class="headerlink" title="面对对象编程"></a>面对对象编程</h4><p>Lua的面对对象编程需要我们自己去实现</p><p> Lua中的<code>table</code>就是一种对象，这句话可以从3个方面来证实。首先，<code>table</code>与对象一样可以拥有状态。其次，<code>table</code>也与对象一样拥有一个独立于其值的标识（一个<code>self</code>）。例如，两个具有相同值的对象（<code>table</code>）是两个不同的对象。最后，<code>table</code>与对象一样具有独立于创建者和创建地的生命周期。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">Account = &#123;balance = <span class="hljs-number">0</span>&#125;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account.withdraw</span><span class="hljs-params">(v)</span></span><br>       Account.balance = Account.balance - v<br>   <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  上面的代码创建了一个新函数，并将该函数存入<code>Account</code>对象的<code>withdraw</code>字段中。则可进行如下调用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Account.withdraw(<span class="hljs-number">100.00</span>)<br></code></pre></td></tr></table></figure><p>但这个函数只能针对特定对对象工作，这个特定对象还必须存储在特定的全局变量中。如果改变了对象的名称，<code>withdraw</code>就再也不能工作了：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = Account;Account = <span class="hljs-literal">nil</span><br>a.withdraw(<span class="hljs-number">100.00</span>)        <span class="hljs-comment">-- 错误！❌</span><br></code></pre></td></tr></table></figure><p>这种行为违法了对象的特性，为此Lua提供了一个额外的参数来表示接受者，这个参数是 <code>self</code>或<code>this</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account.withdraw</span><span class="hljs-params">(self, v)</span></span><br>        <span class="hljs-built_in">self</span>.balance = <span class="hljs-built_in">self</span>.balance - v<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--此时当调用该方法时，必须指定其作用的对象：</span><br><br>    a1 = Account; Account = <span class="hljs-literal">nil</span><br>    ...<br>    a1.withdraw(a1, <span class="hljs-number">100.00</span>)        <span class="hljs-comment">-- OK</span><br><br></code></pre></td></tr></table></figure><p>通过对<code>self</code>参数的使用还可以针对多个对象使用同样的方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"> a2 = &#123;balance=<span class="hljs-number">0</span>, withdraw=Account.withdraw&#125;<br>    ...<br>    a2.withdraw(a2, <span class="hljs-number">260.00</span>)<br><span class="hljs-comment">--使用self参数是所有面向对象语言的一个核心。大多数面向对象语言都能对程序员隐藏部分self参数，从而使得程序员不必显式地声明这个参数。Lua只需使用冒号，则能隐藏该参数。即可将上例重写为：</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account:withdraw</span><span class="hljs-params">(v)</span></span><br>        <span class="hljs-built_in">self</span>.balance = <span class="hljs-built_in">self</span>.balance - v<br>    <span class="hljs-keyword">end</span><br> <span class="hljs-comment">--调用时可写为：</span><br><br>    a:withdraw(<span class="hljs-number">100.00</span>)<br></code></pre></td></tr></table></figure><blockquote><p>冒号的作用是在一个方法定义中添加一个额外的隐藏参数，以及在一个方法调用中添加一个额外的实参。冒号只是一种语法便利，并没有引入任何新的东西</p></blockquote><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>要在Lua中模拟类并不困难，例实现一个Object类</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">Object=&#123;&#125;<br><span class="hljs-comment">--实例化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Object:new</span><span class="hljs-params">(obj)</span></span><br>    <span class="hljs-keyword">local</span> obj= obj <span class="hljs-keyword">or</span> &#123;&#125; <span class="hljs-comment">--如果用户满意提供table，则创建一个</span><br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">__index</span>=<span class="hljs-built_in">self</span><br>    <span class="hljs-comment">--给对象设置元表 以及index</span><br>    <span class="hljs-built_in">setmetatable</span>(obj,<span class="hljs-built_in">self</span>)<br>    <span class="hljs-keyword">return</span> obj<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>当调用new时，self就等于Object  当创建新对象时，obj会将Object作为元表</p><p>ps ：注意<code>self</code>的作用</p><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua">Object = &#123; &#125;<br>Object.id=<span class="hljs-number">1</span><br>Object.name=<span class="hljs-string">&quot;Heart&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Object:Test</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">self</span>.name..<span class="hljs-string">&quot;封装测试&quot;</span>) <span class="hljs-comment">--Heart封装测试</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--冒号 会自动将调用这个函数的对象 作为第一个参数传入的写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Object:new</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">--self 代表传入的默认第一个参数</span><br>    <span class="hljs-comment">--对象就是新的变量 返回一个新的变量</span><br>    <span class="hljs-comment">--返回出去的内容 本质上就是表对象</span><br>    <span class="hljs-keyword">local</span> obj = &#123;&#125;<br>    <span class="hljs-comment">--结合元表知识 index  当找自己的变量 找不到时 就会去元表中找 index指向的内容</span><br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">__index</span> = <span class="hljs-built_in">self</span><br>    <span class="hljs-built_in">setmetatable</span>(obj, <span class="hljs-built_in">self</span>)<br>    <span class="hljs-keyword">return</span> obj<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--local myobj=Object:new()</span><br><span class="hljs-comment">--print(myobj.id)--这样是无法new出来的 我们要结合元表的知识</span><br><span class="hljs-keyword">local</span> myobj = Object:new()<br><span class="hljs-built_in">print</span>(myobj)<br><span class="hljs-built_in">print</span>(myobj.id) <span class="hljs-comment">--1</span><br>myobj:Test()<span class="hljs-comment">--注意调用形式</span><br><span class="hljs-comment">--ps 注意</span><br>myobj.id=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(Object.id)<span class="hljs-comment">--还会是1 因为myobj是空表 他的声明一个新的属性为id</span><br></code></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>由于类也是对象，他们可以从其他类获得方法，这种行为就是一种继承。</p><p>假设有一个基类<code>Account</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua">Account = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account:new</span><span class="hljs-params">(o)</span></span><br>    o = o <span class="hljs-keyword">or</span> &#123;&#125;<br>    <span class="hljs-built_in">setmetatable</span>(o, <span class="hljs-built_in">self</span>)<br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">__index</span> = <span class="hljs-built_in">self</span><br>    <span class="hljs-keyword">return</span> o<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account:deposit</span><span class="hljs-params">(v)</span></span><br>    <span class="hljs-built_in">self</span>.balance = <span class="hljs-built_in">self</span>.balance + v<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Account:withdraw</span><span class="hljs-params">(v)</span></span><br>    <span class="hljs-keyword">if</span> v &gt; <span class="hljs-built_in">self</span>.balance <span class="hljs-keyword">then</span> <span class="hljs-built_in">error</span> <span class="hljs-string">&quot;insufficient funds&quot;</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">self</span>.balance = <span class="hljs-built_in">self</span>.balance - v<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  若想从这个类派生出一个子类<code>SpecialAccount</code>，以使客户能够透支。则先需要创建一个空的类，从基类继承所有的操作：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">SpecialAccount = Account:new()<br></code></pre></td></tr></table></figure><p>  直到现在，<code>SpecialAccount</code>还只是<code>Account</code>的一个实例</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">s = SpecialAccount:new&#123;limit=<span class="hljs-number">1000.00</span>&#125;<br></code></pre></td></tr></table></figure><p>  <code>SpecialAccount</code>从<code>Account</code>继承了<code>new</code>，就像继承其他方法一样。不过这次<code>new</code>在执行时，它的<code>self</code>参数表示为<code>SpecialAccount</code>。因此，s的元表为<code>SpecialAccount</code>，<code>SpecialAccount</code>中字段<code>__index</code>的值也是<code>SpecialAccount</code>。<code>s</code>继承自<code>SpecialAccount</code>，而<code>SpecialAccount</code>又继承自<code>Account</code>。当执行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">s:deposit(<span class="hljs-number">100.00</span>)<br></code></pre></td></tr></table></figure><p>  Lua在<code>s</code>中找不到<code>deposit</code>字段时，就会查找<code>SpecialAccount</code>。如果仍找不到<code>deposit</code>字段，就查找<code>Account</code>。最终会在那里找到<code>deposit</code>的原始实现。</p><p>  <code>SpecialAccount</code>之所以特殊是因为可以重定义那些从基类继承的方法。编写一个方法的新实现只需：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SpecialAccount:withdraw</span><span class="hljs-params">(v)</span></span><br>    <span class="hljs-keyword">if</span> v - <span class="hljs-built_in">self</span>.balance &gt;= <span class="hljs-built_in">self</span>:getLimit() <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">error</span> <span class="hljs-string">&quot;insufficient funds&quot;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">self</span>.balane = <span class="hljs-built_in">self</span>.balance - v<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SpecialAccount:getLimit</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.limit <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  现在，当调用<code>s:withdraw(200.00)</code>时，Lua就不会在<code>Account</code>中查找了。因为Lua会在<code>SpecialAccount</code>中先找到<code>withdraw</code>方法。由于<code>s.limit</code>为1000.00，程序会执行取款，并使<code>s</code>变成一个负的余额。</p><p>  Lua中的对象有一个特殊现象，就是无须为指定一种新行为而创建一个新类。如果只有一个对象需要某种特殊的行为，那么可以直接在该对象中实现这个行为。例如，账户<code>s</code>表示一个特殊的客户，这个客户的透支额度总是其余额的10%。那么可以只修改这个对象：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s:getLimit</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.balance * <span class="hljs-number">0.10</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>  在这段代码后，调用<code>s:withdraw(200.00)</code>还是会执行<code>SpecialAccount</code>的<code>withdraw</code>。但<code>withdraw</code>所调用的<code>self:getLimit</code>则是上面这个定义。</p><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--继承</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Object:SubClass</span><span class="hljs-params">(ClassName)</span></span><br>     <span class="hljs-built_in">_G</span>[ClassName]=&#123;&#125;<br>    <span class="hljs-keyword">local</span> obj=<span class="hljs-built_in">_G</span>[ClassName]<br>    obj.base=<span class="hljs-built_in">self</span><br>    <span class="hljs-comment">--给子类设置元表</span><br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">__index</span>=<span class="hljs-built_in">self</span><br>    <span class="hljs-built_in">setmetatable</span>(obj,<span class="hljs-built_in">self</span>)<br><span class="hljs-keyword">end</span><br><br>Object:SubClass(<span class="hljs-string">&quot;GameObject&quot;</span>)<br>GameObject.posx=<span class="hljs-number">0</span>;<br>GameObject.posy=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GameObject:Move</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">self</span>.posx=<span class="hljs-built_in">self</span>.posy+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">self</span>.posy=<span class="hljs-built_in">self</span>.posy+<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> obj=GameObject:new()<br><span class="hljs-built_in">print</span>(obj.posx)<br>obj:Move()<br><span class="hljs-built_in">print</span>(obj.posx)<br><br><span class="hljs-keyword">local</span> obj2=GameObject:new()<br><span class="hljs-built_in">print</span>(obj2.posx)<br>obj2:Move()<br><span class="hljs-built_in">print</span>(obj2.posx)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;********&quot;</span>)<br><span class="hljs-comment">--多态</span><br>GameObject:SubClass(<span class="hljs-string">&quot;Player&quot;</span>)<br><span class="hljs-comment">--重写方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Player:Move</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">self</span>.base.Move(<span class="hljs-built_in">self</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> p1=Player:new()<br><span class="hljs-built_in">print</span>(p1.posx)<br>p1:Move()<br><span class="hljs-built_in">print</span>(p1.posx)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lua</tag>
      
      <tag>热更新</tag>
      
      <tag>Xlua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSharp委托</title>
    <link href="/2023/03/07/CSharp/CSharp%E5%A7%94%E6%89%98/"/>
    <url>/2023/03/07/CSharp/CSharp%E5%A7%94%E6%89%98/</url>
    
    <content type="html"><![CDATA[<h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托： 函数指针的“升级版”；（C&#x2F;C++中的函数指针）<br>委托分类： Action委托、Function委托、自定义委托(delegate)；<br>“一切皆地址”： 程序（本质） &#x3D; 数据 + 算法；（变量（数据） 是以某个地址为起点的一段内存中所存储的值；函数（算法） 是以某个地址为起点的一段内存中所存储的一组机器语言指令）<br>Java 中没有与委托相对应的功能实体</p><p><strong>委托是函数(方法)的容器</strong>，可以理解为表示函数(方法)的变量类型，用来存储、传递函数(方法)。委托的本质是一个类，用来定义函数(方法)的类型(返回值和参数的类型)，不同的函数(方法)必须对应和各自”格式”一致的委托</p><h5 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h5><p>相同点 </p><ul><li>引用类型可以实现接口，值类型当中的结构体也可以实现接口；</li><li>引用类型和值类型都继承自System.Object类。</li></ul><p>区别</p><p>范围方面<br>C#的值类型包括：结构体（数值类型、bool型、用户定义的结构体），枚举，可空类型。<br>C#的引用类型包括：数组，用户定义的类、接口、委托，object，字符串。<br>内存分配方面：<br>数组的元素不管是引用类型还是值类型，都存储在托管堆上。<br>引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。简称引类型部署在托管推上；<br>而值类型总是分配在它声明的地方：作为字段时，跟随其所属的变量（实 例）存储；作为局部变量时，存储在栈上。（栈的内存是自动释放的，堆内存是.NET中会由GC来自动释放）<br>适用场合<br>值类型在内存管理方面具有更好的效率，并且不支持多态，适合用做存储数据的载体；引用类型支持多态，适合用于定义应用程序的行为。<br>引用类型可以派生出新的类型，而值类型不能，因为所有的值类型都是密封（seal）的；<br>引用类型可以包含null值，值类型不能（可空类型功能允许将 null 赋给值类型，如 int? a &#x3D; null; ）；<br>引用类型变量的赋值只复制对对象的引用，而不复制对象本身。而将一个值类型变量赋给另一个值类型变量时，将复制包含的值。</p><h5 id="三种不同的委托类型"><a href="#三种不同的委托类型" class="headerlink" title="三种不同的委托类型"></a>三种不同的委托类型</h5><h6 id="Action-委托：-指向无返回值成员"><a href="#Action-委托：-指向无返回值成员" class="headerlink" title="Action 委托： 指向无返回值成员"></a><strong>Action 委托：</strong> 指向无返回值成员</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 需要引入命名空间 using System;</span><br><span class="hljs-comment">//Action&lt;&gt;-----这是一个可以传最少1个最多16个不同类型参数的无返回值委托</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Combine</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//无返回值委托</span><br>            Action&lt;<span class="hljs-built_in">string</span>&gt; action = <span class="hljs-keyword">new</span> Action&lt;<span class="hljs-built_in">string</span>&gt;(sayHello);<br>            action.Invoke(<span class="hljs-string">&quot;heart&quot;</span>);<br>            <span class="hljs-keyword">var</span> action2 = <span class="hljs-keyword">new</span> Action&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;(sayHello);<br>            action2(<span class="hljs-string">&quot;Heart&quot;</span>, <span class="hljs-number">3</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">$&quot;Hello,<span class="hljs-subst">&#123;name&#125;</span>&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name,<span class="hljs-built_in">int</span> rount</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; rount; i++)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;Hello,<span class="hljs-subst">&#123;name&#125;</span>&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h6 id="Function委托：指向有返回值成员"><a href="#Function委托：指向有返回值成员" class="headerlink" title="Function委托：指向有返回值成员"></a>Function委托：指向有返回值成员</h6><p>（Func&lt;参数1类型，参数2类型，返回值类型&gt;）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//Func&lt;T&gt;-----泛型委托(一个可以根据泛型指定返回值类型的泛型无参委托)</span><br><span class="hljs-comment">//可以传n(1-15)个参数的并且有返回值的委托，系统提供了16种重载</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Combine</span><br>   &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>       &#123;<br>           <span class="hljs-comment">//有返回值委托</span><br>           Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt; func = <span class="hljs-keyword">new</span> Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt;(Add);<br>           <span class="hljs-built_in">int</span> res= func(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>);<br>           Console.WriteLine(res);<br>       &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> x + y;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span> <span class="hljs-title">Mul</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> x, <span class="hljs-built_in">double</span> y</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> x * y;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h6 id="delegate-自定义委托"><a href="#delegate-自定义委托" class="headerlink" title="delegate 自定义委托"></a>delegate 自定义委托</h6><p>【修饰符】 delegate 【返回类型】【名称】（【参数列表】） （例如：public delegate int Add(int x,int y)）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 访问修饰默认不写，则为public，中别的命名空间中也可以使用</span><br><span class="hljs-comment">// private 其他命名空间就不能用了，一般使用public</span><br><span class="hljs-comment">//这里申明了一个可以用来存储无参无返回值函数的容器</span><br><span class="hljs-comment">// 现在这里只是定义了规则，并没有使用</span><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun</span>()</span>;<br><span class="hljs-comment">// ***注意：(在同一语句块中)委托不存在同名的两个委托，编辑器会报错误的，它不是函数不能重载</span><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Fun2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a</span>)</span>;<span class="hljs-comment">// 表示用来装载或者传递返回值为int 有一个int参数的函数的委托容器规则</span><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Mydele</span>()</span>;<span class="hljs-comment">//无返回</span><br><br>    <span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Mydele2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloDelegate</span><br>    &#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//dele1，这个变量引用着一个Mydele的实例，实例里包裹这M1的方法</span><br>            Mydele dele1 = <span class="hljs-keyword">new</span> Mydele(M1);<br>            dele1 += M1;<span class="hljs-comment">//又包裹了一层M1进去</span><br>            dele1.Invoke();<br><br>            Student stu = <span class="hljs-keyword">new</span> Student();<br>            dele1 += stu.SayHello;<br>            <span class="hljs-comment">//dele1 += new Student().SayHello; 另外一种方法</span><br>            dele1.Invoke();<span class="hljs-comment">//因为又Invoke了一次，所以M1又会执行两次然后是SayHello</span><br>            Console.WriteLine(<span class="hljs-string">&quot;*******************&quot;</span>);<br>            <br>            Mydele2 mydele2 = <span class="hljs-keyword">new</span> Mydele2(M2Add);<br>            Console.WriteLine(mydele2.Invoke(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>            <br>         <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">M1</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;M1 执行了&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">M2Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SayHello</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello 我是学生&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="委托的一般使用"><a href="#委托的一般使用" class="headerlink" title="委托的一般使用"></a>委托的一般使用</h5><h6 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a><strong>模板方法</strong></h6><h6 id="借用指定的外部方法产生结果（可最大限度重用代码）"><a href="#借用指定的外部方法产生结果（可最大限度重用代码）" class="headerlink" title="借用指定的外部方法产生结果（可最大限度重用代码）"></a>借用指定的外部方法产生结果（可最大限度重用代码）</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">double</span> <span class="hljs-title">Cal</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> x, <span class="hljs-built_in">double</span> y</span>)</span>;<span class="hljs-comment">//委托声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        ProductFactory productFactory = <span class="hljs-keyword">new</span> ProductFactory(); <span class="hljs-comment">//声明产品方法</span><br>        WrapFactory wrapFactory = <span class="hljs-keyword">new</span> WrapFactory();  <span class="hljs-comment">//声明产品封装方法</span><br><br>        Func&lt;Product&gt; func1 = <span class="hljs-keyword">new</span> Func&lt;Product&gt;(productFactory.MakePizza);<span class="hljs-comment">//声明委托方法，获取产品名字信息，并作为产品封装方法的传入参数</span><br>        Func&lt;Product&gt; func2 = <span class="hljs-keyword">new</span> Func&lt;Product&gt;(productFactory.MakeToCar);<br><br>        Box box1 = wrapFactory.WrapProduct(func1); <span class="hljs-comment">//调用产品封装方法，输出含产品名字信息的box类</span><br>        Box box2 = wrapFactory.WrapProduct(func2);<br><br>        System.Console.WriteLine(box1.Product.Name); <span class="hljs-comment">//输出结果</span><br>        System.Console.WriteLine(box2.Product.Name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Product Product &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">WrapFactory</span><br>&#123;<br>    <span class="hljs-comment">//传入委托参数，内部使用委托方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Box <span class="hljs-title">WrapProduct</span>(<span class="hljs-params">Func&lt;Product&gt; getProduct</span>)</span><br>    &#123;<br>        Box box = <span class="hljs-keyword">new</span> Box();<br>        Product product = getProduct.Invoke();<span class="hljs-comment">//调用委托方法，即所传入委托参数的成员类型</span><br>        box.Product = product;<br>        <span class="hljs-keyword">return</span> box;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">ProductFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">MakePizza</span>()</span><br>    &#123;<br>        Product product = <span class="hljs-keyword">new</span> Product();<br>        product.Name = <span class="hljs-string">&quot;Pizza&quot;</span>;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">MakeToCar</span>()</span><br>    &#123;<br>        Product product = <span class="hljs-keyword">new</span> Product();<br>        product.Name = <span class="hljs-string">&quot;MakeToCar&quot;</span>;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="回调（callback）方法"><a href="#回调（callback）方法" class="headerlink" title="回调（callback）方法"></a><strong>回调（callback）方法</strong></h6><p>调用指定的外部方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public delegate double <span class="hljs-constructor">Cal(<span class="hljs-params">double</span> <span class="hljs-params">x</span>, <span class="hljs-params">double</span> <span class="hljs-params">y</span>)</span>;<span class="hljs-comment">//委托声明</span><br>   <span class="hljs-keyword">class</span> Program<br>   &#123;<br>       static void <span class="hljs-constructor">Main(<span class="hljs-params">string</span>[] <span class="hljs-params">args</span>)</span><br>       &#123;<br>           ProductFactory productFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ProductFactory()</span>; <span class="hljs-comment">//声明产品方法</span><br>           WrapFactory wrapFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">WrapFactory()</span>;  <span class="hljs-comment">//声明产品封装方法</span><br><br>           Func&lt;Product&gt; func1 = <span class="hljs-keyword">new</span> Func&lt;Product&gt;(productFactory.MakePizza);<span class="hljs-comment">//声明委托方法，获取产品名字信息，并作为产品封装方法的传入参数</span><br>           Func&lt;Product&gt; func2 = <span class="hljs-keyword">new</span> Func&lt;Product&gt;(productFactory.MakeToCar);<br><br>           Logger logger = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Logger()</span>; <span class="hljs-comment">//声明产品记录方法</span><br>           Action&lt;Product&gt; log = <span class="hljs-keyword">new</span> Action&lt;Product&gt;(logger.Log);<br><br>           Box box1 = wrapFactory.<span class="hljs-constructor">WrapProduct(<span class="hljs-params">func1</span>, <span class="hljs-params">log</span>)</span>; <span class="hljs-comment">//调用产品封装方法，输出含产品名字信息的box类</span><br>           Box box2 = wrapFactory.<span class="hljs-constructor">WrapProduct(<span class="hljs-params">func2</span>, <span class="hljs-params">log</span>)</span>;<br><br>           System.Console.<span class="hljs-constructor">WriteLine(<span class="hljs-params">box1</span>.Product.Name)</span>; <span class="hljs-comment">//输出结果</span><br>           System.Console.<span class="hljs-constructor">WriteLine(<span class="hljs-params">box2</span>.Product.Name)</span>;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">//定义记录产品信息类</span><br>   <span class="hljs-keyword">class</span> Logger<br>   &#123;<br>       public void <span class="hljs-constructor">Log(Product <span class="hljs-params">product</span>)</span><br>       &#123;<br>           System.Console.<span class="hljs-constructor">WriteLine(<span class="hljs-string">&quot;Product&#x27;&#123;0&#125;&#x27; create at &#123;1&#125; Price is &#123;2&#125;.&quot;</span>, <span class="hljs-params">product</span>.Name, DateTime.UtcNow, <span class="hljs-params">product</span>.Price)</span>; <span class="hljs-comment">//utcNow为不带时区的时间形式</span><br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> Product<br>   &#123;<br>       public <span class="hljs-built_in">string</span> Name &#123; get; set; &#125;<br>       public double Price &#123; get; set; &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> Box<br>   &#123;<br>       public Product Product &#123; get; set; &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> WrapFactory<br>   &#123;<br>       <span class="hljs-comment">//传入委托参数，内部使用委托方法</span><br>       public Box <span class="hljs-constructor">WrapProduct(Func&lt;Product&gt; <span class="hljs-params">getProduct</span>, Action&lt;Product&gt; <span class="hljs-params">logCallBack</span>)</span><br>       &#123;<br>           Box box = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Box()</span>;<br>           Product product = getProduct.<span class="hljs-constructor">Invoke()</span>;<span class="hljs-comment">//调用委托方法，即所传入委托参数的成员类型</span><br>           <span class="hljs-keyword">if</span> (product.Price &gt; <span class="hljs-number">50</span>)<br>           &#123;<br>               logCallBack.<span class="hljs-constructor">Invoke(<span class="hljs-params">product</span>)</span>;<br>           &#125;<br>           box.Product = product;<br>           return box;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> ProductFactory<br>   &#123;<br>       public Product <span class="hljs-constructor">MakePizza()</span><br>       &#123;<br>           Product product = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Product()</span>;<br>           product.Name = <span class="hljs-string">&quot;Pizza&quot;</span>;<br>           product.Price = <span class="hljs-number">12</span>;<br>           return product;<br>       &#125;<br><br>       public Product <span class="hljs-constructor">MakeToCar()</span><br>       &#123;<br>           Product product = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Product()</span>;<br>           product.Name = <span class="hljs-string">&quot;MakeToCar&quot;</span>;<br>           product.Price = <span class="hljs-number">100</span>;<br>           return product;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h6 id="模板方法和回调方法的本"><a href="#模板方法和回调方法的本" class="headerlink" title="模板方法和回调方法的本"></a><strong>模板方法和回调方法的本</strong></h6><p>用委托类型的参数，封装一个外部方法，然后将此方法传递到方法内部，进行间接调用。</p><p>区别</p><p>模板方法：<br>相当于“填空题”；<br>常位于代码中部；<br>委托有返回值</p><p>回调方法：<br>相当于“流水线”；<br>常位于代码末尾；<br>委托无返回值</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><h5 id="什么是匿名函数"><a href="#什么是匿名函数" class="headerlink" title="什么是匿名函数"></a>什么是匿名函数</h5><p>顾名思义,匿名函数就是没有名字的函数;匿名函数的使用主要是配合委托和事件进行使用的;脱离委托和事件是不会使用匿名函数的.</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">delegate</span> (参数列表)&#123;<br>    <span class="hljs-comment">// 函数逻辑</span><br>&#125;;<br><span class="hljs-comment">// 何时使用?</span><br><span class="hljs-comment">// 1.函数中传递委托参数时</span><br><span class="hljs-comment">// 2.委托或者事件赋值时</span><br></code></pre></td></tr></table></figure><h5 id="匿名函数的使用"><a href="#匿名函数的使用" class="headerlink" title="匿名函数的使用"></a>匿名函数的使用</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 1.无参无返回</span><br><span class="hljs-comment">// ***注意:我们是无法申明匿名函数的,匿名函数是无法脱离了委托和事件存在的,所以匿名函数申明必须作为委托或者事件的右值赋值给委托或者事件,而无法单独存在.</span><br>Action ac = <span class="hljs-built_in">delegate</span> ()&#123;<br>Console.WriteLine(<span class="hljs-string">&quot;123&quot;</span>);<br>&#125;;<br><span class="hljs-comment">// 执行匿名函数</span><br>ac();<br><br><span class="hljs-comment">//2.有参数</span><br>Action&lt;<span class="hljs-built_in">int</span> ,<span class="hljs-built_in">string</span>&gt; b = <span class="hljs-built_in">delegate</span> (<span class="hljs-built_in">int</span> a, <span class="hljs-built_in">string</span> b)&#123;<br>    Console.WriteLine(a);<br>    Console.WriteLine(b);<br>&#125;;<br><br><span class="hljs-comment">//3.有返回值</span><br>Func&lt;<span class="hljs-built_in">string</span>&gt; func = <span class="hljs-built_in">delegate</span> ()&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;123123&quot;</span>;  <br>&#125;;<br><span class="hljs-comment">// 执行</span><br>Console.WriteLine(func());<br><br><span class="hljs-comment">//4.一般情况会作为函数参数传递或者作为函数返回值</span><br><span class="hljs-comment">// 作为参数传递时</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> Action action;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSomething</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, Action fun</span>)</span>&#123;<br>       Console.WriteLine(a);<br>        fun();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Action <span class="hljs-title">GetFun</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">delegate</span> ()&#123;&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        <span class="hljs-comment">// 参数传递</span><br>        Test t = <span class="hljs-keyword">new</span> Test();<br>        t.DoSomething(<span class="hljs-number">100</span>, <span class="hljs-built_in">delegate</span> ()&#123;<br>           Console.WriteLine(<span class="hljs-string">&quot;随着参数传入的匿名函数&quot;</span>); <br>        &#125;);<br>        <br>        <span class="hljs-comment">// 返回值</span><br>        Action ac = t.GetFun();<br>ac();<br><span class="hljs-comment">// 我们也可以直接一步到位</span><br>        <span class="hljs-comment">// 我们先看前一半ac()返回了一个函数名,函数名＋后一半&quot;()&quot;相当于调用这个 函数</span><br>        ac()();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="匿名函数的缺点"><a href="#匿名函数的缺点" class="headerlink" title="匿名函数的缺点"></a>匿名函数的缺点</h5><p>添加到委托或者事件容器后,不记录下来的话,我们无法单独移除,因为我们的匿名函数没有函数名,所以唯一的方法是把委托或者事件容器全部清空才行.</p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><h5 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h5><p>Lambda表达式可以理解为匿名函数的简写形式，它除了写法上的不同外，使用上和功能上完全与匿名函数一模一样，优缺点也是一模一样的，同理，它也是需要配合委托或者事件使用的。</p><h5 id="lambda表达式语法"><a href="#lambda表达式语法" class="headerlink" title="lambda表达式语法"></a>lambda表达式语法</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">(参数列表)=&gt;&#123;<br>    <span class="hljs-comment">// 函数体</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="lambda表达式的使用"><a href="#lambda表达式的使用" class="headerlink" title="lambda表达式的使用"></a>lambda表达式的使用</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt; func = <span class="hljs-keyword">new</span> Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt;((<span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b) =&gt; &#123; <span class="hljs-keyword">return</span> a + b;&#125;);<br>        <span class="hljs-built_in">int</span> res = func(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>);<br>        Console.WriteLine(res);<br>        func = <span class="hljs-keyword">new</span> Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt;((x, y) =&gt; &#123; <span class="hljs-keyword">return</span> x * y; &#125;); <span class="hljs-comment">//不带类型也OK</span><br>        res = func(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>        Console.WriteLine(res);<br>        func = ((x, y) =&gt; &#123; <span class="hljs-keyword">return</span> x / y; &#125;); <span class="hljs-comment">//最简洁写法</span><br>        res = func(<span class="hljs-number">15</span>, <span class="hljs-number">5</span>);<br>        Console.WriteLine(res);<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//类型可以被推断出来，可以省略</span><br>            DoSomeCals(( a, b) =&gt; &#123; <span class="hljs-keyword">return</span> a * b;&#125;,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSomeCals</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">Func&lt;T, T, T&gt; func, T x, T y</span>)</span><br>        &#123;<br>          T res=  func(x, y);<br>          Console.WriteLine(res);<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型</title>
    <link href="/2023/03/05/CSharp/%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/03/05/CSharp/%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>为了避免成员膨胀或者类型膨胀，泛型实现了类型参数化，达到代码重用的目的，通过类型参数化来实现同一份代码上的多种类型操作。</p><p>泛型相当于类型占位符，定义类或方法时候使用替代符代表变量类型，当真正使用类或者方法时候再具体指定类型。</p><p>泛型具有正交性 泛型类型 (类&#x2F;接口&#x2F;委托&#x2F; …) 泛型成员 (属性&#x2F;方法&#x2F;字段)等</p><h6 id="泛型基本语法"><a href="#泛型基本语法" class="headerlink" title="泛型基本语法"></a>泛型基本语法</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> 类名&lt;泛型占位字母&gt;<br><span class="hljs-comment">// 举例：下面就是一个泛型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span>&lt;<span class="hljs-title">T</span>&gt;&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-keyword">value</span>;<br>&#125;<br><span class="hljs-comment">// 当我们要用这个类的时候，我们需要在申明跟初始化的时候去告诉我们的编译器它的泛型是什么类型</span><br><span class="hljs-comment">// 举例：下面就是一个泛型类的使用</span><br><span class="hljs-comment">// 我们把泛型指定为了int类型，这时候我们Test里面的成员value就是一个int类型的字段了</span><br>Test&lt;<span class="hljs-built_in">int</span>&gt; test = <span class="hljs-keyword">new</span> Test&lt;<span class="hljs-built_in">int</span>&gt;();<br><br><span class="hljs-comment">// 我们把泛型指定为了string类型，这时候我们Test里面的成员value就是一个string类型的字段了</span><br>Test&lt;<span class="hljs-built_in">string</span>&gt; test = <span class="hljs-keyword">new</span> Test&lt;<span class="hljs-built_in">string</span>&gt;();<br><span class="hljs-comment">// ***总结：我们可以很明显的看到了，我们声明的泛型类可以满足我们的不同需求，一份代码可以多次重用，这是泛型类最大的特点</span><br><br><span class="hljs-keyword">interface</span> 接口名&lt;泛型占位字母&gt;<br><span class="hljs-comment">// 举例：下面就是一个泛型接口的使用</span><br><span class="hljs-title">interface</span> <span class="hljs-title">TestInterface</span>&lt;<span class="hljs-title">T</span>&gt;&#123;<br>    T <span class="hljs-keyword">value</span>&#123;<br>        <span class="hljs-keyword">get</span>;<br>        <span class="hljs-keyword">set</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 我们可以看到，当我们继承了某个泛型接口的时候，这时候我们是需要指定这个泛型的具体类型的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>:<span class="hljs-title">TestInterface</span>&lt;<span class="hljs-title">int</span>&gt;&#123;<br>    <br>&#125;<br><span class="hljs-comment">// *注意：泛型接口一样可以拥有多个泛型占位字母</span><br><br><span class="hljs-comment">// 泛型函数</span><br><span class="hljs-comment">// 基本语法：函数名&lt;泛型占位字母&gt;(参数列表)</span><br><span class="hljs-comment">// 举例：下面就是一个有一个参数的泛型函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Func</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T t1</span>)</span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// ***注意：泛型占位字母可以有多个，用逗号分开</span><br><span class="hljs-comment">// 举例：下面这个泛型方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Func2</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt;(<span class="hljs-params">K k1, V v1</span>)</span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 类和接口也是一样的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>, <span class="hljs-title">K</span>, <span class="hljs-title">M</span> <span class="hljs-title">LL</span>, <span class="hljs-title">Key</span> <span class="hljs-title">Value</span>&gt;&#123;<br>    <span class="hljs-keyword">public</span> T1 <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> T2 <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> K <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> MM <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> LL <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> Key <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">public</span> Value <span class="hljs-keyword">value</span>;<br>&#125;<br><br><span class="hljs-comment">// *注意：泛型占位字母/泛型占位符不单单只是“T”，还可以是任意的字母，只要是写在尖括号“&lt;&gt;”里面的字母，都算是泛型占位符</span><br></code></pre></td></tr></table></figure><p>泛型对于成员膨胀和类型膨胀具有良好的作用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//类型膨胀</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloGeneric</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Apple apple = <span class="hljs-keyword">new</span> Apple()&#123;Color = <span class="hljs-string">&quot;Red&quot;</span>&#125;;<br>            AppleBox appleBox = <span class="hljs-keyword">new</span> AppleBox() &#123;Cargo = apple&#125;;<br>            Console.WriteLine(appleBox.Cargo.Color);<br><br>            Book book = <span class="hljs-keyword">new</span> Book() &#123;Name = <span class="hljs-string">&quot;天空之城&quot;</span>&#125;;<br>            BookBox bookBox = <span class="hljs-keyword">new</span> BookBox() &#123;Cargo = book&#125;;<br>            Console.WriteLine(bookBox.Cargo.Name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Color &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Book</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">AppleBox</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Apple Cargo &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">BookBox</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Book Cargo &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br><span class="hljs-comment">//成员膨胀</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloGeneric</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Apple apple = <span class="hljs-keyword">new</span> Apple()&#123;Color = <span class="hljs-string">&quot;Red&quot;</span>&#125;;<br>            Book book = <span class="hljs-keyword">new</span> Book() &#123;Name = <span class="hljs-string">&quot;天空之城&quot;</span>&#125;;<br>            Box box1 = <span class="hljs-keyword">new</span> Box() &#123;Apple = apple&#125;;<br>            Box box2 = <span class="hljs-keyword">new</span> Box() &#123;Book = book&#125;;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Color &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Book</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Box</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Apple Apple &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> Book Book &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个例子就产生了类型膨胀，因为如果我们还想声明一本书或者苹果的颜色。有一种做法，是再声明一个盒子只装书。这显然会随着商品种类增多造成类型膨胀。或者是在盒子类里再多一个书的属性，这显然会造成成员膨胀。而如果使用接口，又感觉划不来。这时候，我们可以考虑使用泛型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>       &#123;<br>           Apple apple = <span class="hljs-keyword">new</span> Apple()&#123;Color = <span class="hljs-string">&quot;Red&quot;</span>&#125;;<br>           Book book = <span class="hljs-keyword">new</span> Book() &#123;Name = <span class="hljs-string">&quot;天空之城&quot;</span>&#125;;<br>           Box&lt;Apple&gt; box1 = <span class="hljs-keyword">new</span> Box&lt;Apple&gt;() &#123;Cargo = apple&#125;;<br>           Box&lt;Book&gt; box2 = <span class="hljs-keyword">new</span> Box&lt;Book&gt;() &#123;Cargo = book&#125;;<br>           Console.WriteLine(box1.Cargo.Color);<br>           Console.WriteLine(box2.Cargo.Name);<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span><br>   &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Color &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">Book</span><br>   &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&lt;<span class="hljs-title">TCargo</span>&gt;<br>   &#123;<br>       <span class="hljs-keyword">public</span> TCargo Cargo &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>使用泛型之后，我们就避免了成员膨胀和类型膨胀</p><h6 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//若类继承泛型接口，则该类为泛型类</span><br><span class="hljs-comment">//若类继承泛型特化接口，则该类不是泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceGeneric</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Student&lt;<span class="hljs-built_in">int</span>&gt; stu = <span class="hljs-keyword">new</span> Student&lt;<span class="hljs-built_in">int</span>&gt;();<br>            stu.id = <span class="hljs-number">101</span>;<br>            stu.Name = <span class="hljs-string">&quot;Heart&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">IUnique</span>&lt;<span class="hljs-title">Tid</span>&gt;<br>    &#123;<br>        Tid id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>&lt;<span class="hljs-title">Tid</span>&gt;:<span class="hljs-title">IUnique</span>&lt;<span class="hljs-title">Tid</span>&gt;<br>    &#123;<br>        <span class="hljs-keyword">public</span> Tid id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br>ps list 动态数组<br></code></pre></td></tr></table></figure><h6 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h6><p>普通类中的泛型方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>&#123;<br>    <span class="hljs-comment">// 下面是普通类中泛型方法的申明</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T <span class="hljs-keyword">value</span></span>)</span>&#123;<br>        Console.WriteLine(<span class="hljs-keyword">value</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 你也可以使用我们的无参泛型方法</span><br>    <span class="hljs-comment">// ***注意：泛型方法也是方法，所以它是支持函数重载的。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFunc</span>&lt;<span class="hljs-title">T</span>&gt;()</span>&#123;<br>        <span class="hljs-comment">// 泛型方法的内部去处理一些逻辑</span><br>        <span class="hljs-comment">// 例如得到我们类型的默认值</span><br>        T t = <span class="hljs-literal">default</span>(T);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 我们还可以利用泛型做一些特殊的返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">TestFunc</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 同理泛型方法也是可以有多个泛型占位符的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Func3</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>, <span class="hljs-title">T3</span>&gt;(<span class="hljs-params">T1 t1, T2 t2, T3 t3</span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接下来看如何使用我们申明的泛型方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>        <span class="hljs-comment">// 第一步，先申明跟实例化我们的类</span><br>        Test2 test2 = <span class="hljs-keyword">new</span> Test2();<br>        <span class="hljs-comment">// 第二部，使用我们的泛型方法，先把泛型占位符指定为具体的类型，然后再填写函数参数</span><br>        test2.TestFun&lt;<span class="hljs-built_in">string</span>&gt;(“<span class="hljs-number">123</span>”);<br>       <br>        <span class="hljs-comment">// ***注意:当我们有多个泛型方法的时候，我们是可以省略尖括号“&lt;&gt;”的方式，以直接传参数的方式，让编辑器自己去根据我们的参数类型确认调用哪个泛型方法，例如我们的函数重载一样。</span><br>        <span class="hljs-comment">// 举例子：我们的类中有一个是泛型方法但是参数是string类型的TestFunc&lt;T&gt;(string value)，还有一个是TestFunc&lt;T&gt;(T t1)</span><br>        <span class="hljs-comment">// 我们直接调用方法，并且传入一个字符串，这时候编辑器会默认调用我们的TestFunc&lt;T&gt;(string value)方法</span><br>        <span class="hljs-comment">// 我可以运行后，把鼠标放在下面这个语句上，然后按F12定位到它调用的函数，这样也可以找到我们调用了哪个泛型函数</span><br>        test2.TestFunc(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>泛型类中的泛型方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// ***注意：class Test&#123;&#125;和class Test&lt;T&gt;虽然看似是同名类，但是他们是不一样的类，你可以把&lt;T&gt;也看作类名的一部分来看。</span><br><span class="hljs-comment">// class Test&#123;&#125;是普通类，class Test&lt;T&gt;&#123;&#125;是泛型类，功能是也是不同的，所以是不一样的两个类，互不相关。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>&gt;&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-keyword">value</span>;<br>    <br>    <span class="hljs-comment">// ***注意：这个不叫泛型方法，因为T是泛型类申明的时候就指定，在使用这个函数的时候，我们就不能再去动态的变化了</span><br>    <span class="hljs-comment">// 那么什么是泛型方法？简单的说就是函数名后面带着一对尖括号“&lt;&gt;”的我们就可以当作是泛型方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>(<span class="hljs-params">T t</span>)</span>&#123;<br>    <br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params">stringp[] args</span>)</span>&#123;<br>        <span class="hljs-comment">// 泛型类，我们再申明和实例化的时候就需要指定我们的具体类型了</span><br>        Test&lt;<span class="hljs-built_in">int</span>&gt; test = <span class="hljs-keyword">new</span> Test&lt;<span class="hljs-built_in">int</span>&gt;();<br>        <span class="hljs-comment">// 调用泛型类中的方法的时候就不需要去指定了，直接调用。</span><br>        test.TestFun();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="泛型对类型方法的参数判断"><a href="#泛型对类型方法的参数判断" class="headerlink" title="泛型对类型方法的参数判断"></a>泛型对类型方法的参数判断</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//泛型方法调用时类型参数的自动推断 </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] s1 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>            <span class="hljs-built_in">int</span>[] s2 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>            <span class="hljs-built_in">double</span>[] s3 = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span> &#125;;<br>            <span class="hljs-built_in">double</span>[] s4 = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span> ,<span class="hljs-number">6.6</span>&#125;;<br>            <span class="hljs-keyword">var</span> result = Zip(s1, s2);<br>            Console.WriteLine(<span class="hljs-built_in">string</span>.Join(<span class="hljs-string">&quot;,&quot;</span>,result));<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> T[] <span class="hljs-title">Zip</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T[] a, T[] b</span>)</span><br>        &#123;<br>            T[] zipped = <span class="hljs-keyword">new</span> T[a.Length + b.Length];<br>            <span class="hljs-built_in">int</span> ai = <span class="hljs-number">0</span>, bi = <span class="hljs-number">0</span>, zi = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (ai &lt; a.Length) zipped[zi++] = a[ai++];<br>                <span class="hljs-keyword">if</span> (bi &lt; b.Length) zipped[zi++] = b[bi++];<br>            &#125;<br>            <span class="hljs-keyword">while</span> (ai &lt; a.Length || bi &lt; b.Length);<br><br>            <span class="hljs-keyword">return</span> zipped;<br>        &#125;<br></code></pre></td></tr></table></figure><p>泛型委托</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"> <span class="hljs-comment">//Action&lt;T&gt;泛型委托--只能引用无返回值的方法</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Action&lt;<span class="hljs-built_in">string</span>&gt; a1 = Say;<br>            a1(<span class="hljs-string">&quot;Heart&quot;</span>);<br>            Action&lt;<span class="hljs-built_in">int</span>&gt; a2 = Mul;<br>            a2.Invoke(<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Say</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">$&quot;Hello,<span class="hljs-subst">&#123;str&#125;</span>&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Mul</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span><br>        &#123;<br>            Console.WriteLine(x * <span class="hljs-number">100</span>);<br>        &#125;<br>        <br> <span class="hljs-comment">//Func&lt;T&gt;泛型委托--引用有返回值的方法     </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>          <span class="hljs-comment">//两个int的参数值 一个int 的返回值</span><br>            Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt; f1 = Add;<br>            Console.WriteLine( f1(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>            <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;<br><span class="hljs-comment">//匿名方法 lamba表达式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>          <span class="hljs-comment">//两个int的参数值 一个int 的返回值</span><br>            Func&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt; f1 = ( a, b)=&gt;&#123;retuen a+b&#125;;<br>            Console.WriteLine( f1(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>            <br>        &#125;<br></code></pre></td></tr></table></figure><p>总结</p><p>1.申明泛型时，它只是一个类型的占位符</p><p>2.泛型真正起作用的时候，是在使用它的时候</p><p>3.泛型占位字母可以有n个用逗号分开</p><p>4.泛型占位字母一般是大写字母</p><p>5.不确定泛型类型时获取默认值可以使用default(占位字母)</p><p>6.看到&lt;&gt;的字母那肯定是泛型</p><p><strong>作用</strong></p><p>让不同类型对象的相同逻辑处理就可以选择泛型</p><p>使用泛型可以一定程度上避免装箱拆箱</p><p>举例：优化我们的ArrayList</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 我们知道，ArrayList是一个object类型的数组组成，所以它是存在装箱拆箱的问题了，但是如果我们自己利用泛型重新一个ArrayList就可以达到我们优化的效果</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span>&lt;<span class="hljs-title">T</span>&gt;&#123;<br>    <span class="hljs-keyword">private</span> T[] array;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">T <span class="hljs-keyword">value</span></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span>(<span class="hljs-params">T <span class="hljs-keyword">value</span></span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="泛型的约束"><a href="#泛型的约束" class="headerlink" title="泛型的约束"></a>泛型的约束</h5><p><strong>关键字 where</strong></p><p>泛型约束一共有6种</p><p>1.值类型where 泛型字母：struct</p><p>2.引用类型where 泛型字母：class</p><p>3.存在无参公共构造函数 where 泛型字母：new()</p><p>4.某个类本身或者其派生类 where 泛型字母：类名</p><p>5.某个接口的派生类型     where 泛型字母：接口名</p><p>6.另一个泛型类型本身或者派生类型  where 泛型字母：另一个泛型字母</p><p>基本语法：where 泛型字母：约束的类型</p><h6 id="各种泛型的约束讲解"><a href="#各种泛型的约束讲解" class="headerlink" title="各种泛型的约束讲解"></a>各种泛型的约束讲解</h6><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 1.值类型约束</span><br><span class="hljs-comment">// 这样就代表了T一定是一个结构体，因为结构体是值类型(这里肯定会有疑问，那如果不是结构体呢？我传入int、float这类值类型还可以吗？下面的使用案例会有解释)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">struct</span>&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-keyword">value</span>;<br>    <span class="hljs-comment">// 这样代表泛型方法的泛型字母K也是一个值类型类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> TestFunc&lt;K&gt; <span class="hljs-keyword">where</span> K:<span class="hljs-keyword">struct</span>&#123;<br>        <br>&#125;<br>&#125;<br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>        <span class="hljs-comment">// 使用案例</span><br>        <span class="hljs-comment">// 大家会发现只要是值类型的都可以，那为什么上面我会说是T一定是一个结构体呢？我们可以把光标点一下int或者float然后按F12进入看看int和float的实现源码</span><br>        <span class="hljs-comment">// 当我们对int按下F12进去的时候，我们进入了</span><br>        <span class="hljs-comment">// public readonly struct Int32 : IComparable, IComparable&lt;Int32&gt;, IConvertible, IEquatable&lt;Int32&gt;, IFormattable&#123;.....&#125;</span><br>        <span class="hljs-comment">// 说明int真正的名字是int32，int只是int32的别名，它前面struct表示了int32是一个结构体，说明int类型本身就是一个结构体，同理的，也可以对float进行同样的操作，float的真正名字是Single,float是别名，它也是一个结构体类型。</span><br>        <span class="hljs-comment">// 为了避免产生疑问，我们之前学的结构体，算是自定义结构体的统称，其实只要是是值类型的实现，它的本身就是一个结构体。</span><br>        Test&lt;<span class="hljs-built_in">int</span>&gt; test = <span class="hljs-keyword">new</span> Test&lt;<span class="hljs-built_in">int</span>&gt;();<br>        Test&lt;<span class="hljs-built_in">float</span>&gt; test2 = <span class="hljs-keyword">new</span> Test&lt;&gt;(<span class="hljs-built_in">float</span>);<br>        test.TestFunc&lt;<span class="hljs-built_in">int</span>&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 2.引用类型约束</span><br><span class="hljs-comment">// 泛型必须是引用类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-keyword">class</span>&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-keyword">value</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>&lt;<span class="hljs-title">K</span>&gt;(<span class="hljs-params">K k</span>) <span class="hljs-keyword">where</span> K:<span class="hljs-keyword">class</span></span>&#123;<br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 使用案例</span><br>            Test2&lt;Random&gt; test = <span class="hljs-keyword">new</span> Test2&lt;Random&gt;();<br>            test.TestFun&lt;<span class="hljs-built_in">object</span>&gt;();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 3.公共无参构造约束</span><br><span class="hljs-comment">// 这个表示我们的泛型指定类型必须一个具有“公共”“无参”构造函数，两个条件缺一不可</span><br><span class="hljs-comment">// ***注意：结构体也满足此条件，如果有疑问可以接着往下看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">new</span>()&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-keyword">value</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>&lt;<span class="hljs-title">K</span>&gt;() <span class="hljs-keyword">where</span> K:<span class="hljs-keyword">new</span>()</span>&#123;<br>        <br>&#125;<br>&#125;<br><span class="hljs-comment">// 为了方便测试，我们再写一个用于测试的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test4</span>&#123;<br>  <span class="hljs-comment">// 当我们没有写任何构造函数的时候，会默认调用自带的公共无参构造函数</span><br>  <span class="hljs-comment">// 一定不能是私有类型或者保护类型！必须是public类型</span><br>  <span class="hljs-comment">// ***注意：当我们自己写了一个构造函数的时候，会顶掉我们的默认构造函数；如果我们写了一个无参的构造函数，其实意义不大就跟默认的公共构造函数的作用是一样的。但是一定记住，只要写了我们自己的构造函数之后，该类就会失去其原有的默认的公共无参构造函数。</span><br>&#125;<br><span class="hljs-comment">// 使用案例</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 因为我们Test4里面自带了默认的公共无参构造函数，所以下面这条语句没问题</span><br>            <span class="hljs-comment">// ***注意：当是我们不可以传入一个抽象类，因为抽象类是无法被实例化创建的。</span><br>            Test3&lt;Test4&gt; test = <span class="hljs-keyword">new</span> Test3&lt;Test4&gt;();<br>            <br>            <br>            <span class="hljs-comment">// ***注意：我们学过结构体也明白，结构体也是可以写构造函数的</span><br>            <span class="hljs-comment">// 我们是可以写入一个结构体类型的，因为结构体也具有无参构造函数</span><br>            Test3&lt;<span class="hljs-built_in">int</span>&gt; test3 = <span class="hljs-keyword">new</span> Test3&lt;&gt;(<span class="hljs-built_in">int</span>);<br>            <br>            <span class="hljs-comment">// ***注意：再提醒一下，结构体和类不一样，类中我们是可以写显式的无参构造函数的，但是在结构体中，我们是无法在其中写一个不带参数的无参公共构造函数的，这是因为编译器不允许的(为什么不被允许，可以自行Google，因为解释起来麻烦，具体的为什么在Unity中结构体无法作为等式的左值进行赋值修改，例如:this.transform.position.x = 10f，为什么不被允许，也是跟结构体和编辑器有关，可以自行Google。)，其次，注意一点，如果我们一定想在结构体中写构造函数的化，我们是必须实现其全部成员的带参构造函数，也就是说，我们的必须对其所有成员变量进行初始化。说到这里，再提醒一点，结构中声明的字段是不允许被初始化的(自行Google).</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 4.某个类本身或者其派生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>:<span class="hljs-title">Test1</span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// where T:类名约束的内容是该类型必须是该类名本身或者其派生类</span><br><span class="hljs-comment">// 下面约束的就是该类型必须是Test1本身这个类或者其子类Test2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">Test1</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 使用案例</span><br>Test&lt;Test1&gt; test1 = <span class="hljs-keyword">new</span> Test&lt;Test1&gt;();<br>        Test&lt;Test2&gt; test2 = <span class="hljs-keyword">new</span> Test&lt;&gt;(Test2);<br>        <span class="hljs-comment">// 注意传入的必须是这个类或者其子类，如果是这个类的父类是不允许的，会报错的，例如我们传入万物之父Object类，编辑器是会报错误的。</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 5.接口约束</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IFly</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IJump</span>:<span class="hljs-title">IFly</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span>:<span class="hljs-title">IFly</span>&#123;<br>    <span class="hljs-comment">// 这一行不需要管，因为我们继承了接口就需要实现接口的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 这一行不需要管，这里是抛出没有逻辑内容错处</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 接口约束，是指定类型是某个接口的派生类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">IFly</span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 使用案例            </span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 只要是接口本身或者其派生接口或者是继承至接口的普通类都可以传入</span><br>            Test&lt;Test2&gt; test = <span class="hljs-keyword">new</span> test&lt;Test2&gt;();<br>            Test&lt;IFly&gt; test2 = <span class="hljs-keyword">new</span> Test4&lt;IFly&gt;();<br>            Test&lt;IJump&gt; test3 = <span class="hljs-keyword">new</span> Test4&lt;IJump&gt;();<br>        <br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 6.另一个泛型约束</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> : <span class="hljs-title">Test1</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">U</span>&#123;<br>  <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 这里有点绕，我们拆开来看</span><br>            <span class="hljs-comment">// 我们把U先替换成Test1，这时候原本的class Test&lt;T, Test1&gt;where T : Test1&#123;&#125;是不是变成了，我们对类名的约束，也就是说，这时候剩下的泛型占位字母T要么是这个Test1类，要么是其子类</span><br>            Test&lt;Test2, Test1&gt; test = <span class="hljs-keyword">new</span> Test&lt;Test2, Test1&gt;();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h6 id="约束的组合使用"><a href="#约束的组合使用" class="headerlink" title="约束的组合使用"></a>约束的组合使用</h6><p>举个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 这里相当于我们约束了泛型占位字母T的类型必须是引用类型且拥有公共无参的构造函数</span><br><span class="hljs-comment">// ***注意：这里的class和new()两个约束条件是能倒过来，先写new()再写class的，因为，我们是现先有了类，才能有构造函数的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-keyword">class</span>, <span class="hljs-title">new</span>()&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 给个建议：泛型约束的组合使用根据排列组合可以拥有很多种组合方式，这里不一一的列举，我们可以在编辑器是自行尝试，只要是编辑器不报错误都算是一种约束的组合。</span><br></code></pre></td></tr></table></figure><h6 id="多个泛型有约束"><a href="#多个泛型有约束" class="headerlink" title="多个泛型有约束"></a>多个泛型有约束</h6><p>举个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 注意：多个泛型的约束是一个空格隔开，几个泛型字母就写几个where关键字，不要乱加逗号、冒号</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">K</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-keyword">class</span>, <span class="hljs-title">new</span>() <span class="hljs-keyword">where</span> <span class="hljs-title">K</span>:<span class="hljs-title">struct</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>泛型约束：让类型有一定限制</p><p>泛型约束的分类：class、struct、new()、类名、接口名、另一个泛型字母</p><p>注意：</p><p>1.可以组合使用</p><p>2.多个泛型约束用where连接即可</p>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射与特性</title>
    <link href="/2023/03/04/CSharp/%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%89%B9%E6%80%A7/"/>
    <url>/2023/03/04/CSharp/%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h6 id="程序集"><a href="#程序集" class="headerlink" title="程序集"></a>程序集</h6><p>程序集是经由编译器编译得到的，供进一步编译执行的之间产物。在Windows系统中，它一般表现为后缀为.<strong>dl</strong>l(库文件)或者.<strong>exe</strong>(可执行文件)的格式。</p><p>简单理解：<strong>程序集</strong>就是我们写的一个<strong>代码集合</strong>，我们现在写的所有代码最终都会被编译器翻译为一个程序集供给他人使用，比如一个代码库文件(dll)或者一个可执行文件(exe)。</p><h6 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h6><p>元数据就是用来描述数据的数据。这个概念不仅仅用于程序，在别的领域也有元数据。</p><p>简单理解：程序中的类，类中的函数，变量等等信息就是程序的元数据，有关程序以及类型的数据被称为元数据，它们保存在程序集中。</p><h6 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h6><p>而程序在运行过程中可以查看其他程序集或者自身的元数据。一个<strong>正在运行</strong>的程序<strong>查看本身或者其他程序的元数据</strong>的行为就叫反射。</p><p>简单理解：在程序运行时候，通过反射可以得到其他程序集或者自己程序集代码的各种信息，例如：类、函数、变量、对象等等，实例化它们，执行它们，操作它们。</p><p>反射常常与接口、依赖反转原则一起使用。反射事实上是.Net框架的内容，不是C#语言的内容。同时，单元测试、依赖注入、泛型编程，都基于反射机制。</p><p>给我一个对象，我能在不知道它是什么静态类型，且不使用new操作符的情况下，再创建出一个与它同类型的新对象，并且能够访问其方法。</p><p>简单为</p><ul><li>程序运行时得到所有元数据，包括元数据的特效</li><li>程序运行时，实例化对象，操作对象</li><li>程序运行时创建新对象，用这些对象执行任务</li></ul><p>使用new操作符，即是创造了一个紧耦合，直接地将所在类与new后的静态类型紧耦合在了一起。而使用反射，直接避免紧耦合的发生，降低了耦合度。</p><p>另一方面，在具体的工程中，在编写程序阶段，因为用户的请求很多变，你很难预测用户需求，不可能写成百上千的if-else语句使用静态的类型枚举出所有可能结果。这就体现了反射的动态效果。反射是在编写程序阶段，不确定具体逻辑的时候存在的。程序需要以不变应万变的能力，这个能力就是反射。</p><p>语法相关</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-number">1.</span>Type<br>使用type的成员获取有关类型声明的信息，有关类型的成员（构造函数 方法 字段 属性 类的事件）<br><span class="hljs-number">2.</span>GetType<br>   Object的GetType()可以获取对象的Type  通过类和结构体的名字也可以获取类型 <br>   ps 类名或者结构体名字必须包含命名空间<br>   例 Type type3 = Type.GetType(<span class="hljs-string">&quot;System.Int32&quot;</span>);<br>   <span class="hljs-keyword">typeof</span>()关键字传入类名也可以得到对象的Type <br>   ps：每个类都是唯一的，地址也是唯一的，所以每个Type指向的地址都是同一个地址<br><span class="hljs-number">3.</span>type.Assembly<br>得到类的程序集信息<br><span class="hljs-number">4.</span> GetMembers<br>获取类中的所有公共公开的成员  <br>ps 命名空间 <span class="hljs-keyword">using</span> System.Reflection<br><span class="hljs-number">5.</span>GetConstructors();<br>    获取类的公共构造函数 Type t =tperof（类）<br>    ConstructorInfo[] ctors = t.GetConstructors();<br><span class="hljs-number">6.</span>GetFields<br>    获取类的公共成员变量<br><span class="hljs-number">7.</span>通过Type类中的GetMethod方法得到类中的方法，MethodInfo是方法的反射信息<br><br>其他<br>    获取枚举：GetEnumName,GetEnumNames<br>    获取事件：GetEvent,GetEvents<br>    获取接口：GetInterface,GetInterfaces<br>    获取属性：GetProperty,GetPropertys<br></code></pre></td></tr></table></figure><p>我们回到接口Tank的例子 通过反射，我们没有动任何的静态类型，完全从内存里读取类型的描述和方法的描述调用</p><img src="/2023/03/04/CSharp/%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%89%B9%E6%80%A7/image-20230305193729561.png" class="" title="image-20230305193729561"><p>但是一般不会直接使用反射，而是会使用封装好了的反射。而封装好了的反射最重要的功能就是依赖注入。</p><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>依赖注入框架包Microsoft.Extensions.DependencyInjection  </p><p>依赖注入是依赖反射原则DIP的一个应用；<br>不用静态创建类的实例，只关注用了哪种接口和哪种类就可以获取类的成员</p><p>依赖注入最重要的是<strong>容器container</strong>，即sevice provider。其中装着很多类型和对应的接口，要实例的时候就向他要就行。</p><img src="/2023/03/04/CSharp/%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%89%B9%E6%80%A7/image-20230305202421288.png" class="" title="image-20230305202421288"><p>这样做的好处是什么呢？比如说程序有一个地方要改，不要heavytank了，全部变成lighttank。这时候如果用new操作符，就得改多处，而且还不能用一键替换，因为你不知道哪里要改哪里不用改。如果使用这样的封装反射，就只用改第二行就行。</p><p>但是依赖注入的强大不止于此</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> serviceCollection = <span class="hljs-keyword">new</span> ServiceCollection();<span class="hljs-comment">//容器</span><br>        serviceCollection.AddScoped(<span class="hljs-keyword">typeof</span>(ITank), <span class="hljs-keyword">typeof</span>(HeavyTank));<br>        serviceCollection.AddScoped(<span class="hljs-keyword">typeof</span>(IVehicle), <span class="hljs-keyword">typeof</span>(Car));<br>        serviceCollection.AddScoped&lt;Driver&gt;();<br>        <span class="hljs-comment">//typeof拿到动态类型描述;第一个参数是接口类型，第二个是实现接口类型的类型。</span><br>        <span class="hljs-keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();<br>        <span class="hljs-comment">//-----------------一次性的注册-------------------------------</span><br>        <span class="hljs-keyword">var</span> driver = serviceProvider.GetService&lt;Driver&gt;();<br>        driver.Drive();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IVehicle _vehicle;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Driver</span>(<span class="hljs-params">IVehicle vehicle</span>)</span><br>    &#123;<br>        _vehicle = vehicle;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Drive</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;I am driving a &#123;0&#125;.&quot;</span>,_vehicle.GetType().Name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Driver这个类本来要求产生实例时需要构造传入一个IVehicle，现在没传。容器会自动帮你在它已有的类型里面找到一个IVehicle接口的类，然后帮你自动创造一个实例传进去。比如这里就传进去了一个Car。</p><h4 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h4><p>程序集类，主要用于加载其他程序集，加载后才能用Type来使用其他程序集中的信息，如果想要使用不是自己程序集中的内容，需要先加载程序集，比如：dll文件（库文件）。简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或者类。</p><p>三种加载程序集的函数：</p><p>1.一般用来加载在同一文件下的其他程序集：Assembly asembly2 &#x3D; Assembly.LoadFrom(“包含程序集清单的文件的名称或者路径”);</p><p>2.一般用来加载不在同一文件下的其他程序集：</p><p>Assembly asembly &#x3D; Assembly.LoadFrom(“包含程序集清单的文件的名称或者路径”);</p><p>Assembly asembly3 &#x3D; Assembly.LoadFile(“要加载的文件的完全限定路径”);</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 1.先加载一个指定程序集</span><br><span class="hljs-comment">// 需要引用命名空间 System.Reflection;</span><br>Assembly asembly = Assembly.LoadFrom(<span class="hljs-string">@&quot;xxx\xxx\xxx\xxx\xxx.dll&quot;</span>);<br>Type[] types = asembly.GetTypes();<span class="hljs-comment">// 获取我们程序集中的所有类型</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; types.Length; i++)&#123;<br>    Console.WriteLine(types[i]); <span class="hljs-comment">// 打印我们反射中存储的所有的类型</span><br>&#125;<br><br><span class="hljs-comment">// 2.再加载程序集中的一个类对象，之后才能使用反射</span><br>Type icon = asembly.GetType(<span class="hljs-string">&quot;XXXX.类对象名字&quot;</span>);<br>MemberInfo[] members = icon.GetMembers();<span class="hljs-comment">// 得到我们icon中存储的所有成员</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i&lt; members.Length; i++)&#123;<br>    Console.WriteLine(members[i]);<br>&#125;<br><br><span class="hljs-comment">// 3.类库(dll库文件)工程创建</span><br>解决方案资源管理器-&gt;随便一个项目右键-&gt;添加-&gt;新建项目-&gt;选择类库(C<span class="hljs-meta"># .Net FrameWork)</span><br><br>作用：我们的类库文件一般是运行不了的，一般是用于给我们纯写逻辑代码和算法代码供给他人所用的，它内部不需要Main()方法的，我们一般写好之后，在解决方案资源管理器-&gt;点击项目名-&gt;右键-&gt;生成，然后我们就可以在我们的项目的文件夹下面找到我们的项目文件夹-&gt;bin-&gt;Debug就可以看到外面的两个文件一个是.dll，还有一个是.pdb。然后我们就可以用我们反射的知识去引用我们的dll文件。<br><br></code></pre></td></tr></table></figure><p>用于快速实例化对象的类，用于将Type对象快捷实例化为对象，先得到Type，然后快速实例化出一个对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#">Type testType = <span class="hljs-keyword">typeof</span>(Test);<br><span class="hljs-comment">// 1.无参构造</span><br>Test testObj = Activator.CreateInstance(testType) <span class="hljs-keyword">as</span> Test;<br>Console.WriteLine(testObj.str);<br><span class="hljs-comment">// 2.有参数构造</span><br><span class="hljs-comment">// 得到一个参数的构造函数的实例</span><br><span class="hljs-comment">// 参数1 反射， 参数2 我们的构造函数参数列表</span><br>testObj = Activator.CreateInstance(testType, <span class="hljs-number">99</span>) <span class="hljs-keyword">as</span> Test;<br>Console.WriteLine(testObj.j);<br><span class="hljs-comment">// 我们再试试获取两个参数构造函数的实例</span><br>testObj = Activator.CreateInstance(testType, <span class="hljs-number">55</span>, <span class="hljs-string">&quot;111222&quot;</span>) <span class="hljs-keyword">as</span> Test;<br>Console.WriteLine(testObj.j);<br><span class="hljs-comment">// 注意：我们不能传入我们没有实现的构造函数，如果我们传入了我们没有实现的构造函数，运行后会直接报错。</span><br></code></pre></td></tr></table></figure><h4 id="反射总结"><a href="#反射总结" class="headerlink" title="反射总结"></a>反射总结</h4><p>反射：在程序运行时，通过反射可以得到其他程序集或者自己的程序集代码的各种信息，类、函数、变量、对象等等，实例化它们，执行它们，操作它们。</p><p>关键类：Type、Assembly、Activator。</p><p>为什么学习反射？Unity引擎的基本工作机制就是建立在反射的基础上的，学习反射是为了之后学习Unity引擎的基本工作原理做铺垫。</p><h4 id="3-特性"><a href="#3-特性" class="headerlink" title="3.特性"></a>3.特性</h4><h5 id="3-1特性是什么？"><a href="#3-1特性是什么？" class="headerlink" title="3.1特性是什么？"></a>3.1特性是什么？</h5><p>特性是一种允许我们向程序的程序集添加元数据的语言结构，它是用于保存程序结构信息的某种特殊类型的类。</p><p>特性提供功能强大的方法以将声明信息与C#代码（类型、方法、属性等）相关联。</p><p>特性与程序实体关联后，即可在运行时使用反射查询特性信息。</p><p>特性的目的是告诉编译器把程序结构的某组元数据嵌入程序集中，它可以放置在几乎所有的声明中（类、变量、函数等等申明）。</p><p>简单理解：特性本质是一个类，我们可以利用特性类为元数据添加额外信息，比如一个类、成员变量、成员方法等等为他们添加更多的额外信息，之后可以通过反射来获取得到这些额外信息。</p><h5 id="3-2自定义特性"><a href="#3-2自定义特性" class="headerlink" title="3.2自定义特性"></a>3.2自定义特性</h5><p>在上面我们讲解了特性的本质就是一个类，那么我们只需要先去申明一个类，然后让这个类基础至特性基类Attribute就可以了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCustomAttribute</span> : <span class="hljs-title">Attribute</span>&#123;<br>    <span class="hljs-comment">// 这个类的内容其实就是让你最后变成一个元数据的，方便外部利用反射引用的。</span><br><span class="hljs-comment">// 特性中的成员</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> info;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCustomAttribute</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> info</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;特性的方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3特性的使用"><a href="#3-3特性的使用" class="headerlink" title="3.3特性的使用"></a>3.3特性的使用</h5><p>基本语法：[特性名（参数列表）]，本质上就是在调用特性类的构造函数。</p><p>写在哪里?类、函数、变量上一行，表示他们具有该特性信息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 我们使用我们上一个知识点申明的特性</span><br><span class="hljs-comment">// 注意：系统会默认帮我们省略了类名后面的Attribute</span><br><span class="hljs-comment">// 参数列表里面根据我们的构造函数的参数列表传入参数</span><br>[<span class="hljs-meta">MyCustom(<span class="hljs-string">&quot;这是我自己写的一个用于计算的类&quot;</span>)</span>]<br><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>&#123;<br>    [<span class="hljs-meta">MyCustom(<span class="hljs-string">&quot;这是一个成员变量&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span>;<br>    [<span class="hljs-meta">MyCustom(<span class="hljs-string">&quot;这是一个用于计算加法的函数&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>(<span class="hljs-params">[MyCustom(<span class="hljs-string">&quot;函数参数&quot;</span><span class="hljs-built_in">int</span> a</span>)])</span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 特性的作用就是添加额外的信息，当我们通过反射得到这些成员的时候，我们可以获取到特性的信息来知道成员的用法。</span><br><span class="hljs-comment">// 举例：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        <span class="hljs-comment">// 特性的使用</span><br>        MyClass mc = <span class="hljs-keyword">new</span> MyClass();<br>        <span class="hljs-comment">// 得到Type的三种方法</span><br>        <span class="hljs-comment">// 1.Type t = mc.GetType();</span><br>        <span class="hljs-comment">// 2.t = typeof(MyClass);</span><br>        <span class="hljs-comment">// 3.t = Type.GetType(命名空间名字.MyClass)</span><br>        Type t = mc.GetType();<br>        <br>        <span class="hljs-comment">// 判断是否使用了某个特性</span><br>        <span class="hljs-comment">// 参数一：特性的类型</span><br>        <span class="hljs-comment">// 参数二：代表是否搜索继承链（属性和事件忽略此参数）</span><br>        <span class="hljs-comment">// 注意这个方法只是判断类是否使用了特性，类里面的成员是该方法无法判断</span><br>        <span class="hljs-keyword">if</span>(t.IsDefined(<span class="hljs-keyword">typeof</span>(MyCustomAtrribute)), <span class="hljs-literal">false</span>)&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;该类型应用了MyCustom特性&quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 获取Type元数据中的所有特性</span><br>        <span class="hljs-built_in">object</span>[] array = t.GetCustomAttribute(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; array.Length; i++)&#123;<br><span class="hljs-keyword">if</span>(array[i] <span class="hljs-keyword">is</span> MyCustomAttribute)&#123;<br>Console.WriteLine((array[i] <span class="hljs-keyword">as</span> MyCustomAttribute).info);<br>                <span class="hljs-comment">// 因为特性的本质就是一个类，所以我们甚至可以调用其中的方法</span><br>                (array[i] <span class="hljs-keyword">as</span> MyCustomAttribute).TestFun();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-4限制自定义特性的使用范围"><a href="#3-4限制自定义特性的使用范围" class="headerlink" title="3.4限制自定义特性的使用范围"></a>3.4限制自定义特性的使用范围</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 通过为特性类加特性限制其使用范围</span><br>[<span class="hljs-meta">AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = true)</span>]<br><span class="hljs-comment">// 参数一：AttributeTargets-----特性能够用在哪些地方</span><br><span class="hljs-comment">// 参数二：AllowMultiple-----是否允许多个特性实例用在同一个目标上</span><br><span class="hljs-comment">// 参数三：Inherited-----特性是否能被派生类和重写成员继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyCustom2Attribute</span> : <span class="hljs-title">Attribute</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-5系统自带特性——过时特性"><a href="#3-5系统自带特性——过时特性" class="headerlink" title="3.5系统自带特性——过时特性"></a>3.5系统自带特性——过时特性</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 过时特性-----Obsolete，用于提示用户使用的方法等成员已经过时，建议使用新方法，一般加在函数前的特性</span><br>Class TestClass&#123;<br>    <span class="hljs-comment">// 参数一：调用过时方法时提升的内容</span><br>    <span class="hljs-comment">// 参数二：true-使用该方法会报错(编译之前就会报错)，false-使用该方法自己报警告</span><br>    [<span class="hljs-meta">Obsolete(<span class="hljs-string">&quot;OldSpeak方法已经过时了，请使用Speak方法&quot;</span>), false</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OldSpeak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-6系统自带特性——调用者信息特性"><a href="#3-6系统自带特性——调用者信息特性" class="headerlink" title="3.6系统自带特性——调用者信息特性"></a>3.6系统自带特性——调用者信息特性</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 哪个文件调用?</span><br>CallerFilePath特性<br><span class="hljs-comment">// 哪一行调用？</span><br>CallerLineNumber特性<br><span class="hljs-comment">// 哪一个函数调用？</span><br>CallerMemberName特性<br><br><span class="hljs-comment">// 需要引用命名空间 using System.Runtime.CompilerServices;</span><br><span class="hljs-comment">// 一般作为函数参数的特性</span><br><span class="hljs-comment">// 举例：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-comment">// 注意：我们的调用者信息特性后面是需要有一个默认值的，不然会报错误</span><br>    <span class="hljs-comment">// 特性的默认值也可以让用户在调用函数的时候，指定传入，一般如果没有在调用函数的时候传值，系统会帮我们传入默认值：该文件的路径、该语句的行数、哪个函数在调用该函数。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str, [CallerFilePath]<span class="hljs-built_in">string</span> fileName = <span class="hljs-string">&quot;&quot;</span>, [CallerLineNumber]<span class="hljs-built_in">int</span> line = <span class="hljs-number">0</span>, [CallerMemberName]<span class="hljs-built_in">string</span> target = <span class="hljs-string">&quot;&quot;</span></span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-7系统自带特性——条件编译特性"><a href="#3-7系统自带特性——条件编译特性" class="headerlink" title="3.7系统自带特性——条件编译特性"></a>3.7系统自带特性——条件编译特性</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 条件编译特性-----Conditional </span><br><span class="hljs-comment">// 它会和预处理指令 #define配合使用，使用之前需要引用命名空间 using System.Diagnostics;</span><br><span class="hljs-comment">// 主要可以用在一些调式代码上，有时想执行有时不想执行的代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-comment">// 注意：一旦我们加了条件编译特性，那么下面这个静态方法Fun()就需要我们预先定义了#define Fun才可以使用，或者说Main()里面的Fun();才会被执行</span><br>    [<span class="hljs-meta">Conditional(<span class="hljs-string">&quot;Fun&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> Static <span class="hljs-title">Fun</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Fun&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-keyword">static</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        Fun();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-8系统自带特性——外部Dll包函数特性"><a href="#3-8系统自带特性——外部Dll包函数特性" class="headerlink" title="3.8系统自带特性——外部Dll包函数特性"></a>3.8系统自带特性——外部Dll包函数特性</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// DllImport</span><br><span class="hljs-comment">// 用来标记非.Net(C#)的函数，表明该函数在一个外部的DLL中定义。</span><br><span class="hljs-comment">// 一般用来调用C或者C++的Dll包写好的方法，需要引用命名空间 using System.Runtime.InteropServices;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-keyword">static</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        [<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;Test.dll&quot;</span>)</span>]<br>        <span class="hljs-comment">// 这句代码是把我们Test.dll包中与下面这个函数一定是存在着一模一样的函数，把C\C++中这个一模一样的函数映射到这个函数中</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h5><p>特性是用于为元数据再添加更多的额外信息（变量、方法等等），我们可以通过反射获取这些额外的数据来进行一些特殊的处理。</p><p>自定义特性—继承Attribute类</p><p>系统自带特性：过时特性</p><p>反射和特性的学习是为了之后Unity引擎学习的，因为Unity引擎中很多地方都用到了特性来进行一些特殊处理。</p>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
      <tag>特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interface，Abstract</title>
    <link href="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/"/>
    <url>/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/</url>
    
    <content type="html"><![CDATA[<h4 id="多态和VOB"><a href="#多态和VOB" class="headerlink" title="多态和VOB"></a>多态和VOB</h4><p>让继承同一父类的子类们在执行相同方法时候有不同的表现(状态)，主要目的是同一父类的对象执行相同行为(方法)有不同的表现，主要的解决的问题是让同一对象具有唯一行为的特征。</p><p>V- virtual (虚函数)  O - override (重写)  B -base (父类)</p><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/VOB.png" class="" title="VOB"><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>抽象类 被关键字 abstract 修饰的类</p><ol><li>具体类 -&gt; 抽象类 -&gt;接口 越来越抽象，内部所实现的东西越来越少</li><li>抽象类是未完全实现逻辑的类,(可以有字段和非public成员，代表了具体逻辑)</li><li>为复用而生 专门做基类使用，具有解耦功能 封装确定的，开放不确定的，推迟到合适的子类中实现</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Ball</span> <br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Stop</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Stop&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//解决方法        </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> type</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(type==<span class="hljs-string">&quot;Basketball&quot;</span>)<br>        Console.WriteLine(<span class="hljs-string">&quot;Basket ball running&quot;</span>);<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type==<span class="hljs-string">&quot;Football&quot;</span>)<br>        Console.WriteLine(<span class="hljs-string">&quot;Basket ball running&quot;</span>);<br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Basketball</span> : <span class="hljs-title">Ball</span><br>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Basket ball running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Football</span> : <span class="hljs-title">Ball</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Football ball running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这种情况下，然后想用多态的话，只能调用到Stop方法，调用不到Run，因为在基类没有Run方法，可以用上面解决方法解决，但这种写法违反了开闭原则，让新功能的添加不方便。所以我们使用虚方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br> &#123;<span class="hljs-comment">//子类重写记得override</span><br>     Console.WriteLine(<span class="hljs-string">&quot;running&quot;</span>);<br> &#125;<br>同时也可以去掉方法体变纯虚方法<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br></code></pre></td></tr></table></figure><p>同时类也就变成了抽象类，在这种情况下，<strong>新建一个类派生于抽象类的时候，就必须实现抽象方法</strong></p><p>抽象类，专为做基类而生，不能为基类创造实例，在这种情况下，我们就需要一个纯的抽象类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ballBase</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Stop</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是一个特别抽象到抽象到具体的一个情况，同时呢这个在实际上就是一个接口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//具体类-&gt;抽象类-&gt;接口 内部实现的东西越来越少 抽象类是未完全实现逻辑的类 为复用而生</span><br><span class="hljs-comment">//接口是完全未实现逻辑的类</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IBall</span><br>&#123;<br>    <span class="hljs-comment">//接口成员都是隐式Public 纯虚类 只有成员</span><br>    <span class="hljs-comment">//接口本身就包含了纯抽象的含义，在实现过程中override也要去掉</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Stop</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h4><ul><li>接口是未完全实现逻辑的类(纯虚类，只有函数成员，全部是隐式Public) 为解耦 </li><li>接口是行为的抽象规范；它也是一种自定义类型。</li><li>都不能实例化，只能用来声明变量，引用具体类的实例 类可以继承多个接口，必须实现所有接口成员</li><li>自底向上(重构)，自顶而下(设计)</li><li>接口可以被显示实现，主要用于实现不同接口中的同名函数的不同表现</li><li>实现的接口方法可以加virtual关键字之后子类再去重写</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceEngine</span><br>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> engine = <span class="hljs-keyword">new</span> Engine();<br>        <span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(engine);<br>        car.Run(<span class="hljs-number">3</span>);<br>        Console.WriteLine(car.Speed);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Engine</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> RPM &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Work</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> gas</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.RPM = <span class="hljs-number">1000</span> * gas;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Engine _engine;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span>(<span class="hljs-params">Engine engine</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>._engine = engine;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Speed &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> gas</span>)</span><br>    &#123;<br>        _engine.Work(gas);<br>        <span class="hljs-keyword">this</span>.Speed = _engine.RPM / <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子我们会发现，代码之间紧耦合，car依赖的engine类如果出现修改的话，car也会跟着出现问题，这不是我们希望看到的。解决这个问题的办法就是引入接口，降低代码之间的耦合度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfacePhone</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> PhoneUser(<span class="hljs-keyword">new</span> NokiaPhone());<br>        user.UserPhone();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneUser</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IPhone _phone;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PhoneUser</span>(<span class="hljs-params">IPhone phone</span>)</span><br>    &#123;<br>        _phone = phone;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UserPhone</span>()</span><br>    &#123;<br>        _phone.Dail();<br>        _phone.PickUp();<br>        _phone.Send();<br>        _phone.Receive();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title">IPhone</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dail</span>()</span>;<span class="hljs-comment">//拨号</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PickUp</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>()</span>;<span class="hljs-comment">//接收</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">NokiaPhone</span>:<span class="hljs-title">IPhone</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dail</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Nokia 拨号中&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PickUp</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Nokia 诺基亚&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Nokia 消息发送中&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Nokia 接收&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">VivoPhone</span>:<span class="hljs-title">IPhone</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dail</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Vivo 拨号中&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PickUp</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Vivo 诺基亚&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Vivo 消息发送中&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Vivo 接收&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在接口的写法下，我们如果想更换使用类，只需要更换实例就可以依旧实现相同的功能。</p><p><strong>在代码中，如果有可以替换的存在，就一定会有接口的存在</strong></p><p>PS：当类实现一个接口的时候，类与接口之间的关系也是”紧耦合”</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceSupply</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> fan = <span class="hljs-keyword">new</span> DeskFan(<span class="hljs-keyword">new</span> PowerSupply());<br>        Console.WriteLine(fan.Work());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//电源</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">PowerSupply</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetPower</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">150</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">DeskFan</span><br>&#123;<br>    <span class="hljs-keyword">private</span> PowerSupply _powerSupply;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeskFan</span>(<span class="hljs-params">PowerSupply powerSupply</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>._powerSupply = powerSupply;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Work</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> power = _powerSupply.GetPower();<br>        <span class="hljs-keyword">if</span> (power &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;不能工作，没电&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (power &lt; <span class="hljs-number">100</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电不够&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (power &lt; <span class="hljs-number">200</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;可以工作&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;警告，电流太大&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，电源的值是固定的，那么如果在另外的电器的电源需要的值更大，那么很可能就会影响到电扇的使用。代码耦合我们可以使用接口来解耦</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceSupply</span><br>   &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> fan = <span class="hljs-keyword">new</span> DeskFan(<span class="hljs-keyword">new</span> PowerSupply());<br>           <span class="hljs-keyword">var</span> fan2 = <span class="hljs-keyword">new</span> DeskFan(<span class="hljs-keyword">new</span> PowerSupply());<br>           Console.WriteLine(fan.Work());<br>           Console.WriteLine(fan2.Work());<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">interface</span> <span class="hljs-title">IPowerSupply</span><br>   &#123;<br>       <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">GetPower</span>()</span>;<br>   &#125;<br>   <br>   <span class="hljs-comment">//电源1</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title">PowerSupply</span>: <span class="hljs-title">IPowerSupply</span><br>   &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetPower</span>()</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">150</span>;<br>       &#125;<br>   &#125;<br>   <span class="hljs-comment">//电源2</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title">PowerSupply2</span>: <span class="hljs-title">IPowerSupply</span><br>   &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetPower</span>()</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">260</span>;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">DeskFan</span><br>   &#123;<br>       <span class="hljs-keyword">private</span> IPowerSupply _powerSupply;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeskFan</span>(<span class="hljs-params">IPowerSupply powerSupply</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">this</span>._powerSupply = powerSupply;<br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Work</span>()</span><br>       &#123;<br>           <span class="hljs-built_in">int</span> power = _powerSupply.GetPower();<br>           <span class="hljs-keyword">if</span> (power &lt;= <span class="hljs-number">0</span>)<br>           &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;不能工作，没电&quot;</span>;<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (power &lt; <span class="hljs-number">100</span>)<br>           &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电不够&quot;</span>;<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (power &lt; <span class="hljs-number">200</span>)<br>           &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;可以工作&quot;</span>;<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>           &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;警告，电流太大&quot;</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h5><p>抽象类和抽象方法：abstract修饰的类和方法，抽象类不能实例化，抽象方法只能在抽象类中申明，是个纯虚方法，必须在子类中实现</p><p>接口：interface自定义类型，是行为的抽象，不包含成员变量，仅包含方法、属性、索引器、事件、成员都不能实现，建议不写访问修饰符，默认public。</p><p><strong>相同点</strong></p><ul><li>都可以被继承</li><li>都不能被直接实例化</li><li>都可以包含方法申明</li><li>子类必须实现未实现的方法</li><li>都遵循里氏替换原则</li></ul><p><strong>不同点</strong></p><ul><li><p>抽象类中可以有构造函数；接口不行</p></li><li><p>抽象类只能被单一继承；接口可以被继承多个</p></li><li><p>抽象类中可以有成员变量；接口不能</p></li><li><p>抽象类中可以申明成员方法，虚方法，抽象方法，静态方法；接口中只能申明没有实现的抽象方法</p></li><li><p>抽象类方法可以使用访问修饰符；接口中建议不写，默认public</p></li></ul><h5 id="如何选择抽象类和接口"><a href="#如何选择抽象类和接口" class="headerlink" title="如何选择抽象类和接口"></a>如何选择抽象类和接口</h5><p>表示对象的用抽象类，表示拓展的用接口，不同对象拥有的共同行为，我们往往可以使用接口来实现。</p><p>举个例子：</p><p>动物是一类对象，我们自然会选择抽象类；而飞翔是一个行为，我们自然会选择接口。</p><h5 id="密封方法"><a href="#密封方法" class="headerlink" title="密封方法"></a>密封方法</h5><p>概念：用密封关键字sealed修饰的重写函数</p><p>作用：让虚方法或者抽象方法之后不能再被重写</p><p>特点：和override一起出现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span><br>  &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span>()</span>;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span><br>      &#123;<br>          Console.WriteLine(<span class="hljs-string">&quot;吃&quot;</span>);<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> : <span class="hljs-title">Animal</span><br>  &#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span>()</span><br>      &#123;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span><br>      &#123;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title">WhitePerson</span> : <span class="hljs-title">Peron</span><br>  &#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span>()</span><br>      &#123;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span><br>      &#123;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> : <span class="hljs-title">WhitePerson</span><br>  &#123;<br>      <span class="hljs-comment">// 我们会发现无法实现Eat()的方法了，因为父类把Eat()方法用sealed修饰了</span><br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h5><p>我们都知道，接口是一种对供需方均做出了约束的协议。对于供方，“不会少给”很容易做到，因为接口要求供方必须实现其里面的所有方法，否则不能实例化。但对于需方来说，“不会多要”这一点则是软性的。</p><p>需求方应该<strong>全部</strong>用到<strong>提供的接口</strong>里的东西，接口中不能存在一些完全没被用过的方法，即接口不能太大。如果接口太大，可以将其拆分成多个小接口。</p><h6 id="第一种违反接口隔离原则"><a href="#第一种违反接口隔离原则" class="headerlink" title="第一种违反接口隔离原则"></a>第一种违反接口隔离原则</h6><p>将过多的功能包含在接口里，传进来的接口太大，有些方法用不到，故应该分为小接口</p><p> 每个小接口都描述单一的功能，把本质不同的功能隔离开，用接口封装起来</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Interface_isolationTank</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Driver d = <span class="hljs-keyword">new</span> Driver(<span class="hljs-keyword">new</span> Car());<br>            d.Drive();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> IVehicle _vehicle;<br>        <span class="hljs-keyword">private</span> ITank _tank;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Driver</span>(<span class="hljs-params">IVehicle vehicle</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>._vehicle = vehicle;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Driver</span>(<span class="hljs-params">ITank tank</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>._tank = tank;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Drive</span>()</span><br>        &#123;<br>            _vehicle.Run();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">IVehicle</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">ITank</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fire</span>()</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> : <span class="hljs-title">IVehicle</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Car is Running&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">LightTank</span> :<span class="hljs-title">ITank</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fire</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;小坦克开火&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;小坦克走&quot;</span>);<br>        &#125;<br>    &#125;<br>   <br>   <br></code></pre></td></tr></table></figure><p>在这个例子中，我们只想把坦克作为代步工具，因而，ITank这个接口里的Fire方法完全用不到。</p><p>而事实上，我们确实可以把坦克这个事物在这个场景的意义下拆分为两方面，一方面是用于行走的轮子，一方面是用于攻击的火炮。因而，我们可以选择把ITank这个接口拆分为两个小接口，让tank全部都接上那两个小接口；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-keyword">class</span> <span class="hljs-title">Interface_isolationTank</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        IVehicle tank = <span class="hljs-keyword">new</span> HeavyTank();<br>        tank.Run();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IVehicle</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span>;<br>&#125;<br> <br> <br><span class="hljs-keyword">interface</span> <span class="hljs-title">IWeapon</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fire</span>()</span>;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title">HeavyTank</span> : <span class="hljs-title">IWeapon</span>,<span class="hljs-title">IVehicle</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fire</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Boom!!!&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;A heavytank is running......&quot;</span>); <br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>但是请注意，这个也不能使用得太过火了，因为它可能会让只有一个方法的小接口越来越多，颗粒度增加。因而，<strong>应该把类的和接口大小都控制在一个范围内</strong>。</p><h6 id="第二种违反接口隔离原则的"><a href="#第二种违反接口隔离原则的" class="headerlink" title="第二种违反接口隔离原则的"></a>第二种违反接口隔离原则的</h6><p>是一个大接口由两个设计很好的小接口合并，传的时候却传了大接口，这就导致本来会用到的被隔绝在了门外。</p><p>例如平常用到的IEnumerable接口，来源于一个更大的接口ICollection</p><p>我们需要创建一个只接上IEnumerable的接口，而没有接上ICollection接口的类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceIsolation</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>            ArrayList nums2 = <span class="hljs-keyword">new</span> ArrayList &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>            Console.WriteLine(Sum(nums));<br>            Console.WriteLine(Sum(nums2));<br>            <span class="hljs-keyword">var</span> nums3 = <span class="hljs-keyword">new</span> ReadOnlyCollection(nums);<br>            Console.WriteLine(Sum(nums3));<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sum</span>(<span class="hljs-params">IEnumerable nums</span>)</span> <br>        &#123;<br>            <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> v <span class="hljs-keyword">in</span> nums)<br>            &#123;<br>                sum += (<span class="hljs-built_in">int</span>) v;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//只实现了IEnumerable</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">ReadOnlyCollection</span> : <span class="hljs-title">IEnumerable</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span>[] _array;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReadOnlyCollection</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] array</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>._array = array;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerator <span class="hljs-title">GetEnumerator</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Enumerator(<span class="hljs-keyword">this</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//为了不污染名称空间，成员类</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title">Enumerator</span> : <span class="hljs-title">IEnumerator</span><br>        &#123;<br>            <span class="hljs-keyword">private</span> ReadOnlyCollection _collection;<br><br>            <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _head;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Enumerator</span>(<span class="hljs-params">ReadOnlyCollection collection</span>)</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>._collection = collection;<br>                _head = <span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">MoveNext</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (++_head &lt; _collection._array.Length)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span><br>            &#123;<br>                _head = <span class="hljs-number">-1</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">object</span> Current<br>            &#123;<br>                <span class="hljs-keyword">get</span><br>                &#123;<span class="hljs-comment">//装箱</span><br>                    <span class="hljs-built_in">object</span> o = _collection._array[_head];<br>                    <span class="hljs-keyword">return</span> o;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>因为传入的是ICollection，把Sum需求者的接口改为ICollection，立马报错，此时你已经把这个IEnumerable拒之门外了。</p><p>我们知道，这个功能只需要可迭代就行了。传IEnumerable明显比传ICollection合适。</p><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/image-20230305164940871.png" class="" title="image-20230305164940871"><p>这就更加符合我们的接口隔离原则，调用者绝不多要，传进来的接口不应该有用不着的功能</p><h6 id="第三个接口隔离的例子"><a href="#第三个接口隔离的例子" class="headerlink" title="第三个接口隔离的例子"></a>第三个接口隔离的例子</h6><p>我们将展现C#语言特有的功能，即<strong>显式接口实现</strong>。</p><p>一个大接口可被拆分成若干个小接口。有没有一个办法，可以让只需要使用这个小接口时，接口的方法才能被看到呢？这个办法就是显式接口实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceIsolation3</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> wk = <span class="hljs-keyword">new</span> WarmKiller();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">IGentleman</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Love</span>()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">IKiller</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Kill</span>()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">WarmKiller</span>:<span class="hljs-title">IGentleman</span>,<span class="hljs-title">IKiller</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Love</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;I Love You&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Kill</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;I will kill the enemy.&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们可以看见，在接口的影响下，我们可以看到Kill的方法，对于一个杀手来说，是不应该把Kill的功能暴露出来的</p><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/image-20230305165740447.png" class="" title="image-20230305165740447"><p>在这种情况下，就应该用到接口的显示实现</p><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/image-20230305171621173.png" class="" title="image-20230305171621173"><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/image-20230305171722005.png" class="" title="image-20230305171722005"><p>这个情况下，Kill就被隐藏起来了，只有在用IKiller情况下才能看到Kill</p><img src="/2023/03/03/CSharp/Interface%EF%BC%8CAbstract/image-20230305171843123.png" class="" title="image-20230305171843123"><p>接口隔离原则为接口单一原则提供了判断标准。如果调用者只是用了接口的部分功能(a,b,c 三个方法。系统只用到了a,b),那么说明这个接口不够单一</p><p>接口功能也要单一(如果a方法除了负责加还负责减乘除取余等等,功能不够单一)</p><p>调用者依赖其所需要的，而不依赖其所不需要的</p>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程语言</tag>
      
      <tag>面对对象编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSharp事件</title>
    <link href="/2023/02/28/CSharp/CSharp%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/02/28/CSharp/CSharp%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>事件(Event)</p><ol><li>角色， 使对象或类具备通知能力的成员</li><li>事件的功能&#x3D;通知+可选的通知参数</li><li>使用， 用于对象或类间的动作调节与信息传递</li><li>EventHandler委托的参数一般有两个 一个是object类型，名字是sender实际上就是事件的拥有者，事件的soure</li><li>第二个是EventArgs类的派生类 参数为e</li><li>事件的本质是委托字段的一个包装器 对委托字段的访问起限制作用</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">注意 <br>事件处理器是方法成员<br>挂接事件处理器的时候，可以使用委托实例 也可以直接使用方法名<br>事件处理器对事件的订阅不是随意的，匹配与否由声明事件时所使用的委托实例来检测<br>事件可以同步也可以异步<br>事件不管是表层约束还是底层实现来讲，都是依赖于委托类型<br></code></pre></td></tr></table></figure><h4 id="事件模型有五个组成部分"><a href="#事件模型有五个组成部分" class="headerlink" title="事件模型有五个组成部分"></a>事件模型有五个组成部分</h4><ol><li>事件的拥有者 event soure，对象</li><li>事件的成员 event 成员</li><li>事件的响应器 event subscriber，对象</li><li>事件的处理器 event Handler， 成员 —本质上是一个回调方法</li><li>事件订阅 —— 把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的约定</li></ol><h4 id="1-较为简单的事件模型"><a href="#1-较为简单的事件模型" class="headerlink" title="1.较为简单的事件模型"></a>1.较为简单的事件模型</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Test.Event</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Event_Handler</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Timer _timer = <span class="hljs-keyword">new</span> Timer(); <span class="hljs-comment">//事件的拥有者</span><br>            _timer.Interval = <span class="hljs-number">1000</span>;<br>            Boy boy = <span class="hljs-keyword">new</span> Boy();<span class="hljs-comment">//响应者</span><br>            Girl girl = <span class="hljs-keyword">new</span> Girl();<br>            _timer.Elapsed += boy.Action;<span class="hljs-comment">// +=订阅者   Elapsed 事件</span><br>            _timer.Elapsed += girl.Action;<br>            _timer.Start();<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span><br>    &#123;<br>        <span class="hljs-comment">//事件的处理器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, ElapsedEventArgs e</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Jump&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Girl</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, ElapsedEventArgs e</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Sing&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-两个对象之间的事件处理器"><a href="#2-两个对象之间的事件处理器" class="headerlink" title="2.两个对象之间的事件处理器"></a>2.两个对象之间的事件处理器</h4><p>事件响应者（事件处理器）—&gt;（订阅）事件的拥有者(事件)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Windows.Forms;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Test.Event</span><br>&#123;<br>    <span class="hljs-comment">//两个对象之间的事件处理器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Eventone</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            Form form = <span class="hljs-keyword">new</span> Form();<span class="hljs-comment">//拥有者 form</span><br>            Controller c = <span class="hljs-keyword">new</span> Controller(form);<span class="hljs-comment">//响应者 c</span><br>            form.ShowDialog();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> Form Form;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Controller</span>(<span class="hljs-params">Form form</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (form!=<span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.Form = form;<br>                <span class="hljs-keyword">this</span>.Form.Click += <span class="hljs-keyword">this</span>.FormClicked;<span class="hljs-comment">//事件 和 订阅</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//处理器</span><br>        <span class="hljs-comment">//不能拿影响Elapsed事件的事件处理器去响应Click事件</span><br>        <span class="hljs-comment">//因为遵循的约束不同，所以不通用</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FormClicked</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.Form.Text = DateTime.Now.ToString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-事件的拥有者同时也是事件的响应者"><a href="#3-事件的拥有者同时也是事件的响应者" class="headerlink" title="3.事件的拥有者同时也是事件的响应者"></a>3.事件的拥有者同时也是事件的响应者</h4><p>对象xx（事件处理器—&gt; 事件）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventTow</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>    &#123;<br>        MyForm myForm = <span class="hljs-keyword">new</span> MyForm(); <span class="hljs-comment">//拥有者</span><br>        myForm.Click += myForm.MyFormClicked; <span class="hljs-comment">//事件  响应者是myForm自己 +=订阅</span><br>        myForm.ShowDialog();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//派生: 在原有类的功能的基础上 ，扩展新的功能 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title">MyForm</span>:<span class="hljs-title">Form</span><br>&#123;<br>    <span class="hljs-comment">//处理器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MyFormClicked</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.Text = DateTime.Now.ToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.事件的拥有者是事件响应的字段成员</p><img src="/2023/02/28/CSharp/CSharp%E4%BA%8B%E4%BB%B6/sj3.png" class=""><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Test.Event</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>        &#123;<br>            myForm form = <span class="hljs-keyword">new</span> myForm(); <span class="hljs-comment">//响应</span><br>            form.ShowDialog();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">myForm</span> :<span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> TextBox _textBox;<br>        <span class="hljs-keyword">private</span> Button _button; <span class="hljs-comment">//事件拥有者</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myForm</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>._textBox = <span class="hljs-keyword">new</span> TextBox();<br>            <span class="hljs-keyword">this</span>._button = <span class="hljs-keyword">new</span> Button();<br>            <span class="hljs-keyword">this</span>.Controls.Add(_textBox);<br>            <span class="hljs-keyword">this</span>.Controls.Add(_button);<br>            <span class="hljs-keyword">this</span>._button.Click += <span class="hljs-keyword">this</span>.BottomClicked; <span class="hljs-comment">//事件 订阅</span><br>            <span class="hljs-keyword">this</span>._button.Text = <span class="hljs-string">&quot;点我&quot;</span>;<br>            <span class="hljs-keyword">this</span>._button.Top = <span class="hljs-number">100</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BottomClicked</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>._textBox.Text = <span class="hljs-string">&quot;Hello Heart&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><pre><code class="c#">//一个吃饭的事件模拟，多复习namespace Test.Event&#123;    //委托 委托可引用的方法返回值类型  名字+EventHandler后缀 （引用方法的参数列表 1，对象，2 事件信息）    //public delegate void OrderEventHandler(Customer customer, OrderEventArgs e);    public class Event_Eat    &#123;        public static void Test()        &#123;            Customer c = new Customer();            Waiter w = new Waiter();            c.Order += w.Action;            c.Action();            c.PlayBill();        &#125;    &#125;    //传递事件的消息 信息    public class OrderEventArgs : EventArgs    &#123;        public string DishName &#123; get; set; &#125;        public string Size &#123; get; set; &#125;    &#125;    public class Customer    &#123;        //声明事件        /*private OrderEventHandler OrderEventHandler;        public event OrderEventHandler Order        &#123;            //Value是一个重要的关键字            add &#123; this.OrderEventHandler += value; &#125;            remove &#123; this.OrderEventHandler -= value; &#125;        &#125;*/        //简化声明        //public event OrderEventHandler Order;        //两种事件        public event EventHandler Order;        public double Bill &#123; get; set; &#125; //账单        public void PlayBill()        &#123;            Console.WriteLine(&quot;我支付了&#123;0&#125;&quot;, this.Bill);        &#125;        void WalkIn()        &#123;            Console.WriteLine(&quot;走进餐厅&quot;);        &#125;        public void SitDown()        &#123;            Console.WriteLine(&quot;坐下&quot;);        &#125;        public void Think()        &#123;            for (int i = 0; i &lt; 5; i++)            &#123;                Console.WriteLine(&quot;让我想想&quot;);                Thread.Sleep(1000);            &#125;            /*简化声明用这里Order替换             if (this.OrderEventHandler!=null)             &#123;                 OrderEventArgs e = new OrderEventArgs();                 e.DishName = &quot;宫爆鸡丁&quot;;                 e.Size = &quot;large&quot;;                 this.OrderEventHandler.Invoke(this,e);//触发时间的地方             &#125;                         if (this.Order!=null)             &#123;                 OrderEventArgs e = new OrderEventArgs();                 e.DishName = &quot;宫爆鸡丁&quot;;                 e.Size = &quot;large&quot;;                 this.Order.Invoke(this,e);//触发时间的地方             &#125;*/            this.OnOrder(&quot;酸菜鱼&quot;, &quot;大份&quot;);        &#125;        // protected 用来修饰触发事件的方法 不建议为public        //事件的命名尽量用动词       //触发事件        protected void OnOrder(string DishName, string Size)        &#123;            if (this.Order != null)            &#123;                OrderEventArgs e = new OrderEventArgs();                e.DishName = DishName;                e.Size = Size;                this.Order.Invoke(this, e); //触发时间的地方            &#125;        &#125;        //事件触发        public void Action()        &#123;            Console.ReadLine();            this.WalkIn();            this.SitDown();            this.Think();        &#125;    &#125;    public class Waiter    &#123;        /*public void Action(Customer customer, OrderEventArgs e)        &#123;            Console.WriteLine(&quot;上的菜是&#123;0&#125;&quot;, e.DishName);            double price = 10;            switch (e.Size)            &#123;                case &quot;smaill&quot;:                    price = price * 0.5;                    break;                case &quot;large&quot;:                    price = price * 1.5;                    break;                default:                    break;            &#125;            customer.Bill += price;        &#125;*/        public void Action(object sender, EventArgs e)        &#123;            Customer c = sender as Customer;            OrderEventArgs orderEventArgs = e as OrderEventArgs;            Console.WriteLine(&quot;上的菜是&#123;0&#125;&quot;, orderEventArgs.DishName);            double price = 10;            switch (orderEventArgs.Size)            &#123;                case &quot;小份&quot;:                    price = price * 0.5;                    break;                case &quot;大份&quot;:                    price = price * 1.5;                    break;                default:                    break;            &#125;            c.Bill += price;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LcTest2</title>
    <link href="/2022/12/06/Algo/LcTest2/"/>
    <url>/2022/12/06/Algo/LcTest2/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28 找出字符串中第一个匹配项的下标"></a>28 找出字符串中第一个匹配项的下标</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">StrStr</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> haystack, <span class="hljs-built_in">string</span> needle</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> h = haystack.Length;<br>    <span class="hljs-built_in">int</span> n = needle.Length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;= h - n; i++)<br>    &#123;<br>        <span class="hljs-built_in">int</span> initI = i; <span class="hljs-comment">//记住第一次相等的元素</span><br>        <span class="hljs-built_in">bool</span> match = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++, i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (haystack[i] != needle[j]) <span class="hljs-comment">//如果位置不相等就把match设为false，相等的话，指针移动</span><br>            &#123;<br>                match = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (match) <span class="hljs-comment">//等字符串遍历完，如果match是true，说明找到了，就把上面记住的位置返回出去，就是第一次相等的位置</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> initI;<br>        &#125;<br><br>        i = initI;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459 重复的子字符串"></a>459 重复的子字符串</h4><img src="/2022/12/06/Algo/LcTest2/image-20221208141513155.png" class="" title="image-20221208141513155"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"> <span class="hljs-comment">//len最大为l的一半长度，l一定是len的倍数</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">RepeatedSubstringPattern</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br> &#123;<br>     <span class="hljs-built_in">int</span> l = s.Length;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> len = <span class="hljs-number">1</span>; len * <span class="hljs-number">2</span> &lt;= l; len++)<br>     &#123;<br>         <span class="hljs-keyword">if</span> (l % len == <span class="hljs-number">0</span>)<br>         &#123;<br>             <span class="hljs-built_in">bool</span> match = <span class="hljs-literal">true</span>;<br>             <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>             <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = len; j &lt; l; j++,i++)<br>             &#123;<br>                 <span class="hljs-keyword">if</span> (s[i] != s[j])<br>                 &#123;<span class="hljs-comment">//如果两个字符不相等就把len+1继续遍历，</span><br>                     <span class="hljs-comment">//相等的话match是true的就返回true</span><br>                     match = <span class="hljs-literal">false</span>;<br>                     <span class="hljs-keyword">break</span>;<br>                 &#125;<br>             &#125;<br>             <span class="hljs-keyword">if</span> (match) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">RepeatedSubstringPattern2</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>&#123;<br>    <span class="hljs-comment">//由重复字符串组成的字符串，选择重复子字符串后会得到本身</span><br>    <span class="hljs-comment">//拼接两个字符，在组成的字符上面判断有没有s ps去掉头部和尾部的元素</span><br>    <span class="hljs-keyword">return</span> (s + s).IndexOf(s, <span class="hljs-number">1</span>) != s.Length;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345. 反转字符串中的元音字母"></a>345. 反转字符串中的元音字母</h4><img src="/2022/12/06/Algo/LcTest2/image-20221208152741999.png" class="" title="image-20221208152741999"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ReverseVowels</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br>    <span class="hljs-built_in">int</span> n = s.Length;<br>    <span class="hljs-built_in">char</span>[] chars = s.ToCharArray();<br><br>    <span class="hljs-comment">//两个指针，一个从头，一个尾部开始</span><br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">//如果左边的指针小于右边的，并且字符串里的元素 没有元音字母就移动指针，有就交换</span><br>        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; !isVowel(chars[left])) left++;<br>        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; !isVowel(chars[right])) right--;<br>        <br>        <span class="hljs-built_in">char</span> temp = chars[left];<br>        chars[left] = chars[right];<br>        chars[right] = temp;<br><br>        left++;<br>        right--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(chars);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">isVowel</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> c</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span> || c == <span class="hljs-string">&#x27;A&#x27;</span> || c == <span class="hljs-string">&#x27;E&#x27;</span> || c == <span class="hljs-string">&#x27;I&#x27;</span> ||<br>           c == <span class="hljs-string">&#x27;O&#x27;</span> || c == <span class="hljs-string">&#x27;U&#x27;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="1119-删去字符串中的元音"><a href="#1119-删去字符串中的元音" class="headerlink" title="1119 删去字符串中的元音"></a>1119 删去字符串中的元音</h4><img src="/2022/12/06/Algo/LcTest2/image-20221209142243670.png" class="" title="image-20221209142243670"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">RemoveStringVowels</span>(<span class="hljs-params">String s</span>)</span><br>   &#123;<br>       <span class="hljs-comment">//设置一个结果集</span><br>       StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>       <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span> s.ToCharArray() )<br>       &#123;<span class="hljs-comment">//遍历字符床不是元音字母的字符就添加到结果集里</span><br>           <span class="hljs-keyword">if</span> (!isVowel(<span class="hljs-keyword">value</span>)) res.Append(<span class="hljs-keyword">value</span>);<br>       &#125;<br>       <span class="hljs-keyword">return</span> res.ToString();<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">isVowel</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> c</span>)</span><br>   &#123;<br>       <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="541翻转字符串II"><a href="#541翻转字符串II" class="headerlink" title="541翻转字符串II"></a>541翻转字符串II</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ReverseStr</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s, <span class="hljs-built_in">int</span> k</span>)</span><br>&#123;<br>    <span class="hljs-built_in">char</span>[] chars = s.ToCharArray();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> start = <span class="hljs-number">0</span>; start &lt; s.Length; start += <span class="hljs-number">2</span> * k)<br>    &#123;<span class="hljs-comment">//每次遍历跳2K个字符</span><br>        <span class="hljs-built_in">int</span> left = start;<br>        <span class="hljs-comment">//左指针从头，右指针从k的位置上</span><br>        <span class="hljs-comment">//PS:主要是判断后面 k个字符是否超过数组的长度，如果超过，就将后面的所有字符反转</span><br>        <span class="hljs-built_in">int</span> right = Math.Min(left + k - <span class="hljs-number">1</span>, s.Length - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (left&lt;right)<br>        &#123;<br>            <span class="hljs-built_in">char</span> temp = chars[left];<br>            chars[left] = chars[right];<br>            chars[right] = temp;<br>            left++;<br>            right--;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(chars);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="557反转字符串中的单词-III"><a href="#557反转字符串中的单词-III" class="headerlink" title="557反转字符串中的单词 III"></a>557反转字符串中的单词 III</h4><img src="/2022/12/06/Algo/LcTest2/image-20221209150855255.png" class="" title="image-20221209150855255"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ReverseWords</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>&#123;<br>    <span class="hljs-built_in">char</span>[] chars = s.ToCharArray();<br>    <span class="hljs-built_in">int</span> n = s.Length;<br><br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (left&lt;n)<br>    &#123;<span class="hljs-comment">//不等于空就说明字符的开始</span><br>        <span class="hljs-keyword">if</span> (chars[left]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">int</span> right = left;<br>            <span class="hljs-comment">//如果right前面的元素不是空格就再找到，是空格就说明找到字符的尾部了，翻转字符</span><br>            <span class="hljs-keyword">while</span> (right + <span class="hljs-number">1</span> &lt; n &amp;&amp; chars[right + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>) right++;<br>            ReverseWord(chars, left, right);<br>            <span class="hljs-comment">//反转完就把left设置到right+1的位置，重复过程</span><br>            left = right + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(chars);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReverseWord</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[] chars, <span class="hljs-built_in">int</span> start, <span class="hljs-built_in">int</span> end</span>)</span><br>&#123;<br>    <span class="hljs-built_in">char</span> temp;<br>    <span class="hljs-keyword">while</span> (start&lt;end)<br>    &#123;<br>        temp = chars[start];<br>        chars[start] = chars[end];<br>        chars[end] = temp;<br>        start++;<br>        end--;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58 最后一个单词的长度"></a>58 最后一个单词的长度</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">LengthOfLastWord</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> start = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (end &lt; s.Length)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[start] == <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            start++;<br>            end++;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (end &lt; s.Length &amp;&amp; s[end] != <span class="hljs-string">&#x27; &#x27;</span>) end++;<br>        result = end - start;<br>        <span class="hljs-keyword">while</span> (end &lt; s.Length &amp;&amp; s[end] == <span class="hljs-string">&#x27; &#x27;</span>) end++;<br>        <span class="hljs-keyword">if</span> (end &lt; s.Length &amp;&amp; s[end] != <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            start = end;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a>8. 字符串转换整数 (atoi)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MyAtoi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>&#123;<br>    <span class="hljs-built_in">char</span>[] chars = s.ToCharArray();<br><br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//丢弃前面空格</span><br>    <span class="hljs-keyword">while</span> (i &lt; s.Length &amp;&amp; chars[i] == <span class="hljs-string">&#x27; &#x27;</span>) i++;<br>    <span class="hljs-keyword">if</span> (i == s.Length) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//检查+和—是否存在</span><br>    <span class="hljs-built_in">int</span> sign = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (chars[i] == <span class="hljs-string">&#x27;-&#x27;</span> || chars[i] == <span class="hljs-string">&#x27;+&#x27;</span>)<br>    &#123;<br>        sign = chars[i] == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-comment">//结果检查，防止溢出</span><br>    <span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; chars.Length &amp;&amp; chars[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; chars[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-comment">//检查  2147483648  -2147483648 最大值</span><br>        <span class="hljs-keyword">if</span> (b &gt; Int32.MaxValue / <span class="hljs-number">10</span> || (b == Int32.MaxValue / <span class="hljs-number">10</span> &amp;&amp; chars[i] - <span class="hljs-string">&#x27;0&#x27;</span> &gt; <span class="hljs-number">7</span>))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (sign &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> Int32.MaxValue;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> Int32.MinValue;<br>        &#125;<br><br>        b = b * <span class="hljs-number">10</span> + (chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sign * b;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="165-比较版本号"><a href="#165-比较版本号" class="headerlink" title="165. 比较版本号"></a>165. 比较版本号</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">CompareVersion</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> version1, <span class="hljs-built_in">string</span> version2</span>)</span><br>&#123;<br>    <span class="hljs-built_in">string</span>[] v1 = version1.Split(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-built_in">string</span>[] v2 = version2.Split(<span class="hljs-string">&quot;.&quot;</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; v1.Length||i&lt;v2.Length; ++i)<br>    &#123;<br>        <span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>; <span class="hljs-built_in">int</span> y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i&lt;v1.Length)<br>        &#123;<br>            x = <span class="hljs-built_in">int</span>.Parse(v1[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i&lt;v2.Length)<br>        &#123;<br>            y = <span class="hljs-built_in">int</span>.Parse(v2[i]);<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (x&gt;y)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x&lt;y)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12 整数转罗马数字"></a>12 整数转罗马数字</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">IntToRoman</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num</span>)</span><br>&#123;<br>    <span class="hljs-comment">//将所有的情况都作成数组</span><br>    <span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1000</span>, <span class="hljs-number">900</span>, <span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;<br>    String[] romans = &#123;<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;CM&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;CD&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;XC&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;IX&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;IV&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>&#125;;<br>    StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">13</span>)<br>    &#123;<br>        <span class="hljs-comment">//里面的元素值小于num的值，指针移动</span><br>        <span class="hljs-keyword">while</span> (nums[index] &lt;= num)<br>        &#123;<br>            <span class="hljs-comment">//结果集压入一个I，然后num值减1，然后拼接进三个I ps，按位算</span><br>            res.Append(romans[index]);<br>            <br>            num -= nums[index];<br>        &#125;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res.ToString();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13 罗马数字转整数"></a>13 罗马数字转整数</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">RomanToInt</span>(<span class="hljs-params">String s</span>)</span> &#123;<br>    <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> pre = getValue(s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; s.Length; i++) &#123;<br>        <span class="hljs-built_in">int</span> curr = getValue(s[i]);<br>        <span class="hljs-keyword">if</span> (pre &lt; curr) &#123;<br>            sum -= pre;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sum += pre;<br>        &#125;<br>        pre = curr;<br>    &#125;<br>    sum += pre;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> ch</span>)</span> &#123;<br>    <span class="hljs-keyword">switch</span>(ch) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">500</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-literal">default</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode 字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LcTest1</title>
    <link href="/2022/11/27/Algo/LcTest1/"/>
    <url>/2022/11/27/Algo/LcTest1/</url>
    
    <content type="html"><![CDATA[<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="941-有效的山脉数组"><a href="#941-有效的山脉数组" class="headerlink" title="941 有效的山脉数组"></a>941 有效的山脉数组</h4><img src="/2022/11/27/Algo/LcTest1/image-20221127155032773.png" class="" title="image-20221127155032773"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ValidMountainArray</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] arr</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//两个指针，一个开头一个结尾</span><br>        <span class="hljs-built_in">int</span> r = arr.Length ;<br>        <span class="hljs-built_in">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//找到最高点 </span><br>        <span class="hljs-keyword">while</span> (l &lt; r - <span class="hljs-number">1</span> &amp;&amp; arr[l] &lt; arr[l + <span class="hljs-number">1</span>]) l++;<br>        <span class="hljs-comment">//限制边界，最高点不能是第一个和最后一个元素</span><br>        <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span> || l == r - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//从最高点往后递减扫描</span><br>        <span class="hljs-keyword">while</span> (l &lt; r - <span class="hljs-number">1</span> &amp;&amp; arr[l] &gt; arr[l + <span class="hljs-number">1</span>]) l++;<br>        <span class="hljs-comment">//如果i指向数组最后一个元素，则返回true，否则返回false</span><br>        <span class="hljs-keyword">return</span> l == r - <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189. 轮转数组"></a>189. 轮转数组</h4><h5 id="1-使用额外数组"><a href="#1-使用额外数组" class="headerlink" title="1.使用额外数组"></a>1.使用额外数组</h5><p>(i+k)%n 得到数组元素旋转后的位置 i为元素下标 n为数组长度</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> k</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> n = nums.Length;<br>       k = k % n;<br>       <span class="hljs-built_in">int</span>[] newarr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.Length; i++)<br>       &#123;<br>           <span class="hljs-built_in">int</span> index = (i + k) % n;<br>           newarr[index] = nums[i];<br>       &#125;<br><br>       <span class="hljs-comment">// Array.Copy(newarr, 0, nums, 0, n);</span><br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>       &#123;<br>           nums[i] = newarr[i];<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="2-环装替代"><a href="#2-环装替代" class="headerlink" title="2.环装替代"></a>2.环装替代</h5><img src="/2022/11/27/Algo/LcTest1/image-20221127154515034.png" class="" title="image-20221127154515034"><p>将curr上的元素记在prev上 next指向的上旋转后的元素的位置  next和prev交换，计算完一环后 start++</p><p>一直到curr等于start结束</p><img src="/2022/11/27/Algo/LcTest1/image-20221127163118340.png" class="" title="image-20221127163118340"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> k</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> n = nums.Length;<br>       k = k % n;<br>       <span class="hljs-comment">//记住替换了多少个</span><br>       <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> start = <span class="hljs-number">0</span>; count &lt; n; start++)<br>       &#123;<span class="hljs-comment">//标记每一次环的起始点</span><br>           <span class="hljs-built_in">int</span> curr = start;<br>           <span class="hljs-built_in">int</span> prev = nums[start];<br>           <span class="hljs-keyword">do</span><br>           &#123;<br>               <span class="hljs-built_in">int</span> next = (curr + k) % n;<br>               <span class="hljs-built_in">int</span> tmp = nums[next];<br>               nums[next] = prev;<br>               prev = tmp;<br>               curr = next;<br>               count++;<br>           &#125; <span class="hljs-keyword">while</span> (start != curr);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="3-数组翻转"><a href="#3-数组翻转" class="headerlink" title="3.数组翻转"></a>3.数组翻转</h5><img src="/2022/11/27/Algo/LcTest1/image-20221127165250905.png" class="" title="image-20221127165250905"> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> k</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> n = nums.Length;<br>        k = k % n;<br>        Reverse(nums, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>        Reverse(nums, <span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>);<br>        Reverse(nums, k, n - <span class="hljs-number">1</span>);<br>    &#125;<br>        <span class="hljs-comment">//对撞指针</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reverse</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] arr, <span class="hljs-built_in">int</span> start, <span class="hljs-built_in">int</span> end</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (start&lt;end)<br>        &#123;<br>            <span class="hljs-built_in">int</span> tmp = arr[start];<br>            arr[start] = arr[end];<br>            arr[end] = tmp;<br>            start++;<br>            end--;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="665-非递减数列"><a href="#665-非递减数列" class="headerlink" title="665 非递减数列"></a>665 非递减数列</h4><img src="/2022/11/27/Algo/LcTest1/image-20221127194314697.png" class="" title="image-20221127194314697"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckPossibility</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.Length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; nums[i - <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-comment">//只能改一次元素的值，记录一下，多了就是false</span><br>                count++;<br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">//防止数组越界！！！！</span><br>                <span class="hljs-keyword">if</span> (i - <span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &lt; nums[i - <span class="hljs-number">2</span>])<br>                &#123;<br>                    nums[i] = nums[i - <span class="hljs-number">1</span>];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    nums[i - <span class="hljs-number">1</span>] = nums[i];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228.汇总区间"></a>228.汇总区间</h4><img src="/2022/11/27/Algo/LcTest1/image-20221127203945943.png" class="" title="image-20221127203945943"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> IList&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">SummaryRanges</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums</span>)</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; res = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; nums.Length)<br>        &#123;<br>            <span class="hljs-built_in">int</span> low = i;<br>            i++;<br>            <span class="hljs-comment">//找到非连续的点</span><br>            <span class="hljs-keyword">while</span> (i &lt; nums.Length &amp;&amp; nums[i] - nums[i - <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) i++;<br>            <span class="hljs-comment">//上面i++了就要剪掉1，从0开始</span><br>            <span class="hljs-built_in">int</span> end = i - <span class="hljs-number">1</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(nums[low].ToString());<br>            <span class="hljs-keyword">if</span> (low &lt; end)<br>            &#123;<br>                sb.Append(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                sb.Append(nums[end]);<br>            &#125;<br><br>            res.Add(sb.ToString());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="163-缺失的区间"><a href="#163-缺失的区间" class="headerlink" title="163 缺失的区间"></a>163 缺失的区间</h4><img src="/2022/11/27/Algo/LcTest1/image-20221127205030460.png" class="" title="image-20221127205030460"><img src="/2022/11/27/Algo/LcTest1/image-20221127210700348.png" class="" title="image-20221127210700348"><h4 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31 下一个排列"></a>31 下一个排列</h4><p>​先找到靠右的较小数 和靠右的比较小数大的较大数 ，将两个数交换，随后翻转剩下的</p><img src="/2022/11/27/Algo/LcTest1/image-20221128150804704.png" class="" title="image-20221128150804704"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">NextPermutation</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> i = nums.Length - <span class="hljs-number">2</span>;<br><br>       <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="hljs-number">1</span>]) i--;<br><br>       <span class="hljs-keyword">if</span> (i&gt;=<span class="hljs-number">0</span>)<br>       &#123;<br>           <span class="hljs-built_in">int</span> j = nums.Length - <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) j--;<br>           <br>           Swap(nums,i,j);<br>       &#125;<br>       Reverse(nums,i + <span class="hljs-number">1</span>);<br>   &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[]arr,<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> temp = arr[i];<br>       arr[i] = arr[j];<br>       arr[j] = temp;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reverse</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] arr, <span class="hljs-built_in">int</span> start</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> left = start;<br>       <span class="hljs-built_in">int</span> right = arr.Length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (left&lt;right)<br>       &#123;<br>           Swap(arr,left,right);<br>           left++;<br>           right--;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135 分发糖果"></a>135 分发糖果</h4><h5 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h5><img src="/2022/11/27/Algo/LcTest1/image-20221128191708667.png" class="" title="image-20221128191708667"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Candy</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] ratings</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> n = ratings.Length;<br>    <span class="hljs-built_in">int</span>[] candies = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>    Array.Fill(candies, <span class="hljs-number">1</span>); <span class="hljs-comment">//默认糖果全是1;</span><br><br>    <span class="hljs-built_in">bool</span> hasChange = <span class="hljs-literal">true</span>; <span class="hljs-comment">//控制孩子糖果的变化，没有变化就不循环了</span><br>    <span class="hljs-keyword">while</span> (hasChange)<br>    &#123;<br>        hasChange = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-comment">//不是最后一个孩子，评大于右边的且糖果小于等于右边的，糖果等于右边的+1</span><br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="hljs-number">1</span>] &amp;&amp; candies[i] &lt;= candies[i + <span class="hljs-number">1</span>])<br>            &#123;<br>                candies[i] = candies[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                hasChange = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <br>            <span class="hljs-comment">//如果评分大于左边的，糖果小于等于左边的，等于左边的+1</span><br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="hljs-number">1</span>] &amp;&amp; candies[i] &lt;= candies[i - <span class="hljs-number">1</span>])<br>            &#123;<br>                candies[i] = candies[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                hasChange = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> candy <span class="hljs-keyword">in</span> candies)<br>    &#123;<br>        sum += candy;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="两个数组，两次遍历"><a href="#两个数组，两次遍历" class="headerlink" title="两个数组，两次遍历"></a>两个数组，两次遍历</h5><img src="/2022/11/27/Algo/LcTest1/image-20221128200636480.png" class="" title="image-20221128200636480"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Candy</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] ratings</span>)</span> &#123;<br>       <span class="hljs-comment">//两个数组，一个从左往右，一个从右往左，然后取最大值</span><br>       <span class="hljs-built_in">int</span> n = ratings.Length;<br>       <span class="hljs-built_in">int</span>[] left = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>       Array.Fill(left, <span class="hljs-number">1</span>);<br>       <span class="hljs-built_in">int</span>[] right = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>       Array.Fill(right, <span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="hljs-number">1</span>])<br>           &#123;<br>               left[i] = left[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="hljs-number">1</span>])<br>           &#123;<br>               right[i] = right[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>           &#125;<br>       <br>           sum += Math.Max(left[i], right[i]);<br>          <br>       &#125;<br>       <span class="hljs-keyword">return</span> sum;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605 种花问题"></a>605 种花问题</h4><img src="/2022/11/27/Algo/LcTest1/image-20221129110838063.png" class="" title="image-20221129110838063"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CanPlaceFlowers</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] flowerbed, <span class="hljs-built_in">int</span> n</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//当花坛遍历完，花种完了，停止循环</span><br>    <span class="hljs-keyword">while</span> (i &lt; flowerbed.Length &amp;&amp; n &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flowerbed[i] == <span class="hljs-number">1</span>)<br>        &#123;<br>            i += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( i==flowerbed.Length<span class="hljs-number">-1</span> ||flowerbed[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<span class="hljs-comment">//flowerbed[i] == 0 上面if说明前面是0 flowerbed[i + 1]才能种！！</span><br>        &#123;<br>            <span class="hljs-comment">//i没有种花，且是最后一个花坛 i和i+1的位置都没有种花， 那么i位置一定能种花</span><br>            n--;<br>            <span class="hljs-comment">//然后得到i+2的位置才能继续种</span><br>            i += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//i没有种花，i+1种花，那么得到i+3才能种</span><br>            i += <span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n &lt;= <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="860-柠檬水找零"><a href="#860-柠檬水找零" class="headerlink" title="860 柠檬水找零"></a>860 柠檬水找零</h4><img src="/2022/11/27/Algo/LcTest1/image-20221129113256266.png" class="" title="image-20221129113256266"><img src="/2022/11/27/Algo/LcTest1/image-20221129114152950.png" class="" title="image-20221129114152950"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">LemonadeChange</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] bills</span>)</span><br>&#123;<br>    <span class="hljs-comment">//记住5有几张，10有几张</span><br>    <span class="hljs-built_in">int</span> five = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> ten = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> bill <span class="hljs-keyword">in</span> bills)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (bill == <span class="hljs-number">5</span>)<br>        &#123;<br>            five++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bill == <span class="hljs-number">10</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (five == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//没有5就没法找就返回false</span><br>            <span class="hljs-comment">//能找开就减去一张五，加张十</span><br>            five--;<br>            ten++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<span class="hljs-comment">//如果给的是20，就看有没有10和5，有就找</span><br>            <span class="hljs-keyword">if</span> (ten &gt; <span class="hljs-number">0</span> &amp;&amp; five &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                ten--;<br>                five--;<br>            &#125;<span class="hljs-comment">//或者用三种5找</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (five &gt;= <span class="hljs-number">3</span>)<br>            &#123;<br>                five -= <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">//都没有就找不开</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="867-转置矩阵"><a href="#867-转置矩阵" class="headerlink" title="867 转置矩阵"></a>867 转置矩阵</h4><img src="/2022/11/27/Algo/LcTest1/image-20221130141246171.png" class="" title="image-20221130141246171"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[][] Transpose(<span class="hljs-built_in">int</span>[][] matrix)<br>    &#123;<br>        <span class="hljs-comment">//获取矩阵的行与列数</span><br>        <span class="hljs-built_in">int</span> m = matrix.Length;<br>        <span class="hljs-built_in">int</span> n = matrix[<span class="hljs-number">0</span>].Length;<br>        <span class="hljs-built_in">int</span>[][] transposed = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n][];<span class="hljs-comment">//存储转置后的矩阵行列数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            transposed[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[m];<br>        &#125;<br>        <span class="hljs-comment">//调换一下</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            &#123;<br>                <span class="hljs-comment">//交换行列索引</span><br>                transposed[j][i] = matrix[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> transposed;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="48选择图像"><a href="#48选择图像" class="headerlink" title="48选择图像"></a>48选择图像</h4><h5 id="原地翻转写法"><a href="#原地翻转写法" class="headerlink" title="原地翻转写法"></a>原地翻转写法</h5><img src="/2022/11/27/Algo/LcTest1/image-20221201110539777.png" class="" title="image-20221201110539777"><img src="/2022/11/27/Algo/LcTest1/image-20221201112400121.png" class="" title="image-20221201112400121"><p>第四个值的推演为 data【n-row-1】【row】&#x3D;&gt;data【row】【n-(n-col-1)-1】&#x3D;&gt;data【row】【col】</p><p>所以7的值为【0,0】</p><img src="/2022/11/27/Algo/LcTest1/image-20221201114534692.png" class="" title="image-20221201114534692"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h5 id="使用额外数组写法"><a href="#使用额外数组写法" class="headerlink" title="使用额外数组写法"></a>使用额外数组写法</h5><img src="/2022/11/27/Algo/LcTest1/image-20221201105353590.png" class="" title="image-20221201105353590"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>   <span class="hljs-comment"><span class="hljs-doctag">///</span> 使用额外数组的写法</span><br>   <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] matrix</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> n = matrix.Length;<br>       <span class="hljs-built_in">int</span>[,] newMatrix = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n, n];<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; n; row++)<br>       &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++)<br>           &#123;<br>               newMatrix[col, n - row - <span class="hljs-number">1</span>] = matrix[row][col];<br>               <br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; n; row++)<br>       &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++)<br>           &#123;<br>               matrix[row][col] = newMatrix[row, col];<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="翻转代替选择"><a href="#翻转代替选择" class="headerlink" title="翻转代替选择 !"></a>翻转代替选择 !</h5><img src="/2022/11/27/Algo/LcTest1/image-20221201115203551.png" class="" title="image-20221201115203551"><p>PS:这里索引写错了 <img src="/2022/11/27/Algo/LcTest1/0060E29C.png" class="" title="img"></p><img src="/2022/11/27/Algo/LcTest1/image-20221201115402931.png" class="" title="image-20221201115402931"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] matrix</span>)</span> &#123;<br>       <span class="hljs-built_in">int</span> n = matrix.Length;<br>       <span class="hljs-comment">// 水平翻转</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; ++i) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>               <span class="hljs-built_in">int</span> temp = matrix[i][j];<br>               matrix[i][j] = matrix[n - i - <span class="hljs-number">1</span>][j];<br>               matrix[n - i - <span class="hljs-number">1</span>][j] = temp;<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">// 主对角线翻转</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;<br>               <span class="hljs-built_in">int</span> temp = matrix[i][j];<br>               matrix[i][j] = matrix[j][i];<br>               matrix[j][i] = temp;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="36-有效的数独"><a href="#36-有效的数独" class="headerlink" title="36 有效的数独"></a>36 有效的数独</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsValidSudoku</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[][] board</span>)</span><br>&#123;<br>    <span class="hljs-comment">//行列 宫格数字出现的情况</span><br>    <span class="hljs-built_in">bool</span>[][] rowUsed = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">9</span>][];<br>    <span class="hljs-built_in">bool</span>[][] colUsed = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">9</span>][];<br>    <span class="hljs-built_in">bool</span>[][] boxUsed = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">9</span>][];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>    &#123;<br>        rowUsed[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">10</span>];<br>        colUsed[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">10</span>];<br>        boxUsed[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[<span class="hljs-number">10</span>];<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; board.Length; row++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; board[<span class="hljs-number">0</span>].Length; col++)<br>        &#123;<br>            <span class="hljs-comment">//没有点的地方是数字</span><br>            <span class="hljs-keyword">if</span> (board[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>)<br>            &#123;<br>                <span class="hljs-comment">//将数字转化为索引</span><br>                <span class="hljs-built_in">int</span> num= board[row][col] - <span class="hljs-string">&#x27;1&#x27;</span>;<br>                <span class="hljs-comment">//判断行列上是否出现了这个数字出现了就是false</span><br>                <span class="hljs-keyword">if</span> (rowUsed[row][num]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span> rowUsed[row][num] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span> (colUsed[col][num]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span> colUsed[col][num] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//转换为九宫格 判断在宫格里有没有出现这个数字</span><br>                <span class="hljs-built_in">int</span> boxIndex = row / <span class="hljs-number">3</span> + (col / <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">if</span> (boxUsed[boxIndex][num]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span> boxUsed[boxIndex][num] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="73-矩阵置零"><a href="#73-矩阵置零" class="headerlink" title="73 矩阵置零"></a>73 矩阵置零</h4><img src="/2022/11/27/Algo/LcTest1/image-20221202143434712.png" class="" title="image-20221202143434712"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetZeroes</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] matrix</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> m = matrix.Length;<br>    <span class="hljs-built_in">int</span> n = matrix[<span class="hljs-number">0</span>].Length;<br><br>    <span class="hljs-comment">//记录行列是否要设置为0</span><br>    <span class="hljs-built_in">bool</span>[] rows = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[m];<br>    <span class="hljs-built_in">bool</span>[] cols = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[n];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; m; row++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (matrix[row][col]==<span class="hljs-number">0</span>)<br>            &#123;<br>                rows[row] = <span class="hljs-literal">true</span>;<br>                cols[col] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; m; row++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (rows[row]||cols[col])<br>            &#123;<br>                matrix[row][col] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54 螺旋矩阵"></a>54 螺旋矩阵</h4><img src="/2022/11/27/Algo/LcTest1/image-20221202144544080.png" class="" title="image-20221202144544080"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> IList&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">SpiralOrder</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] matrix</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//用2x2的数组表示方向，往右，往下，往左，往上</span><br>        <span class="hljs-built_in">int</span>[][] dirs =<br>        &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;<br>        &#125;;<br><br>        <span class="hljs-built_in">int</span> m = matrix.Length;<br>        <span class="hljs-built_in">int</span> n = matrix[<span class="hljs-number">0</span>].Length;<br>        <span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>, col = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> di = <span class="hljs-number">0</span>; <span class="hljs-comment">//第几行</span><br>        List&lt;<span class="hljs-built_in">int</span>&gt; res = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//结果集</span><br>        <span class="hljs-built_in">bool</span>[][] see = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[m][];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            see[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[n];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m * n; i++)<br>        &#123;<br>            res.Add(matrix[row][col]);<br>            see[row][col] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//访问过的元素设置为true</span><br>            <span class="hljs-comment">//往右</span><br>            <span class="hljs-built_in">int</span> nextrow = row + dirs[di][<span class="hljs-number">0</span>];<br>            <span class="hljs-built_in">int</span> nextcol = col + dirs[di][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (nextrow &lt; <span class="hljs-number">0</span> || nextrow &gt;= m <br>                || nextcol &lt; <span class="hljs-number">0</span> || nextcol &gt;= n||see[nextrow][nextcol])<br>            &#123;<br>                <span class="hljs-comment">//改变方向</span><br>                di = (di + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>;<br>            &#125;<br>            row = row + dirs[di][<span class="hljs-number">0</span>];<br>            col = col + dirs[di][<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><p>按层模拟的解法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 按层模拟</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IList&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">SpiralOrder</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] matrix</span>)</span><br>&#123;<br>    List&lt;<span class="hljs-built_in">int</span>&gt; res = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>    <span class="hljs-built_in">int</span> startRow = <span class="hljs-number">0</span>, endRow = matrix.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> startCol = <span class="hljs-number">0</span>, endCol = matrix[<span class="hljs-number">0</span>].Length - <span class="hljs-number">1</span>;<br><br><br>    <span class="hljs-keyword">while</span> (startRow &lt;= endRow &amp;&amp; startCol &lt;= endCol)<br>    &#123;<br>        <span class="hljs-comment">//top行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = startCol; col &lt;= endCol; col++) res.Add(matrix[startRow][col]);<br>        <span class="hljs-comment">//right行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = startRow + <span class="hljs-number">1</span>; row &lt;= endRow; row++) res.Add(matrix[row][endCol]);<br>        <span class="hljs-keyword">if</span> (startRow &lt; endRow &amp;&amp; startCol &lt; endCol)<br>        &#123;<br>            <span class="hljs-comment">//bottom行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = endCol - <span class="hljs-number">1</span>; col &gt; startCol; col--) res.Add(matrix[endRow][col]);<br>            <span class="hljs-comment">//left行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = endRow; row &gt; startRow; row--) res.Add(matrix[row][startCol]);<br>        &#125;<br><br>        startRow++;<br>        endRow--;<br>        startCol++;<br>        endCol--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59 螺旋矩阵II"></a>59 螺旋矩阵II</h4><img src="/2022/11/27/Algo/LcTest1/image-20221202170718013.png" class="" title="image-20221202170718013"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//与54思路差不多</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[][] GenerateMatrix(<span class="hljs-built_in">int</span> n)<br>&#123;<br>    <span class="hljs-comment">//用2x2的数组表示方向，往右，往下，往左，往上</span><br>    <span class="hljs-built_in">int</span>[][] dirs =<br>    &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>, col = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> di = <span class="hljs-number">0</span>; <span class="hljs-comment">//第几行</span><br>    <span class="hljs-built_in">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n][]; <span class="hljs-comment">//结果集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        res[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>    &#125;<br>    <span class="hljs-built_in">bool</span>[][] see = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[n][];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        see[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>[n];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n; i++)<br>    &#123;<br>        res[row][col] = i + <span class="hljs-number">1</span>;<span class="hljs-comment">//输入进矩阵的值是1到n的平方，i是0到n-1；</span><br>        see[row][col] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//访问过的元素设置为true</span><br>        <span class="hljs-comment">//往右</span><br>        <span class="hljs-built_in">int</span> nextrow = row + dirs[di][<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">int</span> nextcol = col + dirs[di][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (nextrow &lt; <span class="hljs-number">0</span> || nextrow &gt;= n || nextcol &lt; <span class="hljs-number">0</span> || nextcol &gt;= n || see[nextrow][nextcol])<br>        &#123;<br>            <span class="hljs-comment">//改变方向</span><br>            di = (di + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>;<br>        &#125;<br><br>        row = row + dirs[di][<span class="hljs-number">0</span>];<br>        col = col + dirs[di][<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="498-对角线遍历"><a href="#498-对角线遍历" class="headerlink" title="498 对角线遍历"></a>498 对角线遍历</h4><img src="/2022/11/27/Algo/LcTest1/image-20221205192222088.png" class="" title="image-20221205192222088"><p>越界情况上图  </p><p>补充 遇到三乘三的矩阵的话，应该是先执行 col &gt;&#x3D;n 的逻辑再执行 row&lt;0， 四乘四的先执行 row&gt;&#x3D;m再执行col&lt;0</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">FindDiagonalOrder</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[][] mat</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (mat.Length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> Array.Empty&lt;<span class="hljs-built_in">int</span>&gt;();<br><br>    <span class="hljs-built_in">int</span> m = mat.Length;<br>    <span class="hljs-built_in">int</span> n = mat[<span class="hljs-number">0</span>].Length;<br>    <span class="hljs-built_in">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[m * n];<br>    <span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>,<br>        col = <span class="hljs-number">0</span>, <span class="hljs-comment">//从第一个元素开始遍历</span><br>        di = <span class="hljs-number">0</span>; <span class="hljs-comment">//当前的方向</span><br>    <span class="hljs-built_in">int</span>[][] dirs = &#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;&#125;; <span class="hljs-comment">//两个方向 斜上和斜下</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m * n; i++)<br>    &#123;<br>        result[i] = mat[row][col];<br>        row = row + dirs[di][<span class="hljs-number">0</span>];<br>        col = col + dirs[di][<span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">//越界情况 四种</span><br>        <span class="hljs-keyword">if</span> (col &gt;= n)&#123; col = n - <span class="hljs-number">1</span>; row += <span class="hljs-number">2</span>; di = <span class="hljs-number">1</span> - di; &#125; <span class="hljs-comment">//如果是1就换成0 如果是0就换成1 就两个方向</span><br>        <span class="hljs-keyword">if</span> (row &gt;= m) &#123; row = m - <span class="hljs-number">1</span>; col += <span class="hljs-number">2</span>; di = <span class="hljs-number">1</span> - di; &#125;<br>        <span class="hljs-keyword">if</span> (col &lt; <span class="hljs-number">0</span>) &#123; col = <span class="hljs-number">0</span>; di = <span class="hljs-number">1</span> - di; &#125;<br>        <span class="hljs-keyword">if</span> (row &lt; <span class="hljs-number">0</span>) &#123; row = <span class="hljs-number">0</span>; di = <span class="hljs-number">1</span> - di; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118 杨辉三角"></a>118 杨辉三角</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IList&lt;IList&lt;<span class="hljs-built_in">int</span>&gt;&gt; Generate(<span class="hljs-built_in">int</span> numRows)<br>&#123;<br>    IList&lt;IList&lt;<span class="hljs-built_in">int</span>&gt;&gt; rows = <span class="hljs-keyword">new</span> List&lt;IList&lt;<span class="hljs-built_in">int</span>&gt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt; numRows; row++)<br>    &#123;<br>        List&lt;<span class="hljs-built_in">int</span>&gt; OneRows = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt;= row; col++)<br>        &#123;<br>            <span class="hljs-comment">//头尾部分</span><br>            <span class="hljs-keyword">if</span> (col == <span class="hljs-number">0</span> || col == row)<br>            &#123;<br>                OneRows.Add(<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//上一行的两个加起来</span><br>                OneRows.Add(rows[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>] + rows[row<span class="hljs-number">-1</span>][col]);<br>            &#125;<br>        &#125;<br><br>        rows.Add(OneRows);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rows;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="119-杨辉三角II"><a href="#119-杨辉三角II" class="headerlink" title="119 杨辉三角II"></a>119 杨辉三角II</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IList&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetRow</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> rowIndex</span>)</span><br>&#123;<br>    IList&lt;IList&lt;<span class="hljs-built_in">int</span>&gt;&gt; result = <span class="hljs-keyword">new</span> List&lt;IList&lt;<span class="hljs-built_in">int</span>&gt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> row = <span class="hljs-number">0</span>; row &lt;= rowIndex; row++)<br>    &#123;<br>        <span class="hljs-keyword">var</span> list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(row + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> col = <span class="hljs-number">0</span>; col &lt; row + <span class="hljs-number">1</span>; col++)<br>        &#123;<br>            <span class="hljs-built_in">int</span> element;<br>            <span class="hljs-comment">//头尾部分</span><br>            <span class="hljs-keyword">if</span> (row == <span class="hljs-number">0</span> || col == <span class="hljs-number">0</span> || col == row)<br>            &#123;<br>                element = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//上一行的两个加起来</span><br>                element = result[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>] + result[row - <span class="hljs-number">1</span>][col];<br>            &#125;<br><br>            list.Add(element);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rowIndex == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br><br>        result.Add(list);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result.Last();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode 数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ET-多进程分布式架构</title>
    <link href="/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="游戏服务器架构"><a href="#游戏服务器架构" class="headerlink" title="游戏服务器架构"></a>游戏服务器架构</h3><p><strong>第一代游戏服务器架构</strong></p><img src="/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/image-20221129152425095.png" class="" title="image-20221129152425095"><p>使用单台物理机，单个游戏服务器程序进程 单线程无阻塞Socket来服务所有的玩家，，每隔一秒与玩家进行更新同步数据</p><p>处理的速度是非常非常低的，且因为当时没有数据库，数据是存在本地的，要对本地数据进行IO读写</p><p><strong>第二代游戏服务器架构</strong></p><img src="/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/image-20221129152445122.png" class="" title="image-20221129152445122"><p>采用分区分服模式，同时引入数据库软件存储游戏数据，用于存储游戏数据，多个游戏服务器进程同时运行，每个游戏服务器都是独立的</p><p><strong>第三代游戏服务器架构 (三层架构)</strong></p><img src="/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/image-20221129152457290.png" class="" title="image-20221129152457290"><p>发展处让玩家统一连接的网关服务器，而数据库存储的任务则交由数据库代理服务器进程处理，游戏服务器进程专心处理游戏功能业务逻辑</p><p>玩家发出的请求交给Gate网关 网关转发给服务器进程。 因为之前玩家是直接连接游戏服务器进程，那么服务器进程就要管理大量的Socket连接 还要对不同的Socket进程进行IO读写，效率慢，所以我们将与网络连接的功能单独提取出来交给Gate网关进行处理</p><p><strong>第三代游戏服务器架构 (无缝地图)</strong></p><img src="/2022/01/05/Framework/ET-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/image-20221129152511480.png" class="" title="image-20221129152511480"><p>玩家可以在不同的地图之间 进行无缝地图传送 大型MMORPG的标准配置</p>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Socket</tag>
      
      <tag>GameFramework</tag>
      
      <tag>Unity</tag>
      
      <tag>ET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ET-前后端通讯</title>
    <link href="/2022/01/05/Framework/ET-%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF/"/>
    <url>/2022/01/05/Framework/ET-%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF/</url>
    
    <content type="html"><![CDATA[<p>UILoginComponentSystem</p><p>我们从Demo的<strong>UILoginComponentSystem</strong>类中开始看起 它继承自<strong>AwakeSystem</strong>的<strong>UILoginComponent</strong>组件的生命周期辅助类，</p><p>Awake方法注册了Demo Init的登录点击事件，实际上就是注册<strong>UILoginComponent</strong>的扩展方法OnLogin 而OnLogin调用了静态的辅助类<strong>LoginHelper</strong>里的Login方法，Login方法呢就是真正编写客户端向服务端发起登录请求的逻辑方法。</p><p>客户端是如何和服务端发起通讯的？</p><p><strong>LoginHelper</strong>里的Login方法的第二个参数address，所传入的是ConstValue的常量LoginAddress所定义的IP地址和端口</p><p>使用Socket接口。</p><p>ET的Socket是如何调用的</p><p><strong>LoginHelper</strong>里的Login方法里的zoneScene调用了NetKcpComponent组件的的Create方法，传入address参数，将IP地址进行转换，而Create方法的主要作用是创建了Session，Session是会话，而我们会拿到GetOrCreate的Get创建了一个<strong>Channel</strong>的类，而在TChannel的这个类中，Socket被正式创建出来了，而在创建Socket的时候使用的是一个session的ID，这个Id对Channel进行了对应和关联。这样就能实现一个映射表的关系，有这个映射表的关系，就能通过session来对Socket来写入数据，Socket就可以负责将网络消息数据进入到传输层，网络互联层 接口层，最终发到游戏服务器上去</p><p>C2R_LoginHandler类 消息处理类</p><p>消息传输流程 BY狐狸菌</p><h2 id="结构模型"><a href="#结构模型" class="headerlink" title="结构模型"></a>结构模型</h2><ul><li>NetworkComponent【NetOuterComponent、NetInnerComponent】<ul><li>Session</li><li>AService【KService、TService、WService】<ul><li>Socket</li><li>PacketParser</li><li>CircularBuffer</li><li>AChannel【KChannel、TChannel、WChannel】</li></ul></li><li>IMessagePacker【MongoPacker、ProtobufPacker】</li><li>IMessageDispatcher【InnerMessageDispatcher、OuterMessageDispatcher（服务端）、OuterMessageDispatcher（客户端）】</li></ul></li><li>OpcodeTypeComponent</li><li>MessageDispatcherComponent<ul><li>IMHandler【AMHandler、AMRpcHandler】</li></ul></li></ul><p>服务器独占</p><ul><li>MailboxDispatcherComponent<ul><li>IMailboxHandler【MailboxGateSessionHandler、MailboxMessageDispatcherHandler】</li></ul></li><li>ActorMessageDispatcherComponent<ul><li>IMActorHandler【AMActorHandler、AMActorRpcHandler、AMActorLocationHandler、AMActorLocationRpcHandler】</li></ul></li><li>LocationProxyComponent</li><li>LocationComponent</li><li>ActorMessageSenderComponent<ul><li>ActorMessageSender</li></ul></li><li>ActorLocationSenderComponent<ul><li>ActorLocationSender</li></ul></li></ul><h2 id="客户端建立Session"><a href="#客户端建立Session" class="headerlink" title="客户端建立Session"></a>客户端建立Session</h2><ol><li><p>添加<code>NetOuterComponent</code></p><p>因为<code>NetOuterComponent外网组件</code>继承自<code>NetworkComponent网络组件</code>，所以在<code>Init</code>类中为<code>Scene</code>添加<code>NetOuterComponent</code>也就等于添加了<code>NetworkComponent</code>，同时<code>NetOuterComponent</code>还指定了网络组件以什么协议沟通；</p><ul><li><p>考虑到服务端Hotfix与Model分离规则，所以<code>NetOuterComponent</code>的事件驱动与组件不在一个类中。</p></li><li><p>在</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">NetOuterComponent</span><br></code></pre></td></tr></table></figure><p>的</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Awake</span><br></code></pre></td></tr></table></figure><p>事件中创建了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">TService、ProtobufPacker、OuterMessageDispatcher<br></code></pre></td></tr></table></figure><p>，并保存引用到自身</p><ul><li>TService：TCPService，继承自<code>AService</code></li><li>ProtobufPacker：Protobuf打包器，继承自<code>IMessagePacker</code>,主要用于调用<code>ProtobufHelper</code>对消息进行打包处理</li><li>OuterMessageDispatcher：外部消息分发组件，继承自<code>IMessageDispatcher</code>，主要用于调用<code>MessageDispatcherComponent</code>对外部消息进行分发处理</li></ul></li></ul></li><li><p>创建<code>Model.Session</code></p><p>通过外网组件间接调用网络组件的<code>Create</code>方法，先通过<code>TService</code>的<code>ConnectChannel</code>方法传入远端IP地址创建了一个<code>TChannel</code>,然后将<code>TChannel</code>作物初始化参数创建了一个<code>Model.Session</code>，并调用<code>Session</code>的<code>Start</code>方法启动Session。</p><ul><li><p>TChannel：TCP通道，继承自：<code>AChannel</code>，在构造函数中创建了<code>Socket、PacketParser</code>，并设置了各种流处理相关属性</p><ul><li>Socket：套接字</li><li>PacketParser：包解析器</li><li>CircularBuffer：缓冲区</li></ul></li><li><p>Session</p><p>在其Awake方法中，将<code>NetworkComponent.Remove</code>自身方法作为委托传入了<code>TChannel</code>的<code>ErrorCallback</code>中，还将自身的<code>OnRead</code>方法作为委托传入了<code>TChannel</code>的<code>ReadCallback</code>中</p><p>Session的<code>Start</code>方法调用了<code>TChannel</code>的<code>Start</code>方法</p><ol><li><p>建立远程链接</p></li><li><p>开始循环异步接收消息</p><p>注意，到这里Model.Session已经创建完成，并且开始接收消息，以下是收到消息后的处理</p><ul><li>当一条消息读取完毕后，先调用<code>PacketParser</code>包解析器，进行解包</li><li>再通过委托调用<code>Session</code>的<code>OnRead</code>方法对消息进行分发处理</li></ul></li></ol></li></ul></li><li><p>创建<code>Hotfix.Session</code></p><p>将上一步生成的<code>Model.Session</code>作为初始化参数，创建一个<code>Hotfix.Session</code>，该类的<code>Dispose</code>方法会自动调用<code>Model.Session</code>的<code>Dispose</code></p><p>在该类的<code>Awake</code>事件中，会给<code>Model.Session</code>添加<code>SessionCallbackComponent热更层Session回调组件</code>；该组件持有两个委托</p><ul><li><code>MessageCallback</code>用于<code>Model.Session</code>通过委托调用<code>Hotfix.Session</code>的<code>Run</code>方法</li><li><code>DisposeCallback</code>用于<code>Model.Session</code>通过委托调用<code>Hotfix.Session</code>的<code>Dispose</code>方法</li></ul></li></ol><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><ol><li>Hotfix.Session<ul><li>发送消息<ul><li>发送普通消息，调用<code>Hotfix.Session</code>的<code>Send</code>方法</li><li>发送请求消息，调用<code>Hotfix.Session</code>的<code>Call</code>方法，创建一个异步完成的委托回调，用于消息答复时触发ETTask返回</li></ul></li><li>通过<code>OpcodeTypeComponent</code>对应的消息码</li><li>调用<code>Model.Session</code>的<code>Send</code>方法</li></ul></li><li>Model.Session<ul><li>通过<code>NetOuterComponent</code>类的<code>ProtobufPacker</code>序列化消息</li><li>写入操作码</li><li>调用<code>TChannel</code>的<code>Send</code>方法</li></ul></li><li>Tchannel<ul><li>将消息写入缓冲区<code>CircularBuffer</code></li><li>通过<code>TService</code>的<code>MarkNeedStartSend</code>方法将自生标记为待发送</li><li><code>TService</code>的<code>Update</code>事件将调用<code>Tchannel</code>的<code>StartSend</code>方法发送消息</li><li><code>StartSend</code>调用<code>SendAsync</code>向远端发送一条消息</li></ul></li></ol><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><p><code>TChannel</code>的<code>Start</code>方法将开启循环接收消息。下面演示接收到一条消息后的处理流程</p><ol><li><p>TChannel</p><ul><li>当一条消息读取完毕后，先调用<code>PacketParser</code>包解析器，进行解包</li><li>通过委托调用<code>Session</code>的<code>OnRead</code>方法对消息进行分发处理</li></ul></li><li><p>Session</p><ul><li><p>获取操作码</p></li><li><p>通过<code>OpcodeHelper.IsClientHotfixMessage</code>检测是否是热更层消息</p><p>如果是热更层消息，则通过<code>SessionCallbackComponent</code>委托调用热更层Session处理消息，后续hotfix和Model处理流程是一样的</p></li><li><p>通过<code>OpcodeTypeComponent操作码-类型组件</code>获取操作码对应的消息类实例</p></li><li><p>通过<code>NetOuterComponent</code>类的<code>ProtobufPacker</code>反序列化数据</p></li><li><p>检测消息是否是响应消息</p><ul><li>不是响应消息，直接通过<code>NetOuterComponent</code>类的<code>OuterMessageDispatcher</code>调用<code>MessageDispatcherComponent</code>处理消息</li><li>是响应消息，通过消息的RpcId查找请求队列中对应的请求，并激活完成事件</li></ul></li></ul></li></ol><h2 id="服务端Actor模型建立"><a href="#服务端Actor模型建立" class="headerlink" title="服务端Actor模型建立"></a>服务端Actor模型建立</h2><ul><li><p>登录服务器</p><ol><li>添加<code>NetInnerComponent、NetOuterComponent</code>内网组件和外网组件来为当前服务器建立基本网络收发配置</li><li>分配服务器网关地址，在登录验证通过后，通过<code>RealmGateAddressComponent</code>随机网关地址组件获取<code>内网</code>网关地址</li><li>通过向<code>NetInnerComponent.Get</code>方法传入获取到的网关地址，创建一个与网关服务器链接的内网Session</li><li>通过Session在<code>网关服务器</code>上创建一个登录Key，然后将Key和客户端地址保存到<code>GateSessionKeyComponent</code>网关登录Key组件中，注意：该Key会在20秒后自动销毁</li></ol></li><li><p>网关服务器</p><ol><li><p>客户端通过从登录服务器获取的<code>外网</code>网关地址，建立一个链接网关的Session</p></li><li><p>通过<code>GateSessionKeyComponent</code>验证网关登录Key和Value是否匹配，不匹配返回登录失败</p></li><li><p>将Value作为初始参数创建一个<code>Plyaer</code></p></li><li><p>为当前链接客户端的<code>Session</code>添加<code>SessionPlayerComponent</code>Session绑定Player组件，并绑定Player</p><p>该类在Session销毁时，自身的Destroy事件会被调用。这里的Destroy还没写完</p></li><li><p>同时为当前<code>Session</code>添加邮箱组件，并设置类型为网关邮箱（网关邮箱收到的信息会直接转发给链接当前Session的客户端）</p><p>挂上这个组件表示该Entity是一个Actor,接收的消息将会队列处理</p><blockquote><p>到这一步，算是为对象建立Actor模型完成</p></blockquote></li><li><p>进入Map服务器</p><p>通过<code>StartConfigComponent</code>初始配置管理组件获取一个map服务器<code>内网</code>地址，并根据地址使用<code>NetInnerComponent.Get</code>方法创建一个链接Map服务器的内网Session</p><p>通过Session发送在Map服务器上创建Unit的请求，并传入当前网关服务链接客户端的Session的唯一Id</p></li></ol></li><li><p>Map服务器</p><ol><li><p>创建Unit</p></li><li><p>为Unit添加<code>UnitGateComponent</code>Unit网关组件，并将传入的网关Session的唯一Id绑定到组件中</p></li><li><p>为Unit添加<code>MailBoxComponent</code>邮箱组件</p></li><li><p>调用<code>MailBoxComponent</code>邮箱组件的<code>AddLocation</code>方法</p><p>调用<code>LocationProxyComponent</code>位置代理组件的<code>Add</code>方法</p><p>创建一获取地址服务器的<code>内网</code>地址创建一个链接地址服务器的内网Session</p><p>通过内网Session将Unit的Id和唯一Id发动到Location服务器</p></li></ol></li><li><p>Location服务器</p><ol><li><p>接收到Map服务器发送的<code>ObjectAddRequest</code>请求后，在<code>LocationComponent</code>位置组件中保存传送过来的Unit的Id与InstanceId</p><blockquote><p>到这一步，算是为对象建立了LocationActor模型完成，其实Actor模型和LocationActor模型代码上步骤分支主要在于添加邮箱组件时分配的邮箱类型和有没有调用<code>AddLocation</code>方法</p></blockquote></li></ol></li></ul><h2 id="发送Actor消息"><a href="#发送Actor消息" class="headerlink" title="发送Actor消息"></a>发送Actor消息</h2><p>参考服务端<code>MessageHelper</code>（客户端ActorLocation消息参考<code>OperaComponent</code>，服务端参考<code>SessionPlayerComponentSystem</code>）</p><ol><li><p>获取Unit的<code>UnitGateComponent</code>Unit网关组件，并得到组件中网关Session对象的唯一Id</p></li><li><p>通过网关Session的唯一Id提取网关服务器设备Id</p></li><li><p>通过<code>ActorMessageSenderComponent</code>Actor消息发送器管理组件创建一个<code>ActorMessageSender</code>Actor消息发送器，并通过上一步获取的网关服务器设备Id查找到对应的网关服务器的<code>内网地址</code>，赋值到Actor消息发送器中。</p></li><li><p>调用Actor消息发送器的<code>Send</code>方法</p><p>使用<code>NetInnerComponent</code>内网组件和网关服务器地址，创建一个链接网关服务器的内网Session，然后使用该Session发送消息。</p><blockquote><p>由于创建Session时使用的时内网地址，所以会有网关服务器的内网组件接收Session传来的消息，由于内网组件使用的消息分发器和外网组件不同，所以在解析消息的时候Actor消息和普通消息相比会有更多步骤</p></blockquote></li></ol><h2 id="接收Actor消息"><a href="#接收Actor消息" class="headerlink" title="接收Actor消息"></a>接收Actor消息</h2><p>和普通消息前期收取规则是一样的，产生差异在于Session调用消息分发器分发消息时。</p><ul><li><p><code>InnerMessageDispatcher</code>内网消息分发</p><ol><li><p>解析消息是否是Actor消息，非Actor消息调用<code>MessageDispatcherComponent</code>消息分发组件处理消息</p></li><li><p>Actor消息会通过<code>EventSystem</code>查找发送过来的ActorID（也就是对象的InstanceId）对应对象是否存在，不存在则直接返回<code>获取Actor失败异常</code></p></li><li><p>获取对象身上的<code>MailBoxComponent</code>邮箱组件，（如果获取不到则返回<code>获取邮箱失败异常</code>）将Session和Actor消息封装成<code>ActorMessageInfo</code>存入邮箱组件中</p></li><li><p>邮箱组件会在循环中读取消息并调用<code>MailboxDispatcherComponent</code>邮箱分发组件的<code>Handle</code>方法进行二次分发消息</p></li><li><p><code>Handle</code>方法根据前面的邮箱组件类型分发给<code>MailboxGateSessionHandler或MailboxMessageDispatcherHandler</code>的<code>Handle</code>方法做处理</p><ul><li><p><code>MailboxGateSessionHandler</code>直接将第三步获取的对象转换成<code>Session</code>向客户端发送消息</p></li><li><p><code>MailboxMessageDispatcherHandler</code>通过<code>ActorMessageDispatcherComponent</code>Actor消息分发组件的<code>Handle</code>方法，将消息进行最终分发处理</p><p><code>ActorMessageDispatcherComponent</code>Handle方法会查找注册在组件中消息操作码对应的消息处理实例，有该实例完成消息最终的处理</p></li></ul></li></ol></li><li><p><code>OuterMessageDispatcher</code>外网消息分发</p><ol><li><p>解析消息是否是ActorLocation消息，非ActorLocation消息调用<code>MessageDispatcherComponent</code>消息分发组件处理消息</p></li><li><p>ActorLocation消息通过Session绑定的<code>SessionPlayerCompoennt</code>组件获取Player，再通过Player获取UnitId；</p></li><li><p>通过<code>ActorLocationSenderComponent</code>ActorLocation消息发送器管理组件创建<code>ActorLocationSender</code>ActorLocation消息发送器，指定该对象的Id为UnitId，并将UnitId作为Key和ActorLocation消息发送器一起保存到字典中</p><blockquote><p>由于可能产生Bug或者进程挂掉而导致ActorLocationSender没有返回，所以在ActorLocationSenderComponent的Start事件中开启了一个携程，用于清理超时1分钟没有返回的ActorLocation消息发送器</p></blockquote></li></ol><blockquote><p>由于对象可能进行跨服转移，所以消息的接收不能直接使用对象身上挂在组件，需要生成一个代理对象来收发消息、对消息进行阻塞，也就是<code>ActorLocationSender</code></p></blockquote><ul><li>在<code>ActorLocationSender</code>的Start事件中，通过向<code>LocationProxyComponent</code>位置代理组件传入UnitId调用<code>Get</code>方法获取唯一ID</li><li>在<code>Get</code>方法中建立一个链接位置服务器的内网Session，并通过该Session发送<code>ObjectGetResponse</code>请求，传入UnitID</li><li>在位置服务器中，通过接收到的UnitId向<code>LocationComponent</code>位置组件<code>GetAsync</code>异步获取方法获取Unit的唯一Id</li><li>在<code>ActorLocationSender</code>的Start事件中，还开启了一个携程循环，用于读取<code>ActorTask</code>队列</li></ul><ol><li><p>调用<code>ActorLocationSender</code>ActorLocation消息发送器的<code>Call或Send</code>方法，创建一个<code>ActorTask</code>Actor消息任务，并保存到队列中</p></li><li><p>在<code>ActorLocationSender</code>ActorLocation消息发送器的<code>UpdateAsync</code>方法中，会循环读取队列中的<code>ActoTask</code>Actor消息任务，并调用<code>RunTask</code>方法发送消息</p><p><code>RunTask</code>方法流程</p><ol><li>先通过<code>ActorMessageSenderComponent</code>Actor消息发送器管理组件的<code>Get</code>方法获取一个<code>ActorMessageSender</code>Actor消息发送器</li></ol><ul><li><pre><code class="hljs">Get</code></pre><p>方法会使用传入的Unit的唯一ID提取对应的服务器设备ID，再通过设备ID获取对应服务器内网地址</p><ul><li>将Unit唯一ID和服务器地址作为初始参数创建一个<code>ActorMessageSender</code>Actor消息发送器</li></ul></li></ul><ol><li>使用<code>ActorMessageSender.CallWithoutException</code>不抛出异常的方式发送消息，这里后续逻辑就接入了前面所说的<code>InnerMessageDispatcher</code>内网消息分发</li><li>检测上一步消息是否发送成功<ul><li>如果发送成功，则完成ActorLocation消息的收发流程</li><li>如果是获取Actor失败异常，则等待半秒，然后重新从上面第五步开始<code>UpdateAsync</code>方法开始执行，注意该流程会重复5次，超过五次会将<code>ActorLocationSender</code>自身销毁，并抛出异常</li><li>如果是获取邮箱失败异常，则直接将自身销毁，并抛出异常</li></ul></li></ol></li></ol></li></ul><h2 id="对象跨服跳转"><a href="#对象跨服跳转" class="headerlink" title="对象跨服跳转"></a>对象跨服跳转</h2><p>参考<code>Actor_TransferHandler</code></p><ul><li>Map服务器A<ol><li>调用<code>LocationProxyComponent</code>位置代理组件的<code>Lock</code>方法（传入上锁对象ID和上锁时长），建立与位置服务器链接的内网Session，并发送上锁消息<code>ObjectLockRequest</code></li></ol></li><li>Location服务器<ol><li>调用<code>LocationComponent</code>的<code>Lock</code>方法，在Lock方法中会将上锁对象ID和唯一ID保存到容器中，建立一个计时器，超时后从容器中去除对象</li></ol></li><li>Map服务器A<ol><li>从<code>EventSystem</code>中删除对象，保存对象原有唯一ID</li><li>通过转移的目标服务器设备ID获取目标服务器地址，并建立内网Session</li><li>通过内网Session，向目标服务器发送转移对象。</li></ol></li><li>Map服务器B<ol><li>将收到的对象反序列化（注意这里反序列化会重新生成对象的唯一ID）</li><li>将对象加入<code>EventSystem</code>事件系统中</li><li>重新添加<code>MailBoxComponent</code>邮箱组件，来构建Actor模型</li><li>返回给服务器A新的唯一ID</li></ol></li><li>Map服务器A<ol><li>将对象销毁</li><li>调用<code>LocationProxyComponent</code>位置代理组件的<code>UnLock</code>方法（传入上锁对象ID和新的唯一ID），建立与位置服务器链接的内网Session，并发送上锁消息<code>ObjectUnLockRequest</code></li></ol></li><li>Location服务器<ol><li>调用<code>LocationComponent</code>的<code>UnLockAndUpdate</code>方法</li><li>在UnLockAndUpdate方法中会将上锁对象的唯一ID进行更新</li><li>调用<code>UnLock</code>方法，从上锁容器中删除对象，然后将上锁期间收到堵塞的Location消息重新进行发送</li></ol></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>消息分类：</p><ul><li><p>S2C:</p><ul><li>IMessage</li><li>IRequest</li></ul></li><li><p>C2S:</p><ul><li><p>IMessage</p></li><li><p>IRequest</p></li><li><p>IActorLocationMessage</p><p>前提是服务端对链接客户端的Session绑定的对象进行了ActorLocation绑定处理（挂载了邮箱组件，并注册到位置服务器中），使用Session按正常方式发送消息即可</p></li><li><p>IActorLocationRequest</p></li></ul></li><li><p>S2S:</p><ul><li><p>IMessage</p></li><li><p>IRequest</p></li><li><p>IActorMessage</p><p>前提是知道接收对象的唯一ID，且接收对象挂在了邮箱组件</p><p>通过<code>ActorMessageSenderComponent</code>组件传入对象的唯一ID，建立<code>ActorMessageSender</code>，通过<code>ActorMessageSender</code>发送消息</p><p>由于Actor是走内网组件所以只能在服务器内部传输使用，如果希望外网也能调用，需要自己手动扩展<code>OuterMessageDispatcher</code></p></li><li><p>IActorRequest</p></li><li><p>IActorLocationMessage</p><p>前提是接收对象有绑定邮箱组件，并在地址服务中进行了注册。</p><p>使用<code>ActorLocationSenderComponent</code>组件传入对象Id，获取<code>ActorLocationSender</code>，通过<code>ActorLocationSender</code>发送消息</p></li><li><p>IActorLocationRequest</p></li></ul></li></ul><p>登录流程：</p><ol><li>Client建立一个链接Realm的Session</li><li>Client向Realm发送登录请求，验证登录账成功后</li><li>Realm向Gate获取登录Gate的key和Gate的地址</li><li>Realm返回给Client登录Gate的key和Gate的地址</li><li>Client通过Gate地址建立一个新的Session，并销毁之前的Session</li><li>Client向Gate发送登录Gate请求，验证之前返回Key成功后在Gate创建Player<ol><li>将Client地址保存到Player中，方便后续对Client建立Session</li><li>给当前Gate链接Client的Session添加邮箱组件，将Session注册成Actor</li></ol></li><li>Gate返回给Client Player的ID，在客户端建立Player</li><li>Client向Gate发送登录Map请求</li><li>Gate向Map发送创建Unit请求</li><li>Map创建Unit，并返回UnitId<ol><li>给Unit添加邮箱组件，注册成Actor</li><li>再调用邮箱组件的AddLocation方法，将Unit注册到Location服务器中</li></ol></li><li>Gate返回给Client在Map返回的UnitId</li><li>Client通过UnitId建立Unit</li></ol>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Socket</tag>
      
      <tag>GameFramework</tag>
      
      <tag>Unity</tag>
      
      <tag>ET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2022/01/03/Algo/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2022/01/03/Algo/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>下面是冒泡排序的详细步骤：</p><ol><li>从数组的第一个元素开始，依次比较相邻的两个元素，如果它们的顺序不正确就交换它们的位置，使得较大（或较小）的元素向右移动一位。</li><li>继续从数组的第一个元素开始，重复步骤1，直到数组的倒数第二个元素被比较完毕。</li><li>重复步骤1和2，直到所有元素都排好序为止。</li></ol><p>例如<code>2 5 3 1 4</code>排序过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428093055336.png" alt="image-20210428093055336"></p><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = data.Length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<span class="hljs-comment">//从尾部开始往左遍历 轮次</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            &#123;<span class="hljs-comment">//每一轮都在对比j和j+1的大小 大于交换位置</span><br>                <span class="hljs-keyword">if</span> (data[j] &gt; data[j + <span class="hljs-number">1</span>])<br>                &#123;<br>                    (data[j], data[j + <span class="hljs-number">1</span>]) = (data[j + <span class="hljs-number">1</span>], data[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序是一种高效的排序算法，它的基本思想是通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，然后再分别对这两部分记录继续进行排序，以达到整个序列有序的目的。具体步骤如下：</p><ol><li>选择一个基准元素，通常选择第一个元素作为基准元素。</li><li>从序列的右端开始向左扫描，找到第一个比基准元素小的元素，将其与基准元素交换。</li><li>从序列的左端开始向右扫描，找到第一个比基准元素大的元素，将其与基准元素交换。</li><li>重复步骤2和3，直到左右两个扫描的位置相遇。</li><li>将基准元素与相遇位置的元素交换。</li><li>对左右两个子序列分别进行快速排序，直到整个序列有序。</li></ol><ul><li><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428093203178.png" alt="image-20210428093203178"></li></ul><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        Sort(data, <span class="hljs-number">0</span>, data.Length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> left, <span class="hljs-built_in">int</span> right</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> l = left, r = right;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//分区</span><br>        <span class="hljs-built_in">int</span> k = Parttion(data, l, r);<br>        Sort(data, l, k - <span class="hljs-number">1</span>);<br>        Sort(data, k, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Parttion</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> low, <span class="hljs-built_in">int</span> hight</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//使用最右边的作为基点</span><br>        <span class="hljs-built_in">int</span> pivot = data[hight];<br>        <span class="hljs-built_in">int</span> less = low,<br>            great = low;<br><br>        <span class="hljs-keyword">for</span> (; great &lt;= hight - <span class="hljs-number">1</span>; great++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (data[great] &lt; pivot)<br>            &#123;<br>                (data[less], data[great]) = (data[great], data[less]);<br>                less++;<br>            &#125;<br>        &#125;<br><br>        (data[less], data[hight]) = (data[hight], data[less]);<br>        <span class="hljs-keyword">return</span> less;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>插入排序的基本思想是将待排序的元素分成两个部分，一部分是已排序的元素，另一部分是未排序的元素。初始时，已排序的部分只有一个元素，即第一个元素。然后，从未排序的部分取出一个元素，插入到已排序的部分中的正确位置，使得插入后仍然保持已排序部分有序。重复这个过程，直到所有元素都被插入到已排序的部分中，排序完成。</p><p>具体步骤如下：</p><ol><li>从第一个元素开始，认为它已经是一个有序序列。</li><li>取出下一个元素，在已经排序的序列中从后向前扫描。</li><li>如果已排序的序列中的元素大于新元素，将该元素移到下一个位置。</li><li>重复步骤3，直到已排序的序列中的元素小于等于新元素。</li><li>将新元素插入到该位置后。</li><li>重复步骤2~5，直到所有元素都被插入到有序序列中，排序完成</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/11.png"></p><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 插入排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InSertSort</span><br>&#123;<br>    <span class="hljs-comment">//第0个是有序的，依次往后遍历，比较大小然后交换位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//0~1是有序的从1开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; data.Length; i++)<br>        &#123;<br>            <span class="hljs-comment">//0~i是想有序的</span><br>            <span class="hljs-comment">// j从i-1开始向前遍历，找到第一个比当前元素大的位置</span><br>            <span class="hljs-comment">// 并且j要大于等于0，避免越界</span><br>            <span class="hljs-comment">// 如果找到了符合条件的位置，就将j+1到i-1的元素向右移动一位</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; data[j] &gt; data[j + <span class="hljs-number">1</span>]; j--)<br>            &#123;<br>                (data[j], data[j+<span class="hljs-number">1</span>]) = (data[j+<span class="hljs-number">1</span>], data[j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是一种基于插入排序的排序算法，也称为缩小增量排序。它通过将待排序的数组分成若干个子序列，对每个子序列进行插入排序，然后逐渐缩小子序列的长度，最终将整个数组排序。</p><p>希尔排序的步骤如下：</p><ol><li>选择一个增量序列，通常为 n&#x2F;2、n&#x2F;4、n&#x2F;8…直到增量为1，其中n为待排序数组的长度。</li><li>对于每个增量，将待排序数组分成若干个子序列，每个子序列包含相距为增量的元素，对每个子序列进行插入排序。</li><li>逐渐减小增量，重复步骤2，直到增量为1时，整个数组排序完成。</li></ol><p>需要注意的是，希尔排序的时间复杂度是O(nlogn)到O(n^2)不等，具体取决于增量序列的选择。</p><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/xrpx.png"></p><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 希尔排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span><br>&#123;<br>    <span class="hljs-comment">//1.间隔排序 通常为长度的一半</span><br>    <span class="hljs-comment">//2.组内排序</span><br>    <span class="hljs-comment">//3.重新设置间隔分组,为前一次分组的一半</span><br>    <span class="hljs-comment">//4、插入排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">int</span> n = data.Length;<br>        <span class="hljs-built_in">int</span> h, j,temp; <span class="hljs-comment">//h为步长 </span><br><br>        <span class="hljs-keyword">for</span> (h = n / <span class="hljs-number">2</span>; h &gt; <span class="hljs-number">0</span>; h /= <span class="hljs-number">2</span>)<br>        &#123;<span class="hljs-comment">//按照增量式子 改变步数h</span><br><br>            <span class="hljs-comment">//组内排序</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = h; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-comment">//临时保存 步长的值</span><br>                temp = data[i];<br><br>                <span class="hljs-keyword">for</span> (j = i - h; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; data[j]; j = j - h)<br>                &#123;<span class="hljs-comment">//从0开始到步长 比较步长和开头的值, 通过j=j-h 改变0位置指针j的位置</span><br>                    data[j + h] = data[j];<br>                &#125;<br>                data[j + h] = temp;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>选择排序的步骤如下：</p><ol><li>遍历待排序数组，找到最小元素。</li><li>将最小元素与待排序数组的第一个元素交换位置。</li><li>在剩余的元素中继续寻找最小元素，重复步骤1和2，直到所有元素均排序完毕。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428094415919.png" alt="image-20210428094415919"></p><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 选择排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 第一趟从所有的n个记录中选择最小的记录放在第一位，</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 第二趟从n-1个记录中选择最小的记录放到第二位。以此类推，经过n-1趟排序之后，整个待排序序列就成为有序序列了。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SelectSort</span><br>&#123;<br>    <span class="hljs-comment">//两个指针一个0一个1开始</span><br>    <span class="hljs-comment">//比较两个索引下元素大小，然后交换位置</span><br>    <span class="hljs-comment">//每次选择最小或者最大的放在已经排序集合的后面</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<br>            <br>            <span class="hljs-built_in">int</span> minIndex = i;<br>            <span class="hljs-comment">//将i之后的值与对比</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i + <span class="hljs-number">1</span>; j &lt; data.Length; j++)<br>            &#123;<br>                <span class="hljs-comment">//存储j的索引</span><br>                minIndex = data[j] &lt; data[minIndex] ? j : minIndex;<br>            &#125;<br>            <span class="hljs-comment">//将找到的小于i的值进行交换</span><br>            (data[i], data[minIndex]) = (data[minIndex], data[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="归并类排序"><a href="#归并类排序" class="headerlink" title="归并类排序"></a>归并类排序</h2><p>在归并类排序一般只讲归并排序，但是归并排序也分二路归并、多路归并，这里就讲较多的二路归并排序，且用递归方式实现。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是一种基于分治思想的排序算法，它将待排序的数组分成两个子数组，对每个子数组进行递归排序，最后将两个有序子数组合并成一个有序数组。</p><p>归并排序的步骤如下：</p><ol><li>将待排序的数组分成两个子数组，每个子数组包含大约一半的元素。</li><li>对每个子数组进行递归排序，直到子数组的长度为1。</li><li>将两个有序子数组合并成一个有序数组。合并过程中，比较两个子数组的第一个元素，将较小的元素放入新的数组中，并将该元素所在的子数组的指针向后移动一位，重复该过程直到一个子数组的所有元素都被合并到新的数组中。</li><li>重复步骤3，直到所有的元素都被合并到新的数组中。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428094541727.png" alt="image-20210428094541727"></p><p>合并为一个O(n)的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428094602560.png" alt="image-20210428094602560"></p><p>实现代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 归并排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//1.拆分为左右两部</span><br>        Splitprocess(data, <span class="hljs-number">0</span>, data.Length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 拆分过程</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 分为左右两部分，然后对他进行排序</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Splitprocess</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> left, <span class="hljs-built_in">int</span> right</span>)</span><br>    &#123;<span class="hljs-comment">//一直拆，拆到两个的元素就进行merge</span><br>        <span class="hljs-keyword">if</span> (left == right) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">int</span> mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">//计算得到中间的位置</span><br>        Splitprocess(data, left, mid); <span class="hljs-comment">//归并左边的</span><br>        Splitprocess(data, mid + <span class="hljs-number">1</span>, right); <span class="hljs-comment">//归并右边的</span><br>        merge(data, left, mid, right); <span class="hljs-comment">//将所有序列的归并</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> left, <span class="hljs-built_in">int</span> mid, <span class="hljs-built_in">int</span> right</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//临时空间，比原来数组大1，用来存储合并后的序列</span><br>        <span class="hljs-built_in">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[right - left + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>,<br>            L = left,<br>            M = mid + <span class="hljs-number">1</span>;<span class="hljs-comment">//这个其实就是right</span><br>        <span class="hljs-keyword">while</span> (L &lt;= mid &amp;&amp; M &lt;= right)<br>        &#123;<span class="hljs-comment">//将data后一个位置排序到result上，使其有序 然后++ 改变值</span><br>            <span class="hljs-comment">//如果L上的数小于M上的数</span><br>            <span class="hljs-comment">//拷贝到i上 然后++ 下移开始下一个数的比较</span><br>            result[i++] = data[L] &lt;= data[M] ? data[L++] : data[M++];<br>        &#125;<br><br>        <span class="hljs-comment">//越界情况 一般两个中一个</span><br>        <span class="hljs-keyword">while</span> (L &lt;= mid)<br>        &#123;<br>            result[i++] = data[L++];<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (M &lt;= right)<br>        &#123;<br>            result[i++] = data[M++];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> t = <span class="hljs-number">0</span>; t &lt; result.Length; t++)<br>        &#123;<br>            data[left + t] = result[t];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="桶类排序"><a href="#桶类排序" class="headerlink" title="桶类排序"></a>桶类排序</h2><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>桶排序是一种线性排序算法，它的基本思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序，最后将所有的桶中的数据依次取出，组成有序序列。</p><p>具体实现步骤如下：</p><ol><li>确定桶的个数以及每个桶的取值范围。</li><li>遍历待排序数组，将每个元素放入对应的桶中。</li><li>对每个桶中的元素进行排序。</li><li>将所有桶中的元素依次取出，组成有序序列。</li></ol><p>桶排序的时间复杂度取决于桶的个数和每个桶内部排序所用的算法。如果每个桶内部采用快速排序等高效的排序算法，那么桶排序的时间复杂度可以达到 O(nlogn)。但是，如果桶的个数过多，每个桶内部的数据又比较少，那么桶排序的时间复杂度就会退化为 O(n+k)，其中 k 表示桶的个数。此外，桶排序还需要额外的存储空间来存放桶，因此空间复杂度也较高。</p><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428094617790.png" alt="image-20210428094617790"></p><p>实现一个简单桶排序：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 桶排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BucketSort</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//得到最大值 确定桶的个数</span><br>        <span class="hljs-built_in">int</span> maxValue = data[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> data)<br>        &#123;<br>            maxValue = Math.Max(maxValue, i);<br>        &#125;<br><br>        <span class="hljs-comment">//这里需要注意的是：bucketNum 的计算是根据场景确定的，不同的场景 bucketNum 的计算方式是不同的</span><br>        <span class="hljs-comment">//所以 bucketNum 的计算之前，需要确定桶排序使用的场景 maxValue / 10 + 1; // 39 / 10 + 1 = 4</span><br><br>        <span class="hljs-comment">//这里使用动态计算，即数组长度的平方根向下取整</span><br>        <span class="hljs-built_in">int</span> bucketNum = (<span class="hljs-built_in">int</span>)Math.Floor(Math.Sqrt(data.Length));<br>        List&lt;<span class="hljs-built_in">int</span>&gt;[] buckets = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;[bucketNum];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; bucketNum; i++)<br>        &#123;<br>            buckets[i] = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//初始化桶</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<br>            <span class="hljs-built_in">int</span> bucketIndex = (<span class="hljs-built_in">int</span>)Math.Floor(data[i] * (bucketNum - <span class="hljs-number">1</span>) / (<span class="hljs-built_in">double</span>)maxValue);<br>            buckets[bucketIndex].Add(data[i]);<br>        &#125;<br><br>        <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; bucketNum; i++)<br>        &#123;<br>            <span class="hljs-comment">//将每过桶里的值转数组，然后插入排序</span><br>            <span class="hljs-built_in">int</span>[] temp = buckets[i].ToArray();<br><br>            InsertSort(temp);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; temp.Length; j++)<br>            &#123;<span class="hljs-comment">//将排序后的值存会data里</span><br>                data[index++] = temp[j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; data.Length; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; data[j + <span class="hljs-number">1</span>] &lt; data[j]; j--)<br>            &#123;<br>                (data[j], data[j + <span class="hljs-number">1</span>]) = (data[j + <span class="hljs-number">1</span>], data[j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>计数排序是一种特殊的桶排序，每个桶的大小为1，每个桶不在用List表示，而通常用一个值用来计数。</p><ol><li>找出待排序序列中的最大值和最小值。</li><li>统计待排序序列中每个元素出现的次数，可以使用一个计数数组来记录。</li><li>对于每个元素，确定其在有序序列中的位置，可以使用前缀和的方式来计算。</li><li>根据统计信息，将待排序序列中的每个元素放到有序序列中的正确位置上。</li><li>最后得到的就是一个有序的序列。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xichujn/image/img/image-20210428094631980.png" alt="image-20210428094631980"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 计数排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 适合计数范围比较小的数列</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CountSort</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br><br>        <span class="hljs-comment">//1.通过最大值减去最小值，确定data的取值范围</span><br>        <span class="hljs-built_in">int</span> max = GetMax(data);<br><br>        <span class="hljs-comment">//使用下标来保存，元素出现的次数</span><br>        <span class="hljs-comment">//2.计数数组</span><br>        <span class="hljs-built_in">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[max + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<br>            count[data[i]]++;<br>        &#125;<br><br>        <span class="hljs-comment">//计算前缀和 元素+下标为下一个下标的元素值</span><br>        <span class="hljs-comment">//通过前缀和来确定每个元素在排序数组中的最终位置</span><br>        <span class="hljs-comment">//3.累计数组</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; count.Length; i++)<br>        &#123;<br>            <span class="hljs-comment">//从1开始</span><br>            count[i] = count[i] + count[i - <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">//排序过程</span><br>        <span class="hljs-comment">//4.结果数组</span><br>        <span class="hljs-built_in">int</span>[] output = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[data.Length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = data.Length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<span class="hljs-comment">//因为数组下标是从0开始的，所以当我们要把一个元素放到排序后的数组中时，</span><br>         <span class="hljs-comment">//需要将其下标减1，才能得到正确的位置</span><br>            output[count[data[i]] - <span class="hljs-number">1</span>] = data[i];<br>            count[data[i]]--;<br>        &#125;<br><br>        <span class="hljs-comment">//复制数组回原数组</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<br>            data[i] = output[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetMax</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> max = data[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> data)<br>        &#123;<br>            max = Math.Max(max, i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ol><li>将待排序数组中的所有元素统一转化为同样位数的字符串，位数不够的在前面补0。</li><li>从字符串的最右侧（即最低位）开始，按照每一位的大小将所有元素分配到桶中。</li><li>将所有桶中的元素按照桶的顺序依次取出，组成一个新的序列。</li><li>重复步骤2和3，直到所有位都被处理完毕，得到的序列就是排好序的结果。</li></ol><p>需要注意的是，基数排序只适用于元素可以按照位数划分的情况，例如整数、字符串等。在实现过程中，需要使用桶来存储元素，每个桶中的元素需要保持原始顺序不变。同时，为了保证排序的稳定性，每个桶中的元素需要按照进入桶中的顺序依次取出</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 基数排序</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data.Length == <span class="hljs-literal">null</span> || data.Length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">int</span> max = GetMax(data);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> exp = <span class="hljs-number">1</span>; max / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>)<br>        &#123;<br>            <span class="hljs-comment">//计算每一位 个位 十位 百位。。。</span><br>            countSort(data, exp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">countSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> exp</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//一个存储排序结果，一个存储数字出现的次数</span><br>        <span class="hljs-built_in">int</span>[] output = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[data.Length];<br>        <span class="hljs-built_in">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<br>            <span class="hljs-comment">//取余计算每一位的数字 存储到次数数组对应的下标上加1</span><br>            count[(data[i] / exp) % <span class="hljs-number">10</span>]++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<span class="hljs-comment">//前缀和算法 注意从1开始</span><br>            count[i] = count[i] + count[i - <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = data.Length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<span class="hljs-comment">//将数字按照位置存储到输出数组中</span><br>            output[count[(data[i] / exp) % <span class="hljs-number">10</span>] - <span class="hljs-number">1</span>] = data[i];<br>            count[(data[i] / exp) % <span class="hljs-number">10</span>]--;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>        &#123;<span class="hljs-comment">//复制回原数组</span><br>            data[i] = output[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetMax</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> max = data[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> data)<br>        &#123;<br>            max = Math.Max(max, i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">排序算法</th><th align="left">平均时间复杂度</th><th align="left">最好</th><th align="left">最坏</th><th align="left">空间复杂度</th><th align="left">稳定性</th></tr></thead><tbody><tr><td align="left">冒泡排序</td><td align="left">O(n^2)</td><td align="left">O(n)</td><td align="left">O(n^2)</td><td align="left">O(1)</td><td align="left">稳定</td></tr><tr><td align="left">快速排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(n^2)</td><td align="left">O(logn)</td><td align="left">不稳定</td></tr><tr><td align="left">插入排序</td><td align="left">O(n^2)</td><td align="left">O(n)</td><td align="left">O(n^2)</td><td align="left">O(1)</td><td align="left">稳定</td></tr><tr><td align="left">希尔排序</td><td align="left">O(n^1.3)</td><td align="left">O(n)</td><td align="left">O(nlog2n)</td><td align="left">O(1)</td><td align="left">不稳定</td></tr><tr><td align="left">选择排序</td><td align="left">O(n^2)</td><td align="left">O(n^2)</td><td align="left">O(n^2)</td><td align="left">O(1)</td><td align="left">不稳定</td></tr><tr><td align="left">堆排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(1)</td><td align="left">不稳定</td></tr><tr><td align="left">归并排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(n)</td><td align="left">稳定</td></tr><tr><td align="left">桶排序</td><td align="left">O(n+k)</td><td align="left">O(n+k)</td><td align="left">O(n+k)</td><td align="left">O(n+k)</td><td align="left">稳定</td></tr><tr><td align="left">计数排序</td><td align="left">O(n+k)</td><td align="left">O(n+k)</td><td align="left">O(n+k)</td><td align="left">O(k)</td><td align="left">稳定</td></tr><tr><td align="left">基数排序</td><td align="left">O(n*k)</td><td align="left">O(n*k)</td><td align="left">O(n*k)</td><td align="left">O(n+k)</td><td align="left">稳定</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ILRuntime代码热更</title>
    <link href="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/"/>
    <url>/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="1-HelloWord"><a href="#1-HelloWord" class="headerlink" title="1.HelloWord"></a>1.HelloWord</h3><p>将ILRuntime导入在Console中发现大量CS0227报错，那么在Player设置中打开允许不安全代码选项（ILRuntime中使用了指针等不安全代码），如此报错信息就解决了， 随后在Demo目录下有一个HotFix_Project<del>文件夹  这个文件夹以</del>结尾，Unity会忽略掉它。打开HotFix这个项目，生成解决方案，还有报错的话就回到Unity 将 .Net.2.0改成4x。再生成解决方案。</p><p>Unity会生成一个 文件</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/StreamingAssets.png" class=""><p>同时我们在HotFix这个项目内新建一个HotFixHelloWorld的类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">HotFix_Project</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HotFixHelloWorld</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HelloWorld</span>()</span><br>        &#123;<br>            UnityEngine.Debug.Log(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>在HotFix项目外新建一个HotFixMgr的类 来调用这个HotFixHelloWorld的类内的方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HotFixMgr</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//AppDomain是ILRuntime的入口，最好在一个单例类内保存</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HotFixMgr minstance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HotFixMgr instance<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (minstance == <span class="hljs-literal">null</span>)<br>            &#123;<br>                minstance = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">&quot;HotFixMgr&quot;</span>).AddComponent&lt;HotFixMgr&gt;();<br>                minstance.LoadHotFixAssembly();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> minstance;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//AppDomain是ILRuntime的入口，最好是在一个单例类中保存，整个游戏全局就一个，这里为了示例方便，每个例子里面都单独做了一个</span><br>    <span class="hljs-comment">//大家在正式项目中请全局只创建一个AppDomain</span><br>    <span class="hljs-keyword">public</span> AppDomain appdomain;<br>    System.IO.MemoryStream fs;<br>    System.IO.MemoryStream p;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadHotFixAssembly</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//首先实例化ILRuntime的AppDomain，AppDomain是一个应用程序域，每个AppDomain都是一个独立的沙盒</span><br>        appdomain = <span class="hljs-keyword">new</span> ILRuntime.Runtime.Enviorment.AppDomain();<br>        <span class="hljs-comment">//正常项目中应该是自行从其他地方下载dll，或者打包在AssetBundle中读取，平时开发以及为了演示方便直接从StreammingAssets中读取，</span><br>        <span class="hljs-comment">//正式发布的时候需要大家自行从其他地方读取dll</span><br><br>        <span class="hljs-comment">//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br>        <span class="hljs-comment">//这个DLL文件是直接编译HotFix_Project.sln生成的，已经在项目中设置好输出目录为StreamingAssets，在VS里直接编译即可生成到对应目录，无需手动拷贝</span><br>        <span class="hljs-comment">//工程目录在Assets\Samples\ILRuntime\1.6\Demo\HotFix_Project~</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_ANDROID</span><br>        WWW www = <span class="hljs-keyword">new</span> WWW(Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.dll&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        WWW www = <span class="hljs-keyword">new</span> WWW(<span class="hljs-string">&quot;file:///&quot;</span> + Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.dll&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">while</span> (!www.isDone)<br>        &#123;<br>            Thread.Sleep(<span class="hljs-number">100</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(www.error))<br>            UnityEngine.Debug.LogError(www.error);<br>        <span class="hljs-built_in">byte</span>[] dll = www.bytes;<br>        www.Dispose();<br><br>        <span class="hljs-comment">//PDB文件是调试数据库，如需要在日志中显示报错的行号，则必须提供PDB文件，不过由于会额外耗用内存，正式发布时请将PDB去掉，下面LoadAssembly的时候pdb传null即可</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_ANDROID</span><br>        www = <span class="hljs-keyword">new</span> WWW(Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.pdb&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        www = <span class="hljs-keyword">new</span> WWW(<span class="hljs-string">&quot;file:///&quot;</span> + Application.streamingAssetsPath + <span class="hljs-string">&quot;/HotFix_Project.pdb&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">while</span> (!www.isDone)<br>        &#123;<br>            Thread.Sleep(<span class="hljs-number">100</span>);<br>        &#125;<br>     <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(www.error))<br>            UnityEngine.Debug.LogError(www.error);<br>        <span class="hljs-built_in">byte</span>[] pdb = www.bytes;<br>        fs = <span class="hljs-keyword">new</span> MemoryStream(dll);<br>        p = <span class="hljs-keyword">new</span> MemoryStream(pdb);<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            appdomain.LoadAssembly(fs, p, <span class="hljs-keyword">new</span> ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());<br>        &#125;<br>        <span class="hljs-keyword">catch</span><br>        &#123;<br>            Debug.LogError(<span class="hljs-string">&quot;加载热更DLL失败，请确保已经通过VS打开Assets/Samples/ILRuntime/1.6/Demo/HotFix_Project/HotFix_Project.sln编译过热更DLL&quot;</span>);<br>        &#125;<br><br><br>        InitializeILRuntime();<br>        OnHotFixLoaded();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnHotFixLoaded</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//HotFixMgr.instance.appdomain.Invoke(&quot;HotFix_Project.HotFixHelloWorld&quot;, &quot;HelloWorld&quot;, null, null);</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeILRuntime</span>()</span><br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> DEBUG &amp;&amp; (UNITY_EDITOR || UNITY_ANDROID || UNITY_IPHONE)</span><br>        <span class="hljs-comment">//由于Unity的Profiler接口只允许在主线程使用，为了避免出异常，需要告诉ILRuntime主线程的线程ID才能正确将函数运行耗时报告给Profiler</span><br>        appdomain.UnityMainThreadID = System.Threading.Thread.CurrentThread.ManagedThreadId;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-comment">//这里做一些ILRuntime的注册，HelloWorld示例暂时没有需要注册的</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (fs != <span class="hljs-literal">null</span>)<br>            fs.Close();<br>        <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">null</span>)<br>            p.Close();<br>        fs = <span class="hljs-literal">null</span>;<br>        p = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>随后我们试着输出HelloWord</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Demo_HelloWorld</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// Start is called before the first frame update</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> className = <span class="hljs-string">&quot;HotFix_Project.HotFixHelloWorld&quot;</span>;<br>        <span class="hljs-built_in">string</span> funcName = <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>        HotFixMgr.instance.appdomain.Invoke(className, funcName, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">// Update is called once per frame</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/Snipaste_2021-12-30_15-15-35.png" class=""><p>总结：ILRuntime热更的一个基本的流程是将项目代码打包为dll，这个dll可以直接放在项目文件中（DEBUG阶段），也可以打包到AB包中并从远端下载后加载（RELEASE阶段）。在工程中，使用AppDomain调用dll文件中的相应方法即可实现热更新（可以提供一个固定的开始热更新方法并调用这个方法，然后热更新部分再在这个方法中调用其他热更新资源）。</p><h3 id="2-基于ILRuntime实现MonoBehaviour行为"><a href="#2-基于ILRuntime实现MonoBehaviour行为" class="headerlink" title="2.基于ILRuntime实现MonoBehaviour行为"></a>2.基于ILRuntime实现MonoBehaviour行为</h3><p>热更程序集里拥有MonoBehaviour能力</p><p>方法一：继承MonoBehaviour</p><p>因为MonoBehaviour隶属于主程序集，热更程序集 继承 主程序集 属于跨域继承</p><p>运行性能低，而且需要编写接口适配，无论是性能和开发效率都不具备优势</p><p>方法二：自行架构</p><p>主工程 适配器</p><p>HotFixMonoBehaviourAdapter（通过字符串实例化热更对象，并且调用生命周期的方法，例如Awake Start等）</p><p>HotFixMonoBehaviour（实现生命周期函数）</p><hr><p>我们新建HotFixMonoBehaviourAdapter类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HotFixMonoBehaviourAdapter</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> bindClass;<br>    <span class="hljs-keyword">private</span> IType classType;<br>    <span class="hljs-keyword">private</span> ILTypeInstance instance;<br><br>    <span class="hljs-keyword">private</span> IMethod start_method;<br>    <span class="hljs-keyword">private</span> IMethod update_method;<br>    <span class="hljs-keyword">private</span> IMethod OnDestroy_method;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//需要创建的类型</span><br>        classType = HotFixMgr.instance.appdomain.LoadedTypes[bindClass];<br><br>        <span class="hljs-comment">//创建实例</span><br>        instance = (classType <span class="hljs-keyword">as</span> ILType).Instantiate();<br><br>        <span class="hljs-comment">//通过反射获得生命周期</span><br>        IMethod awake_method = classType.GetMethod(<span class="hljs-string">&quot;Awake&quot;</span>, <span class="hljs-number">0</span>);<br>        start_method = classType.GetMethod(<span class="hljs-string">&quot;Start&quot;</span>, <span class="hljs-number">0</span>);<br>        update_method = classType.GetMethod(<span class="hljs-string">&quot;Update&quot;</span>, <span class="hljs-number">0</span>);<br>        OnDestroy_method = classType.GetMethod(<span class="hljs-string">&quot;OnDestroy&quot;</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span> (awake_method != <span class="hljs-literal">null</span>)<br>        &#123;<br>            HotFixMgr.instance.appdomain.Invoke(awake_method, instance);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (start_method != <span class="hljs-literal">null</span>)<br>        &#123;<br>            HotFixMgr.instance.appdomain.Invoke(start_method, instance);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (update_method != <span class="hljs-literal">null</span>)<br>        &#123;<br>            HotFixMgr.instance.appdomain.Invoke(update_method, instance);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (OnDestroy_method != <span class="hljs-literal">null</span>)<br>        &#123;<br>            HotFixMgr.instance.appdomain.Invoke(OnDestroy_method, instance);<br>        &#125;<br>        instance = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HotFixMonoBehaviour类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">HotFix_Project</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">HotFixMonoBehaviour</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;Awake&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;Start&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;Update&quot;</span>);<br>        &#125; <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;OnDestroy&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将HotFixMonoBehaviourAdapter挂到游戏物体上，传入命名空间和类名</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/Snipaste_2021-12-30_15-37-51.png" class=""><p>随后运行后，我们可以看到我们热更程序集里的脚本都运行了，删除游戏对象后，OnDestroy也执行了</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/1640860053260.png" class=""><h3 id="3-自定义委托注册"><a href="#3-自定义委托注册" class="headerlink" title="3.自定义委托注册"></a>3.自定义委托注册</h3><p>我们在HotFix_Project中添加TestRun脚本写一个点击，同时也要记得把Unity的UIDLl引用添加到我们的HotFix_Project中</p><p>默认情况下只支持Action Func委托</p><p>因为ILRuntime默认情况下只支持系统默认的委托，而UnityAction属于自定义委托，所以我们要自己写委托来兼容，回到HotFixMgr脚本InitializeILRuntime 添加委托</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeILRuntime</span>()</span><br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> DEBUG &amp;&amp; (UNITY_EDITOR || UNITY_ANDROID || UNITY_IPHONE)</span><br>        <span class="hljs-comment">//由于Unity的Profiler接口只允许在主线程使用，为了避免出异常，需要告诉ILRuntime主线程的线程ID才能正确将函数运行耗时报告给Profiler</span><br>        appdomain.UnityMainThreadID = System.Threading.Thread.CurrentThread.ManagedThreadId;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-comment">//这里做一些ILRuntime的注册，HelloWorld示例暂时没有需要注册的</span><br><br>        appdomain.DelegateManager.RegisterDelegateConvertor&lt;UnityEngine.Events.UnityAction&gt;((act) =&gt;<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UnityEngine.Events.UnityAction((() =&gt;<br>            &#123;<br>                ((Action) act).Invoke();<br>            &#125;));<br>        &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>运行 这时候能看到我们的点击已经被调用了</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/image-20211230185605258.png" class=""><p><strong>CLR优化</strong></p><p>如果，我们在HotFix_Project中访问了Vector3这个成员，由于该结构体的主程序是unity的程序集，这种跨程序集的访问使用的是反射的方法进行访问的，我们就可以使用CLR的绑定避开反射的访问</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/image-20211230190213184.png" class=""><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/image-20211230190345279.png" class=""><p>接着我们在HotFixMgr类的InitializeILRuntime方法内注册绑定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//注册CLR绑定,避免过多的反射访问,提升性能</span><br>       ILRuntime.Runtime.Generated.CLRBindings.Initialize(appdomain);<br></code></pre></td></tr></table></figure><p>绑定后，热更工程内的Vector3就不会使用反射的形式了从而提高了性能</p><img src="/2021/12/30/Engine/ILRuntime%E7%83%AD%E6%9B%B4/image-20211230190852367.png" class=""><p>需要热更的部分为两个部分 </p><ul><li>变化频率低的通用业务</li><li>变化频率高的游戏业务</li></ul>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>ILRuntime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity资源统一加载</title>
    <link href="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="资源类型及加载方式"><a href="#资源类型及加载方式" class="headerlink" title="资源类型及加载方式"></a>资源类型及加载方式</h4><p>1.Resources 直接使用Resource.Load 可以直接加载到资源</p><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/image-20211225161613673.png" class="" title="image-20211225161613673"><p>2.Asset Bundles 做打包更新必须需要使用的方式</p><table><thead><tr><th><a href="https://docs.unity3d.com/ScriptReference/AssetBundle.LoadFromMemory.html">AssetBundle.LoadFromMemory</a> 从内存加载，多用在需要严谨的等待逻辑执行完，并且中间不做其他事情</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/ScriptReference/AssetBundle.LoadFromMemoryAsync.html">AssetBundle.LoadFromMemoryAsync</a> 从内存区域异步创建 AssetBundle</td></tr><tr><td><a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/AssetBundle.LoadFromFile.html">AssetBundle.LoadFromFile</a> 从硬盘上的文件上加载 支持任何压缩类型的包</td></tr><tr><td><a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/AssetBundle.LoadFromFileAsync.html">AssetBundle.LoadFromFileAsync</a> 异步</td></tr><tr><td><a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/AssetBundle.LoadFromStream.html">AssetBundle.LoadFromStream</a> 流的方式 边下载边加载 只要是基于流的数据都能创建Bundle 对于要在网络实时加载 最优选择</td></tr><tr><td><a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/AssetBundle.LoadFromStreamAsync.html">AssetBundle.LoadFromStreamAsync</a></td></tr></tbody></table><p>3.Raw(Image\Movie) 直接在编辑器或者运行场景中放置的</p><h4 id="Unity资源加载需求"><a href="#Unity资源加载需求" class="headerlink" title="Unity资源加载需求"></a>Unity资源加载需求</h4><p>分析</p><ul><li>发布平台。每一个发布平台的加载情况都不相同</li><li>动态更新&#x2F;流式加载 将运行必须的基础数据放到一个包上 其他内容放到另外一个包上</li><li>压缩加密</li><li>自定义数据包</li></ul><p>关键因数</p><p> Unity资源路径</p><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407120919.png" class=""><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407120938.png" class=""><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407120954.png" class=""><h4 id="Unity资源加载模块设计"><a href="#Unity资源加载模块设计" class="headerlink" title="Unity资源加载模块设计"></a>Unity资源加载模块设计</h4><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407121008.png" class=""><p><strong>流程设计</strong></p><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407121019.png" class=""><h4 id="Unity自动更新"><a href="#Unity自动更新" class="headerlink" title="Unity自动更新"></a>Unity自动更新</h4><p><strong>实现方案</strong></p><p>服务器为主的优点</p><ul><li>动态生成十几需要更新的版本清单</li><li>一次更新多个版本</li><li>动态更新策略（渠道 区域 比例）</li></ul><p>缺点</p><ul><li><p>机制完善的更新系统，开发成本高</p></li><li><p>服务器压力大，运营成本高</p></li></ul><p>客户端为主优点</p><ul><li>服务器仅作存储压力小</li><li>无服务器逻辑，无开发成本</li></ul><p>缺点</p><ul><li>难以支持动态策略，不灵活</li><li>一次更新到最新成本高</li><li>适合逐版本增量升级</li></ul><p>更新流程</p><img src="/2021/12/25/Engine/Unity%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD/20220407121036.png" class="">]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity AssetBundle</title>
    <link href="/2021/12/24/Engine/Unity%20AssetBundle/"/>
    <url>/2021/12/24/Engine/Unity%20AssetBundle/</url>
    
    <content type="html"><![CDATA[<h4 id="AssetBundle的作用"><a href="#AssetBundle的作用" class="headerlink" title="AssetBundle的作用"></a>AssetBundle的作用</h4><ul><li>AssetBundle相当于是一个资源压缩包，里面的一个个对象，对象有两大类 一类是纯资源的对象，另外一个是Unity序列化的一些游戏对象。包含模型、贴图、预制体、声音、甚至整个场景。</li><li>AssetBundle自身保存着互相的依赖关系;<br>压缩包可以使用LZMA和LZ4压缩算法，减少包大小，更快的进行网络传输；</li><li>把一些可以下载内容放在AssetBundle里面，可以减少安装包的大小；</li><li>版本更新</li><li>减少运行时的内存压力</li><li>DownLoaddable Content（DLC）</li></ul><h4 id="AssetBundle的创建"><a href="#AssetBundle的创建" class="headerlink" title="AssetBundle的创建"></a>AssetBundle的创建</h4><p>设置 Asset Bundle Name</p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211224225401208.png" alt="image-20211224225401208"></p><p><strong>Build AssetBundle</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BuildTool</span> <br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;BuildTool/Clear AssetBundles&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClearAllAssetBundles</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> allBundles = AssetDatabase.GetAllAssetBundleNames();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> bundle <span class="hljs-keyword">in</span> allBundles)<br>        &#123;<br>            AssetDatabase.RemoveAssetBundleName(bundle,<span class="hljs-literal">true</span>);<br>            Debug.LogFormat(<span class="hljs-string">&quot;BuildTool:Remove Old Bundle:&#123;0&#125;&quot;</span>,bundle);<br>        &#125;<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;BuildTool/Build AssetBundles&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildAllAssetBundles</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> assetBundleDirectory = <span class="hljs-string">&quot;Assets/AssetBundles&quot;</span>;<br>        <span class="hljs-keyword">if</span> (!Directory.Exists(assetBundleDirectory))<br>        &#123;<br>            Directory.CreateDirectory(assetBundleDirectory);<br>        &#125;<br>        BuildPipeline.BuildAssetBundles(assetBundleDirectory,BuildAssetBundleOptions.None,BuildTarget.StandaloneWindows64);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="AssetBundle的加载"><a href="#AssetBundle的加载" class="headerlink" title="AssetBundle的加载"></a>AssetBundle的加载</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BundleTest</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        StartCoroutine(LoadCharacter(<span class="hljs-string">&quot;Test&quot;</span>));<br>    &#125;<br><br> <span class="hljs-function">IEnumerator <span class="hljs-title">LoadCharacter</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> assetBundleName</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> uri = <span class="hljs-string">&quot;file:///Assets/AssetBundles/Test&quot;</span>+assetBundleName.ToLower()+<span class="hljs-string">&quot;.asset&quot;</span>;<br>        UnityWebRequest request = UnityWebRequestAssetBundle.GetAssetBundle(uri);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request.SendWebRequest();<br>        AssetBundle bundle = DownloadHandlerAssetBundle.GetContent(request);<br>        GameObject gameObject=bundle.LoadAsset&lt;GameObject&gt;(assetBundleName);<br>        Instantiate(gameObject); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AB加载方式：</p><ol><li><p>AssetBundle.LoadFromFile 从本地加载</p></li><li><p>AssetBundle.LoadFromMemory 从内存加载</p></li><li><p><a href="WWW.LoadFromCacheOrDownload">WWW.LoadFromCacheOrDownload</a> 下载后放在缓存中备用(该方法逐渐被弃用)</p></li><li><p>UnityWebRequest 从服务器下载</p></li></ol><p>从AB中加载资源：</p><ol><li><p>AssetBundle.LoadAsset(assetName)</p></li><li><p>AssetBundle.LoadAllAssets() 加载AB包中所有的对象，不包含依赖的包</p></li><li><p>AssetBundle.LoadAssetAsync() 异步加载，加载较大资源的时候</p></li><li><p>AssetBundle.LoadAllAssetsAsync() 异步加载全部资源</p></li><li><p>AssetBundle.LoadAssetWithSubAssets 加载资源及其子资源</p></li></ol><p>AB的卸载</p><ol><li>减少内存的使用</li><li>有可能导致丢失</li><li>在切换场景，或者确定不使用的时候卸载<br>AssetBundle.Unload(true) &#x2F;&#x2F;卸载AB文件的内存镜像，且包含所有Load创建出来的对象<br>AssetBundle.Unload(false) &#x2F;&#x2F;卸载AB文件的内存镜像，但是除了Load创建出来的对象<br>Reources.UnloadAsset(Object) &#x2F;&#x2F;释放已加载的资源Object<br>Resources.UnloadUnusedAssets &#x2F;&#x2F;卸载所有没有被场景引用的资源对象</li></ol><h4 id="AssetBundle的进阶"><a href="#AssetBundle的进阶" class="headerlink" title="AssetBundle的进阶"></a>AssetBundle的进阶</h4><h5 id="AssetBundle依赖关系"><a href="#AssetBundle依赖关系" class="headerlink" title="AssetBundle依赖关系"></a>AssetBundle依赖关系</h5><p>1.打包依赖</p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/20211224233504.png"></p><p><strong>原本只需要3M的内存，而打包后会发生冗余。</strong></p><p><strong>优化，将共享的资源单独打包一个Bundle</strong></p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211224234059208.png" alt="image-20211224234059208"></p><p>同时也要记得在加载Bundle的时候加上加载材质Bundle的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BundleTest</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        StartCoroutine(LoadCharacter(<span class="hljs-string">&quot;Test&quot;</span>));<br>    &#125;<br><br> <span class="hljs-function">IEnumerator <span class="hljs-title">LoadCharacter</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> assetBundleName</span>)</span><br>    &#123;<br>    <span class="hljs-comment">//Bundle 1</span><br>        <span class="hljs-built_in">string</span> uri = <span class="hljs-string">&quot;file:///Assets/AssetBundles/Test&quot;</span>+assetBundleName.ToLower()+<span class="hljs-string">&quot;.asset&quot;</span>;<br>        UnityWebRequest request = UnityWebRequestAssetBundle.GetAssetBundle(uri);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request.SendWebRequest();<br>        AssetBundle bundle = DownloadHandlerAssetBundle.GetContent(request);<br>        <br>        <span class="hljs-comment">//Bundle 2</span><br>        <span class="hljs-built_in">string</span> uri2 = <span class="hljs-string">&quot;file:///Assets/AssetBundles/Test/Test.mat.asset&quot;</span>;<br>        UnityWebRequest request2 = UnityWebRequestAssetBundle.GetAssetBundle(uri2);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request2.SendWebRequest();<br>        AssetBundle bundle2 = DownloadHandlerAssetBundle.GetContent(request2);<br>        <br>        GameObject gameObject=bundle.LoadAsset&lt;GameObject&gt;(assetBundleName);<br>        Instantiate(gameObject); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.加载依赖</p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211225104534276.png" alt="image-20211225104534276"></p><p>这种方式加载，会出现一个问题就是，加载一个model时要加载Bundle里所有的M 加载一个纹理也要加载包里所有的material 贴图也是，出现了资源冗余，那我们就需要一个好的分配</p><h5 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h5><p><strong>1.按类型分组</strong></p><ul><li>强类型关联，将相同的资源打包在一个Bundle</li><li>平台相关，将不同平台下的资源分别打包</li><li>本地化相关</li><li>无交叉依赖 不会对另外一个Bundle产生依赖</li><li>所有声音资源打成一个包，所有shader打成一个包，所有模型打成一个包，所有材质打成一个包</li></ul><p><strong>2.按并发分组</strong></p><ul><li>加载时机一致，在很短的时间内同时发生的资源都打包到一个Bundle</li><li>无交叉依赖</li></ul><p><strong>3.按逻辑单元分组</strong></p><ul><li>逻辑功能 如UI资源 相对独立</li><li>逻辑对象 一个角色或者所有角色一个包</li><li>共享对象 所有的场景所共享的部分一个包</li></ul><h4 id="ABManager-核心代码"><a href="#ABManager-核心代码" class="headerlink" title="ABManager 核心代码"></a><strong>ABManager</strong> 核心代码</h4><p>这是一个在Unity中加载AssetBundles的ABManager类的代码。</p><p>该类具有几种用于加载资源的方法，每种方法有3种重载。</p><p>PathUrl属性指定AB文件的位置，设置为应用程序的StreamingAssetsPath。</p><p>MainABName属性指定主AB文件的名称，这是依赖于平台的。</p><p>LoadAB方法加载AB文件并将其存储在字典中供以后使用。</p><p>LoadRes方法从AB文件加载资源并返回它们。如果加载的资源是GameObject，则在返回之前会先实例化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ABManager</span> : <span class="hljs-title">SingletonAutoMono</span>&lt;<span class="hljs-title">ABManager</span>&gt;<br>&#123;<br><br>    <span class="hljs-comment">//存储所有加载过的AB包的容器</span><br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, AssetBundle&gt; abDic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, AssetBundle&gt;();<br>    <span class="hljs-comment">//主包，只会加载一次</span><br>    <span class="hljs-keyword">private</span> AssetBundle mainAB = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//获取依赖包的配置文件</span><br>    <span class="hljs-keyword">private</span> AssetBundleManifest manifest = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//ab包存放的路径，方便修改</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> PathUrl<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> Application.streamingAssetsPath + <span class="hljs-string">&quot;/&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//主包名，根据平台不同而不同</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> MainABName<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_IOS</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IOS&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> UNITY_ANDROID</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Android&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> </span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PC&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 加载资源，同步加载，3种方法重载</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;resName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">LoadRes</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName</span>)</span><br>    &#123;<br>        LoadAB(abName);<br><br>        Object obj = abDic[abName].LoadAsset(resName);<br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接返回创建好的游戏物体</span><br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> GameObject)<br>            <span class="hljs-keyword">return</span> Object.Instantiate(obj);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">LoadRes</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Type type</span>)</span><br>    &#123;<br>        LoadAB(abName);<br><br>        Object obj = abDic[abName].LoadAsset(resName, type);<br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接返回创建好的游戏物体</span><br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> GameObject)<br>            <span class="hljs-keyword">return</span> Object.Instantiate(obj);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">LoadRes</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName</span>) <span class="hljs-keyword">where</span> T : Object</span><br>    &#123;<br>        LoadAB(abName);<br><br>        T t = abDic[abName].LoadAsset&lt;T&gt;(resName);<br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接返回创建好的游戏物体</span><br>        <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">is</span> GameObject)<br>            <span class="hljs-keyword">return</span> Object.Instantiate(t);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 加载资源，异步加载，3种方法重载</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;resName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Action&lt;Object&gt; callBack</span>)</span><br>    &#123;<br>        StartCoroutine(ReallyLoadResAsync(abName, resName, callBack));<br>    &#125;<br>    <br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span>  加载资源，异步加载，3种方法重载</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;resName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;callBack&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">ReallyLoadResAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Action&lt;Object&gt; callBack</span>)</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-title">StartCoroutine</span>(<span class="hljs-params">LoadABAsync(abName</span>))</span>;<br><br>        AssetBundleRequest abr = abDic[abName].LoadAssetAsync(resName);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> abr;<br><br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接创建好游戏物体</span><br>        <span class="hljs-keyword">if</span> (abr.asset <span class="hljs-keyword">is</span> GameObject)<br>            callBack(Instantiate(abr.asset));<br>        <span class="hljs-keyword">else</span><br>            callBack(abr.asset);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Type type, System.Action&lt;Object&gt; callBack</span>)</span><br>    &#123;<br>        StartCoroutine(ReallyLoadResAsync(abName, resName, type, callBack));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">ReallyLoadResAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Type type, System.Action&lt;Object&gt; callBack</span>)</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-title">StartCoroutine</span>(<span class="hljs-params">LoadABAsync(abName</span>))</span>;<br><br>        AssetBundleRequest abr = abDic[abName].LoadAssetAsync(resName, type);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> abr;<br><br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接创建好游戏物体</span><br>        <span class="hljs-keyword">if</span> (abr.asset <span class="hljs-keyword">is</span> GameObject)<br>            callBack(Instantiate(abr.asset));<br>        <span class="hljs-keyword">else</span><br>            callBack(abr.asset);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Action&lt;T&gt; callBack</span>) <span class="hljs-keyword">where</span> T : Object</span><br>    &#123;<br>        StartCoroutine(ReallyLoadResAsync&lt;T&gt;(abName, resName, callBack));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">ReallyLoadResAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> abName, <span class="hljs-built_in">string</span> resName, System.Action&lt;T&gt; callBack</span>) <span class="hljs-keyword">where</span> T : Object</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-title">StartCoroutine</span>(<span class="hljs-params">LoadABAsync(abName</span>))</span>;<br><br>        AssetBundleRequest abr = abDic[abName].LoadAssetAsync&lt;T&gt;(resName);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> abr;<br><br>        <span class="hljs-comment">//如果是GameObject，加载后基本都是创建游戏物体，所以这里判断一下如果是GameObject，直接创建好游戏物体</span><br>        <span class="hljs-keyword">if</span> (abr.asset <span class="hljs-keyword">is</span> GameObject)<br>            callBack(Instantiate(abr.asset) <span class="hljs-keyword">as</span> T);<br>        <span class="hljs-keyword">else</span><br>            callBack(abr.asset <span class="hljs-keyword">as</span> T);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 同步加载依赖包和资源包</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadAB</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//先加载依赖包，再加载AB包，最后加载文件</span><br>        <span class="hljs-keyword">if</span> (mainAB == <span class="hljs-literal">null</span>)<br>        &#123;<br>            mainAB = AssetBundle.LoadFromFile(PathUrl + MainABName);<br>            manifest = mainAB.LoadAsset&lt;AssetBundleManifest&gt;(<span class="hljs-string">&quot;AssetBundleManifest&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">string</span>[] strs = manifest.GetAllDependencies(abName);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; strs.Length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!abDic.ContainsKey(strs[i]))<br>                abDic.Add(strs[i], AssetBundle.LoadFromFile(PathUrl + strs[i]));<br>        &#125;<br><br>        <span class="hljs-comment">//没有包加载包，有包直接取出来使用</span><br>        <span class="hljs-keyword">if</span> (!abDic.ContainsKey(abName))<br>            abDic.Add(abName, AssetBundle.LoadFromFile(PathUrl + abName));<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 异步加载依赖包和资源包</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">LoadABAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//先加载依赖包，再加载AB包，最后加载文件</span><br>        <span class="hljs-keyword">if</span> (mainAB == <span class="hljs-literal">null</span>)<br>        &#123;<br>            AssetBundleCreateRequest createRequest = AssetBundle.LoadFromFileAsync(PathUrl + MainABName);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> createRequest;<br>            mainAB = createRequest.assetBundle;<br><br>            AssetBundleRequest request = mainAB.LoadAssetAsync&lt;AssetBundleManifest&gt;(<span class="hljs-string">&quot;AssetBundleManifest&quot;</span>);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> request;<br>            manifest = request.asset <span class="hljs-keyword">as</span> AssetBundleManifest;<br>        &#125;<br><br>        <span class="hljs-built_in">string</span>[] strs = manifest.GetAllDependencies(abName);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; strs.Length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!abDic.ContainsKey(strs[i]))<br>            &#123;<br>                AssetBundleCreateRequest createRequest = AssetBundle.LoadFromFileAsync(PathUrl + strs[i]);<br>                <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> createRequest;<br>                abDic.Add(strs[i], createRequest.assetBundle);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//没有包加载包，有包直接取出来使用</span><br>        <span class="hljs-keyword">if</span> (!abDic.ContainsKey(abName))<br>            abDic.Add(abName, AssetBundle.LoadFromFile(PathUrl + abName));<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 卸载单个包</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;abName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UnLoad</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> abName</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (abDic.ContainsKey(abName))<br>        &#123;<br>            abDic[abName].Unload(<span class="hljs-literal">false</span>);<br>            abDic.Remove(abName);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 卸载所有包</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClearAssetBundles</span>()</span><br>    &#123;<br>        AssetBundle.UnloadAllAssetBundles(<span class="hljs-literal">false</span>);<br>        abDic.Clear();<br>        mainAB = <span class="hljs-literal">null</span>;<br>        manifest = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AB包导出的编辑器拓展代码</p><p>导出AB包</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExportAB</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;AB包导出/Windows&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ForWindows</span>()</span><br>    &#123;<br>        Export(BuildTarget.StandaloneWindows);<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;AB包导出/Mac&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ForMac</span>()</span><br>    &#123;<br>        Export(BuildTarget.StandaloneOSX);<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;AB包导出/iOS&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ForiOS</span>()</span><br>    &#123;<br>        Export(BuildTarget.iOS);<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;AB包导出/Android&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ForAndroid</span>()</span><br>    &#123;<br>        Export(BuildTarget.Android);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Export</span>(<span class="hljs-params">BuildTarget platform</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//项目的Assets目录的路径</span><br>        <span class="hljs-comment">//老师电脑，D:/HonorZhao/Month3/Week3/Day2/Code/Assets</span><br>        <span class="hljs-built_in">string</span> path = Application.dataPath;<br>        <span class="hljs-comment">//保留，D:/HonorZhao/Month3/Week3/Day2/Code/</span><br>        <span class="hljs-comment">//最终路径，D:/HonorZhao/Month3/Week3/Day2/Code/ab</span><br>        path = path.Substring(<span class="hljs-number">0</span>, path.Length - <span class="hljs-number">6</span>) + <span class="hljs-string">&quot;ab&quot;</span>;<br><br>        <span class="hljs-comment">//防止路径不存在</span><br>        <span class="hljs-keyword">if</span>(!Directory.Exists(path))<br>        &#123;<br>            Directory.CreateDirectory(path);<br>        &#125;<br><br>        <span class="hljs-comment">//导出ab包的核心代码，生成ab包文件</span><br>        <span class="hljs-comment">//参数1：ab包文件存储路径</span><br>        <span class="hljs-comment">//参数2：导出选项</span><br>        <span class="hljs-comment">//参数3：平台（不同平台的ab包是不一样的）</span><br>        BuildPipeline.BuildAssetBundles(<br>            path,<br>            BuildAssetBundleOptions.ChunkBasedCompression | BuildAssetBundleOptions.ForceRebuildAssetBundle,<br>            platform<br>        );<br><br>        Debug.Log(<span class="hljs-string">&quot;导出ab包成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//顶部菜单类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Menu</span><br>&#123;<br>    <span class="hljs-comment">//在顶部显示&quot;工具&quot;菜单，下方有&quot;导出AB资源包&quot;，点击执行函数</span><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;工具/导出AB资源包&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildAB</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//Debug.Log(&quot;导出AB资源包&quot;);</span><br>        Debug.Log(Application.persistentDataPath);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs C#">[<span class="hljs-meta">CustomEditor(typeof(Player))</span>]<span class="hljs-comment">//步骤3：将编辑器开发脚本与需要编辑的组件脚本建立外挂关联关系</span><br><span class="hljs-comment">//外挂脚本因为存储在Editor目录下，所以不会被打入最终的游戏包</span><br><span class="hljs-comment">//不继承自Mono，而是继承自Editor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerEditor</span> : <span class="hljs-title">Editor</span> <span class="hljs-comment">//步骤2：继承Editor类，使用编辑器相关的成员变量和生命周期函数</span><br>&#123;<br>    <span class="hljs-comment">//获得到需要编辑显示的组件</span><br>    <span class="hljs-keyword">private</span> Player _Component;<br><br>    <span class="hljs-comment">//步骤4：需要在当前的外挂脚本中，获得需要被扩展的Player组件对象</span><br>    <span class="hljs-comment">//当关联组件所在对象被选中或组件被添加时，调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//Debug.Log(&quot;enable&quot;);</span><br>        <span class="hljs-comment">//步骤5：获取Player组件对象</span><br>        _Component = target <span class="hljs-keyword">as</span> Player;<br><br>    &#125;<br><br>    <span class="hljs-comment">//当关联组件所在对象被取消或组件被移除时，调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//Debug.Log(&quot;disable&quot;);</span><br><br>        _Component = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//用于绘制检视面板的生命周期函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//标题显示</span><br>        EditorGUILayout.LabelField(<span class="hljs-string">&quot;人物相关属性&quot;</span>);<br><br>        _Component.ID = EditorGUILayout.IntField(<span class="hljs-string">&quot;玩家ID&quot;</span>, _Component.ID);<br>        <span class="hljs-comment">//文本</span><br>        _Component.Name = EditorGUILayout.TextField(<span class="hljs-string">&quot;玩家名称&quot;</span>, _Component.Name);<br>        <span class="hljs-comment">//浮点数</span><br>        _Component.Atk = EditorGUILayout.FloatField(<span class="hljs-string">&quot;玩家攻击力&quot;</span>, _Component.Atk);<br>        <span class="hljs-comment">//布尔</span><br>        _Component.isMan = EditorGUILayout.Toggle(<span class="hljs-string">&quot;是否为男性&quot;</span>, _Component.isMan);<br>        <span class="hljs-comment">//向量</span><br>        _Component.HeadDir = EditorGUILayout.Vector3Field(<span class="hljs-string">&quot;头部方向&quot;</span>, _Component.HeadDir);<br>        <span class="hljs-comment">//颜色</span><br>        _Component.Hair = EditorGUILayout.ColorField(<span class="hljs-string">&quot;头发颜色&quot;</span>, _Component.Hair);<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span>/对象数据类型绘制<span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span>//</span><br>        <span class="hljs-comment">//参数1：标题</span><br>        <span class="hljs-comment">//参数2：原始组件的值</span><br>        <span class="hljs-comment">//参数3：成员变量的类型</span><br>        <span class="hljs-comment">//参数4：是否可以将场景中的对象拖给这个成员变量</span><br>        _Component.Weapon = EditorGUILayout.ObjectField(<span class="hljs-string">&quot;持有武器&quot;</span>, _Component.Weapon, <span class="hljs-keyword">typeof</span>(GameObject), <span class="hljs-literal">true</span>) <span class="hljs-keyword">as</span> GameObject;<br>        <span class="hljs-comment">//纹理</span><br>        _Component.Cloth = EditorGUILayout.ObjectField(<span class="hljs-string">&quot;衣服材质贴图&quot;</span>, _Component.Cloth, <span class="hljs-keyword">typeof</span>(Texture), <span class="hljs-literal">false</span>) <span class="hljs-keyword">as</span> Texture;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span>/枚举数据类型绘制<span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span>//</span><br>        <span class="hljs-comment">//整数转枚举</span><br>        <span class="hljs-comment">//int id = 0;</span><br>        <span class="hljs-comment">//PLAYER_PROFESSION p = (PLAYER_PROFESSION)id;</span><br><br>        <span class="hljs-comment">//单选枚举（标题, 组件上的原始值）</span><br>        _Component.Pro = (PlayerProfression)EditorGUILayout.EnumPopup(<span class="hljs-string">&quot;玩家职业&quot;</span>, _Component.Pro);<br><br>        <span class="hljs-comment">//多选枚举（标题, 组件上的原始值）</span><br>        _Component.LoveColor = (PlayerLoveColor)EditorGUILayout.EnumFlagsField(<span class="hljs-string">&quot;玩家喜欢的颜色&quot;</span>, _Component.LoveColor);<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span>/终极数据类型绘制<span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span>//</span><br>        <span class="hljs-comment">//更新可序列化数据</span><br>        serializedObject.Update();<br>        <span class="hljs-comment">//通过成员变量名找到组件上的成员变量</span><br>        SerializedProperty sp = serializedObject.FindProperty(<span class="hljs-string">&quot;Items&quot;</span>);<br>        <span class="hljs-comment">//可序列化数据绘制（取到的数据，标题，是否将所有获得的序列化数据显示出来）</span><br>        EditorGUILayout.PropertyField(sp, <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;道具信息&quot;</span>), <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//将修改的数据，写入到可序列化的原始数据中</span><br>        serializedObject.ApplyModifiedProperties();<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span>/滑动条绘制<span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span><span class="hljs-doctag">///</span>//</span><br>        <span class="hljs-comment">//滑动条显示（1.标题，2.原始变量，最小值，最大值）</span><br>        _Component.Atk = EditorGUILayout.Slider(<span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;玩家攻击力&quot;</span>), _Component.Atk, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-keyword">if</span> (_Component.Atk &gt; <span class="hljs-number">80</span>)<br>        &#123;<br>            <span class="hljs-comment">//显示消息框（红色）</span><br>            EditorGUILayout.HelpBox(<span class="hljs-string">&quot;攻击力太高了&quot;</span>, MessageType.Error);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (_Component.Atk &lt; <span class="hljs-number">20</span>)<br>        &#123;<br>            <span class="hljs-comment">//显示消息框（黄色）</span><br>            EditorGUILayout.HelpBox(<span class="hljs-string">&quot;攻击力太低了&quot;</span>, MessageType.Warning);<br>        &#125;<br><br>        <span class="hljs-comment">//按钮显示和元素排列</span><br>        <span class="hljs-comment">//（按钮是否被按下）显示按钮（按钮名称）</span><br>        GUILayout.Button(<span class="hljs-string">&quot;来个按钮&quot;</span>);<br>        GUILayout.Button(<span class="hljs-string">&quot;来个按钮&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;测试点击&quot;</span>))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;测试点击&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//开始横向排列绘制</span><br>        EditorGUILayout.BeginHorizontal();<br><br>        GUILayout.Button(<span class="hljs-string">&quot;再来个按钮&quot;</span>);<br>        GUILayout.Button(<span class="hljs-string">&quot;再来个按钮&quot;</span>);<br><br>        <span class="hljs-comment">//结束横向排列绘制</span><br>        EditorGUILayout.EndHorizontal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NodeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-keyword">static</span> NodeWindow window;<br><br>    <span class="hljs-keyword">static</span> GameObject nodeManager;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>(<span class="hljs-params">GameObject manager</span>)</span><br>    &#123;<br>        nodeManager = manager;<br>        <span class="hljs-comment">//真正开启了一个窗口</span><br>        window = EditorWindow.GetWindow&lt;NodeWindow&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//通过窗口的Update，每帧执行一次，当前被选中的对象为板子</span><br>        Selection.activeGameObject = nodeManager;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseWindow</span>()</span><br>    &#123;<br>        window.Close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//外挂式关联NodeManager</span><br>[<span class="hljs-meta">CustomEditor(typeof(NodeManager))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NodeManagerEditor</span> : <span class="hljs-title">Editor</span><br>&#123;<br><br>    NodeManager manager;<br><br>    <span class="hljs-built_in">bool</span> isEditor = <span class="hljs-literal">false</span>;<span class="hljs-comment">//是否是编辑的状态</span><br><br>    <span class="hljs-comment">//当选中带有NodeManager组件对象的时候，获得组件</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        manager = (NodeManager)target;<br>    &#125;<br><br>    <span class="hljs-comment">//绘制组件的生命周期函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//通过终极的数据获取方法，显示列表中的数据</span><br>        serializedObject.Update();<br>        SerializedProperty nodes = serializedObject.FindProperty(<span class="hljs-string">&quot;nodes&quot;</span>);<br>        EditorGUILayout.PropertyField(nodes, <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;路径&quot;</span>), <span class="hljs-literal">true</span>);<br>        serializedObject.ApplyModifiedProperties();<br><br>        <span class="hljs-comment">//开始编辑的开关</span><br>        <span class="hljs-keyword">if</span> (!isEditor &amp;&amp; GUILayout.Button(<span class="hljs-string">&quot;开始编辑&quot;</span>))<br>        &#123;<br>            NodeWindow.OpenWindow(manager.gameObject);<span class="hljs-comment">//调用打开界面的方法</span><br>            isEditor = <span class="hljs-literal">true</span>;<span class="hljs-comment">//改变状态变成编辑模式</span><br>        &#125;<br>        <span class="hljs-comment">//结束编辑的开关</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isEditor &amp;&amp; GUILayout.Button(<span class="hljs-string">&quot;结束编辑&quot;</span>))<br>        &#123;<br>            NodeWindow.CloseWindow();<span class="hljs-comment">//调用关闭界面的方法</span><br>            isEditor = <span class="hljs-literal">false</span>;<span class="hljs-comment">//改变状态变成非编辑模式</span><br>        &#125;<br><br>        <span class="hljs-comment">//删除按钮</span><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;删除最后一个节点&quot;</span>))<br>        &#123;<br>            RemoveAtLast();<br>        &#125;<br>        <span class="hljs-comment">//删除所有按钮</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;删除所有节点&quot;</span>))<br>        &#123;<br>            RemoveAll();<br>        &#125;<br>    &#125;<br><br>    RaycastHit hit;<br>   <br>    <span class="hljs-comment">//有点类似前期Update函数，发送射线</span><br>    <span class="hljs-comment">//当选中关联的脚本挂载的物体</span><br>    <span class="hljs-comment">//当鼠标在Scene视图下发生变化时，执行该方法，比如鼠标移动，比如鼠标的点击</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnSceneGUI</span>()</span><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (!isEditor)<span class="hljs-comment">//非编辑状态下不能生成路点</span><br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//当鼠标按下左键时发射一条射线 </span><br>        <span class="hljs-comment">//非运行时，使用Event类</span><br>        <span class="hljs-comment">//Event.current.button 判断鼠标是哪个按键的（0是鼠标左键）</span><br>        <span class="hljs-comment">//Event.current.type 判断鼠标的事件方式的（鼠标按下）</span><br>        <span class="hljs-keyword">if</span> (Event.current.button == <span class="hljs-number">0</span> &amp;&amp; Event.current.type == EventType.MouseDown)<br>        &#123;<br>            <span class="hljs-comment">//从鼠标的位置需要发射射线了</span><br>            <span class="hljs-comment">//因为是从Scene视图下发射射线，跟场景中的摄像机并没有关系，所以不能使用相机发射射线的方法</span><br>            <span class="hljs-comment">//从编辑器GUI中的一个点向世界定义一条射线, 参数一般都是鼠标的坐标</span><br>            Ray ray = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);<br>            <span class="hljs-keyword">if</span> (Physics.Raycast(ray, <span class="hljs-keyword">out</span> hit, <span class="hljs-number">100</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>))<br>            &#123;<br>                <span class="hljs-comment">//需要在检测到的点实例化，路点</span><br>                InstancePathNode(hit.point + Vector3.up * <span class="hljs-number">0.1f</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成节点</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;position&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InstancePathNode</span>(<span class="hljs-params">Vector3 position</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//点预制体</span><br>        GameObject prefab = Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;PathNode&quot;</span>);<br>        <span class="hljs-comment">//点对象，生成到Plane的子物体下</span><br>        GameObject pathNode= Instantiate&lt;GameObject&gt;(prefab, position, Quaternion.identity, manager.transform);<br>        <span class="hljs-comment">//把生成的路点添加到列表里</span><br>        manager.nodes.Add(pathNode);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 删除最后一个节点</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RemoveAtLast</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//保证有节点才能删节点</span><br>        <span class="hljs-keyword">if</span> (manager.nodes.Count &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">//从场景中删除游戏物体</span><br>            DestroyImmediate(manager.nodes[manager.nodes.Count - <span class="hljs-number">1</span>]);<br>            <span class="hljs-comment">//把该节点从列表中移除</span><br>            manager.nodes.RemoveAt(manager.nodes.Count - <span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 删除所有的节点</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RemoveAll</span>()</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span>遍历删除所有的节点物体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; manager.nodes.Count; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (manager.nodes[i] != <span class="hljs-literal">null</span>)<br>            &#123;<br>                DestroyImmediate(manager.nodes[i]);<br>            &#125;<br>        &#125;<br><br>        manager.nodes.Clear();<span class="hljs-comment">//清空列表</span><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a><strong>其他建议</strong></h4><ul><li>对频繁更新的对象进行拆分</li><li>同时加载的对象打包到一起</li><li>拆分加载时机不一致的Bundle</li><li>合并频繁加载的小粒度Bundle</li></ul><h4 id="Manifest文件"><a href="#Manifest文件" class="headerlink" title="Manifest文件"></a>Manifest文件</h4><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211225112845781.png" alt="image-20211225112845781"></p><p>crc为校验码，通过其检查是否完整</p><p>Assets 表示包里包含多少资源</p><p>Dependencies 表示包有哪些依赖</p><p>注意：在加载这些包之前，也需要加载依赖的包，不然会丢失这部分内容，显示效果不正确</p><h4 id="通过Manifest文件得到某个包的依赖"><a href="#通过Manifest文件得到某个包的依赖" class="headerlink" title="通过Manifest文件得到某个包的依赖"></a>通过Manifest文件得到某个包的依赖</h4><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211225112924258.png" alt="image-20211225112924258"></p><p>可以注意到scene&#x2F;cube.jy依赖于material.jy，而material.jy依赖于texture.jy</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#">AssetBundle manifestAB = AssetBundle.LoadFromFile(<span class="hljs-string">&quot;AssetBundles/AssetBundles&quot;</span>);<br>AssetBundleManifest manifest = manifestAB.LoadAsset&lt;AssetBundleManifest&gt;(<span class="hljs-string">&quot;AssetBundleManifest&quot;</span>);<br><span class="hljs-comment">//GetAllDependencies获取到所有的依赖对象</span><br><span class="hljs-built_in">string</span>[] strs = manifest.GetAllDependencies(<span class="hljs-string">&quot;scene/cube.jy&quot;</span>);<br><span class="hljs-comment">//将所有依赖对象依次加载出来</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> strs)<br>&#123;<br>    Debug.Log(item);  <br>    AssetBundle.LoadFromFile(<span class="hljs-string">&quot;AssetBundles/&quot;</span> + item);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>CRC、MD5、SHA1都是通过对数据进行计算，来生成一个校验值，该校验值用来校验数据的完整性。</p><p>CRC一般用于通信数据的校验，MD5和SHA1用于安全领域，例如文件校验，密码加密等</p><h4 id="AssetBundles浏览工具"><a href="#AssetBundles浏览工具" class="headerlink" title="AssetBundles浏览工具"></a>AssetBundles浏览工具</h4><p><a href="https://github.com/Unity-Technologies/AssetBundles-Browser">工具地址</a></p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211225113245114.png" alt="image-20211225113245114"></p><p><img src="/%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/image-20211225113256705.png" alt="image-20211225113256705"></p><p>Build Target 用于设置AB包的目标平台</p><p>OutPut Path 设置AB的输出路径</p><p>Build 一键打包</p>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
      <tag>AssetBundle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏安全</title>
    <link href="/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
    <url>/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="游戏安全"><a href="#游戏安全" class="headerlink" title="游戏安全"></a>游戏安全</h1><h3 id="常见威胁"><a href="#常见威胁" class="headerlink" title="常见威胁"></a>常见威胁</h3><p>1.<strong>外挂</strong></p><ul><li>加速挂 单机加速，修改本地计算机的时钟周期 网络加速 加快发包速度</li><li>协议挂 破解通讯协议 模拟游戏行为 功能丰富，支持脱机</li><li>内存挂 基于Hook（拦截系统对API的调用行为）和注入技术 功能强大</li><li>脚本辅助 键盘鼠标模拟 不易检测</li></ul><p>2.破解</p><p>3.数据篡改</p><ul><li>内存数据</li><li>存档数据</li><li>通讯数据</li></ul><h3 id="游戏安全的基础应对"><a href="#游戏安全的基础应对" class="headerlink" title="游戏安全的基础应对"></a>游戏安全的基础应对</h3><p><strong>通用方案</strong></p><ul><li><p>进程检测：获取电脑后台进程，对常见外挂的进程创建黑名单</p></li><li><p>窗口检测：因为很多外挂都有窗口的特性，对外挂窗口进行关闭</p></li><li><p>HOOK检测：自己创建一个Hook，通过对方攻击的手段，修复</p><p><strong>加密 混淆 加壳</strong></p></li></ul><p>对数据进行保护 内存及存档</p><p><strong>内存分析工具 WireShark</strong></p><p><strong>Cheat Engine</strong></p><img src="/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/image-20211224211902025.png" class="" title="image-20211224211902025"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SateTest</span> ：<span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-built_in">int</span> magic = <span class="hljs-number">0x1110004</span>;<br>    <br>    <span class="hljs-keyword">public</span> Text hpText;<br>    <span class="hljs-keyword">public</span> Text mpText;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> HP<br>    &#123;<br>        <span class="hljs-keyword">get</span>&#123; <span class="hljs-keyword">return</span> hp; &#125;<br>        <span class="hljs-keyword">set</span>&#123; hp = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> mp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> MP<br>    &#123;<br>        <span class="hljs-keyword">get</span>&#123; <span class="hljs-keyword">return</span> mp; &#125;<br>        <span class="hljs-keyword">set</span>&#123; mp = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>()</span><br>    &#123;<br>    <span class="hljs-keyword">this</span>.HP += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.MP += <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>    <span class="hljs-keyword">this</span>.hpText.text = HP.ToString(); <br>        <span class="hljs-keyword">this</span>.mpText.text = ((<span class="hljs-built_in">int</span>)MP).ToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 开启<strong>Cheat Engine</strong>选择Unity的进程</p><img src="/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/image-20211224212605532.png" class="" title="image-20211224212605532"><p>重复Add操作和数值扫描操作</p><p>随后选中一个地址将地址加入到地址列表，然后修改数值 如30改成300</p><img src="/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/image-20211224212937708.png" class="" title="image-20211224212937708"><p>可以看见对进程内存进行修改后 Unity的值也同样修改了。</p><p>实现了对内存值的修改。</p><p>所以我们应该对进程进行加密，让别人找不到这些地址</p><p><strong>位运算异或</strong></p><p>修改的代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SateTest</span> ：MonoBehaviour<br>&#123;<br>    <span class="hljs-type">int</span> magic = <span class="hljs-number">0x1110004</span>;<br>    <br>    <span class="hljs-keyword">public</span> Text hpText;<br>    <span class="hljs-keyword">public</span> Text mpText;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> HP<br>    &#123;<br>        get&#123; <span class="hljs-keyword">return</span> hp ^ magic ; &#125;<br>        set&#123; hp = value ^ magic ; &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Long mp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> MP;<br>    &#123;<br>        get&#123; <span class="hljs-keyword">return</span> (<span class="hljs-type">float</span>)System.BitConverter.<span class="hljs-built_in">Int64BitsToDouble</span>(mp ^ magic); &#125;<br>        set&#123; mp = System.BitConverter. <span class="hljs-built_in">Int64BitsToDouble</span>(value)^ magic; &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-keyword">this</span>.HP += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.MP += <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Update</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-keyword">this</span>.hpText.text = HP.<span class="hljs-built_in">ToString</span>(); <br>        <span class="hljs-keyword">this</span>.mpText.text = ((<span class="hljs-type">int</span>)MP).<span class="hljs-built_in">ToString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个简单的位运算操作。就会让别人找不到你的数值地址</p><img src="/2021/12/24/Engine/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/image-20211224214207625.png" class="" title="image-20211224214207625"><p>对于常规的数值修改很有效</p>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程和线程安全</title>
    <link href="/2021/12/23/CSharp/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <url>/2021/12/23/CSharp/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程和线程安全"><a href="#多线程和线程安全" class="headerlink" title="多线程和线程安全"></a>多线程和线程安全</h1><p><strong>多线程解决什么问题：多任务，提升计算性能</strong></p><h5 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h5><ul><li>单线程单任务 (Task1 &#x3D;&gt; Task2 &#x3D;&gt; Task3)</li><li>单线程多任务 (Task1 &#x3D;&gt; Task2 &#x3D;&gt; Task3 &#x3D;&gt; Task1 &#x3D;&gt; Task2 &#x3D;&gt; Task3 &#x3D;&gt; Task1 &#x3D;&gt; Task2 &#x3D;&gt; Task3)</li><li>多线程单任务 (任务Task 开启多线程 Task1-1 Task1-2 Task1-3 Task1-4)</li><li>多任务多线程 （Task1-1 Task1-2 Task1-3 Task1-4)(Task2-1 Task2-2)(Task3)(Task4)</li></ul><p><strong>线程的数量最好是CPU核的倍数</strong></p><h5 id="如何安全的使用多线程"><a href="#如何安全的使用多线程" class="headerlink" title="如何安全的使用多线程"></a>如何安全的使用多线程</h5><p><strong>多线程的问题：线程安全和非线程安全</strong></p><p><strong>1、线程与数据&#x2F;资源</strong></p><p>因为每一个线程都会访问到数据，而数据不做手段保护，就有可能会出现数据混乱(因为数据是在多个线程中共享的)，而在Unity中把所有于逻辑相关的东西，强制必须都是在单线程内，其他线程不访问，在底层做了一层防范，保证所有的事情是在一个线程内发生，就不会出现这种情况。</p><p><strong>同步与锁</strong></p><p>用于同步的对象 当你考虑好你的线程方案后，会有各种锁选择</p><h6 id="1-lock"><a href="#1-lock" class="headerlink" title="1.lock"></a>1.<strong>lock</strong></h6><p>最暴力简单，使用起来没什么成本，但加锁后可能会有性能问题。使后进入的线程不会中断当前的线程，而是等待当前线程结束后再继续执行。</p><h6 id="2-Monitor（对象）"><a href="#2-Monitor（对象）" class="headerlink" title="2.Monitor（对象）"></a>2.<strong>Monitor（对象）</strong></h6><p>属于lock的底层 更加开放 lock是对Monitor的Enter和Exit的一个封装，因此Monitor类的Enter()和Exit()方法的组合使用可以用lock关键字替代。</p><p>Monitor类除了具有lock的功能外，还有以下功能：</p><p>TryEnter()解决长期死等的问题，如果一个并发经常发生，并且持续时间很长，使用TryEnter，可以有效防止死锁或者长时间 的等待。  </p><p>Wait()释放对象上的锁，以便允许其他线程锁定和访问该对象。在其他线程访问对象时，调用线程将等待。脉冲信号用于通知等待线程有关对象状态的更改。</p><p>Pulse(),PulseAll()向一个或多个等待线程发送信号。该信号通知等待线程锁定对象的状态已更改，并且锁的所有者准备释放该锁。等待线程被放置在对象的就绪队列中以便它可以最后接收对象锁。一旦线程拥有了锁，它就可以检查对象的新状态以查看是否达到所需状态。</p><p>注意：Pulse、PulseAll和Wait方法必须从同步的代码块内调用。</p><h6 id="3-Mutex-（互斥）"><a href="#3-Mutex-（互斥）" class="headerlink" title="3.Mutex （互斥）"></a>3.<strong>Mutex （互斥）</strong></h6><p>Mutex的突出特点是可以跨应用程序域边界对资源进行独占访问，即可以用于同步不同进程中的线程，这种功能是以牺牲更多的系统资源为代价的。  </p><p>互斥体Mutex和事件对象EventWaitHandler属于内核对象，利用内核对象进行线程同步，线程必须要在用户模式和内核模式间切换，所以一般效率很低，但利用互斥对象和事件对象这样的内核对象，可以在多个进程中的各个线程间进行同步。</p><p>互斥体Mutex类似于一个接力棒，拿到接力棒的线程才可以开始跑，当然接力棒一次只属于一个线程(Thread Affinity)，如果这个线程不释放接力棒(Mutex.ReleaseMutex)，那么其他所有需要接力棒运行的线程只能等着看热闹</p><h6 id="4、ReaderWriterLockSlim（多线程读单线程写）"><a href="#4、ReaderWriterLockSlim（多线程读单线程写）" class="headerlink" title="4、ReaderWriterLockSlim（多线程读单线程写）**"></a>4、ReaderWriterLockSlim（多线程读单线程写）**</h6><p>当线程A已经获取到ReaderWriterLockSlim实例的读锁（RedLock,UpgradeableReaLock）后，其它线程只能再获取到该ReaderWriterLockSlim实例的读锁，再申请获取写锁会被阻塞</p><p>当线程A已获取到ReaderWriterLockSlim实例的写锁后，其它线程再申请获取到该ReaderWriterLockSlim实例的写锁和读锁时会被阻塞，直到线程A释放写锁</p><p>注意事项</p><p>（1）线程A如果通过EnterReadLock获取到读锁（ReadLock）后，不能在持有读锁的情况下再申请获取写锁（WriteLock）</p><p>如果违反了这个规定就报如下错：<br>Write lock may not be acquired with read lock held. This pattern is prone to deadlocks. Please ensure that read locks are released before taking a write lock. If an upgrade is necessary, use an upgrade lock in place of the read lock.</p><p>（2）线程A如果通过EnterReadLock获取到读锁（ReadLock）后，不能在持有读锁的情况下再申请获取可升级读锁（UpgradeableReadLock）</p><p>如果违反了这个规定就报如下错：<br>Upgradeable lock may not be acquired with read lock held</p><p>（3）线程A如果通过EnterUpgradeableReadLock获取到可升级读锁（UpgradeableReadLockk）后，可以再持有可升级读锁的情况通过EnterWriteLock获取写锁</p><h6 id="5-Semaphore（信号量）"><a href="#5-Semaphore（信号量）" class="headerlink" title="5.Semaphore（信号量）"></a>5.<strong>Semaphore</strong>（信号量）</h6><p>可理解为允许线程执行信号的池子，池子中放入多少个信号就允许多少线程同时执行。</p><p>说明：</p><p>1、如果semaphore.Release(n)，n&gt;semaphore最大容纳信号量，将出异常。<br>2、当semaphore拥有的信号量为1时，Semaphore相当于Mutex<br>3、当semaphore拥有的信号量&gt;1时，信号量的数量即可供多个线程同时获取的个数，此时可认为获取到信号量的线程将同时执行（实际情况可能与CPU核心数、CPU同时支出线程数有关）</p><p>在调控线程的资源方面更加的灵活</p><h6 id="6、Interlocked（原子锁）"><a href="#6、Interlocked（原子锁）" class="headerlink" title="6、Interlocked（原子锁）"></a>6、Interlocked（原子锁）</h6><p>提供对变量快速操作的一种方式 从而实现线程的同步</p><img src="/2021/12/23/CSharp/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%8E%9F%E5%AD%90%E9%94%81.png" class=""><h5 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h5><p>对象 如：对列表加锁，列表所有的增删改都等待。</p><p>操作 如：只写读操作和写操作</p><p>变量 如：原子锁 锁定的级别越小 影响的范围越小</p><p><strong>只在必要时候加锁，加锁的力度越小越好</strong></p>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>粘包和拆包</title>
    <link href="/2021/12/23/CSharp/%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85/"/>
    <url>/2021/12/23/CSharp/%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="粘包和拆包-解决方法"><a href="#粘包和拆包-解决方法" class="headerlink" title="粘包和拆包 解决方法"></a>粘包和拆包 解决方法</h1><h2 id="拆包-粘包"><a href="#拆包-粘包" class="headerlink" title="拆包 粘包"></a>拆包 粘包</h2><p>当客户端向服务器连续发送两个数据包后，服务端接收数据可以分成三种情况</p><p>一、服务端正常的收到这两个数据包 没有发生粘包和拆包的情况</p><p>二、服务端只接收到一个数据包 ，而TCP是不会发生丢包的情况的，所以这一个数据包就包含了客户端发送的两个数据包 这就被称为粘包。</p><p>发送的时候，数据是有一个数据缓冲区的，比如数据缓冲区是200，我们一个包是100 就会把缓冲区填满，填满之后呢 我们数据缓冲区就会把这个包发送出去，这两个包呢就会被粘在一起，合并成了一个发送。相当于我们人发快递，发送两根笔，一根笔是一份快递钱，那么我们就会把两根笔合成一份快递发送。而缓冲区呢，当第一次没有填满，那么它就会等到填满了，一块往服务端发送，这样就出现粘包的问题。</p><p>三、服务端接收到了两个数据包，但是这两个数据包，会出现要么不完整，或者多出来一部分的情况，这种情况呢就是发生了拆包和粘包。</p><p>就相当于在数据缓冲区中，我们数据缓冲区是200，而我们一个包的长度呢是150 这时候进入缓冲区，而缓冲区没有被填满，就会等待填满，而缓冲区填满后就出现了另外一个数据包不全的情况 一个数据包多出了一部分 这就是发生了拆包和粘包</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>粘包、拆包发生原因 （常见几种）</p><ol><li><p>要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p></li><li><p>待发送数据大于最大报文长度，TCP在传输前将进行拆包。</p></li><li><p>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p></li><li><p>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p></li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>发送端给每一个数据包构造一个包头与包尾，包头内包含了数据包的长度，包尾才是真正的数据包 当接收端接收到数据包后，首先先读取数据包的前四个字节（int值只占四个字节）拿到数据包的长度后，再往后依次读取我们的数据包。</p><h2 id="构造包和解析包"><a href="#构造包和解析包" class="headerlink" title="构造包和解析包"></a>构造包和解析包</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">MyServer</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> /构造包 包头+包尾</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EncodeTool</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">EncodePacket</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] data</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>            &#123;<br>                <span class="hljs-keyword">using</span> (BinaryWriter bw=<span class="hljs-keyword">new</span> BinaryWriter(ms))<br>                &#123;<br>                    <span class="hljs-comment">//写入包头（数据的长度）</span><br>                    bw.Write(data.Length);<br>                    <span class="hljs-comment">//写入包尾（数据）</span><br>                    bw.Write(data);<br>                    <span class="hljs-built_in">byte</span>[] packet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[ms.Length];<br>                    Buffer.BlockCopy(ms.GetBuffer(), <span class="hljs-number">0</span>, packet, <span class="hljs-number">0</span>, (<span class="hljs-built_in">int</span>)ms.Length);<br>                    <span class="hljs-keyword">return</span> packet;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> /解析包，从缓冲区里取出一个完整的包</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cache&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">DecodePacket</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> List&lt;<span class="hljs-built_in">byte</span>&gt; cache</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//如果数据长度小于四个字节，说明没有包</span><br>            <span class="hljs-keyword">if</span> (cache.Count &lt; <span class="hljs-number">4</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">using</span> (MemoryStream ms=<span class="hljs-keyword">new</span> MemoryStream(cache.ToArray()))<br>            &#123;<br>                <span class="hljs-keyword">using</span>(BinaryReader br=<span class="hljs-keyword">new</span> BinaryReader(ms))<br>                &#123;<br>                    <span class="hljs-comment">//读取包的长度</span><br>                    <span class="hljs-built_in">int</span> length = br.ReadInt32();<br>                    <span class="hljs-comment">//当前的长度减去，读取字节后游标的长度，就是包的数据 </span><br>                    <span class="hljs-built_in">int</span> remainLength = (<span class="hljs-built_in">int</span>)(ms.Length - ms.Position);<br>                    <span class="hljs-keyword">if</span> (length &gt; remainLength)<br>                    &#123;<br>                        <span class="hljs-comment">//如果大于减去后的长度麻将构不能一个包</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">byte</span>[] data = br.ReadBytes(length);<br>                    <span class="hljs-comment">//更新缓冲数据</span><br>                    cache.Clear();<br>                    cache.AddRange(br.ReadBytes(remainLength));<br>                    <span class="hljs-keyword">return</span> data;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>CSharp</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSahrp Socket连接</title>
    <link href="/2021/12/23/CSharp/Socket%E8%BF%9E%E6%8E%A5/"/>
    <url>/2021/12/23/CSharp/Socket%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="C-实现Socket连接"><a href="#C-实现Socket连接" class="headerlink" title="C#实现Socket连接"></a>C#实现Socket连接</h1><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li><p>建立Socket</p><p>AddressFamily.InterNetwork内网，SocketType.Stream以流来通信，Tcp为协议</p></li><li><p>电脑主机和端口和ip地址进行绑定</p></li><li><p>监听客户端连接</p></li><li><p>阻塞方法  生成Socket 接受客户端连接</p></li><li><p>声明数组，存放聊天的缓冲区。</p></li><li><p>使用while方法 , 接收数据并存放在数组中 实现多次接消息</p></li><li><p>还原接收信息为明文</p></li><li><p>实现客服给客户发消息</p></li></ol><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net;<br><span class="hljs-keyword">using</span> System.Net.Sockets;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">SocketDemo</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//创建Socket 相当于是通信的主机</span><br>            <span class="hljs-comment">//监听打进来的电话，并转接给客服</span><br>            Socket serverSocket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br><br>            <span class="hljs-comment">//绑定ip和端口</span><br>            EndPoint iped = IPEndPoint.Parse(<span class="hljs-string">&quot;192.168.43.227:1234&quot;</span>);<br>            serverSocket.Bind(iped);<br><br>            <span class="hljs-comment">//监听有没有电话连接，顺便规划客服人数,如果是0就是无限个客服</span><br>            serverSocket.Listen(<span class="hljs-number">100</span>);<br><br>            <span class="hljs-comment">//接电话</span><br>            <span class="hljs-comment">//分配客服和客户进行一对一通信</span><br>            <span class="hljs-comment">//阻塞方法 没有电话打进来，那么代码就执行到这里 Accept</span><br>            Socket kefuScoket = serverSocket.Accept();<br>            System.Console.WriteLine(<span class="hljs-string">&quot;客户的本地端口是：&quot;</span> + kefuScoket.LocalEndPoint.ToString());<br>            System.Console.WriteLine(<span class="hljs-string">&quot;打电话进来的客户端是：&quot;</span> + kefuScoket.RemoteEndPoint.ToString());<br><br>            <span class="hljs-comment">//接消息，需要一个消息的缓冲区</span><br>            <span class="hljs-built_in">byte</span>[] readBuff = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-comment">//消息拿到，并存放在缓冲区，并记住消息的长度</span><br>                <span class="hljs-built_in">int</span> receiveCount = kefuScoket.Receive(readBuff);<br>                <span class="hljs-built_in">string</span> receiveMessage = Encoding.UTF8.GetString(readBuff, <span class="hljs-number">0</span>, receiveCount);<br>                System.Console.WriteLine(<span class="hljs-string">&quot;客户端发过来的消息：&quot;</span> + receiveMessage);<br><br>                <span class="hljs-comment">//string backMessage = &quot;我是你的专属客服，有什么可以帮助你的&quot;;</span><br>                kefuScoket.Send(Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;服务器已经接到你发来的消息：&quot;</span> + receiveMessage));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ol><li>建立Socket</li><li>Connect连接服务端</li><li>try catch语句 捕捉异常</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net;<br><span class="hljs-keyword">using</span> System.Net.Sockets;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">clientSocket</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br><br>            Socket clientSocket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br>            <span class="hljs-comment">//接收服务器的回馈</span><br>            <span class="hljs-built_in">byte</span>[] readBuff = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-comment">//连接服务器</span><br>            clientSocket.Connect(<span class="hljs-string">&quot;192.168.43.227&quot;</span>, <span class="hljs-number">1234</span>);<br><br>            <span class="hljs-comment">//连接上服务器，就能发消息</span><br>            <span class="hljs-built_in">string</span> sendMessage;<br><br>            <span class="hljs-comment">//计数器</span><br>            <span class="hljs-built_in">int</span> num = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)<br>                &#123;<br>                    sendMessage = <span class="hljs-string">&quot;你好，我是192用户&quot;</span>;<br>                    num++;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    sendMessage = Console.ReadLine();<br>                &#125;<br><br>                <span class="hljs-comment">//转码，转成0101010的格式</span><br>                <span class="hljs-built_in">byte</span>[] sendBytes = Encoding.UTF8.GetBytes(sendMessage);<br><br>                <span class="hljs-comment">//把二进制的消息发出去</span><br>                clientSocket.Send(sendBytes);<br>                <span class="hljs-built_in">int</span> count = clientSocket.Receive(readBuff);<br>                System.Console.WriteLine(<span class="hljs-string">&quot;服务器发送的消息是：&quot;</span> + Encoding.UTF8.GetString(readBuff, <span class="hljs-number">0</span>, count));<br><br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="C-Socket各种类"><a href="#C-Socket各种类" class="headerlink" title="C#Socket各种类"></a>C#Socket各种类</h4><p>一、IP地址操作类</p><p>1、IPAddress类</p><p>在该类中有一个Parse()方法，可以把点分的十进制转换成IPAddress类，方法1如下：IPAddress address&#x3D;IPAddress.Parse(“192.168.0.1”);</p><p>IPAddress 提供4个只读字段</p><ol><li>Any 用于代表本地系统可用的任何IP地址 常用来表示本机所有的IP地址 方便于对Socket服务进行监听，</li><li>Broadcase用于代表本地网络的IP广播地址 UDP的IP广播</li><li>Loopback用于代表系统的回送地址</li><li>None用于代表系统是没有网络接口</li></ol><p>2、IPEndPoint类</p><p>我们可以通过二种构造方法创建IPEndPoint类   就是一个IP地址端口的绑定 可以代表一个服务，用来Socket通讯</p><p>a、IPEndPoint(long address,int port)</p><p>b、IPEndPoint(IPAddress address,int port)</p><p>四种属性：Address  AddressFamily Port MaxPort  MinPort</p><p>二、DNS相关类</p><p>DNS类有四个静态方法，来获取主机DNS相关信息</p><ol><li>GetHostName（） 通过DNS.GetHostName()可以获得本地计算机的主机名</li><li>GetHostByName() 根据主机名称，返回一个IPHostEntry对象：IPHostEntry GetHostByName(string hostName) 其中IPHostEntry 把一个DNS主机名与一个别名和IP地址的数组相关联，包括三个属性：AddressList：一个IPAddress对象的数组   Aliases：一个字符串对象数组 HostName一个用于主机名的字符串对象</li><li>GetHostByAddress() 类似于GetHostByName(),只不过这里的参数是IP地址，而不是主机名，返回一个IPHostEntry对象。  IPHostEntry GetHostByAddress(IPAddress address)   IPHostEntry GetHostByAddress(string address)</li><li>Resolve()   当我们不知道输入的主机的地址是哪种格式时，用以上两种方法来实现，我们可能还要通过判断客户输入的格式，才能正确使用，但DNS类提供更简单的方法Resolve（），该方法可以接收或者是主机名格式或者是IP地址格式的任何一种地址，并返回IPHostEntry对象</li></ol>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>CSharp</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h1><h2 id="OSI-TCP-UDP"><a href="#OSI-TCP-UDP" class="headerlink" title="OSI TCP UDP"></a>OSI TCP UDP</h2><img src="/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" class=""><p>OSI七层协议除了最高层，下面每一层都给上面一层提供服务。</p><p>TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的既发送数据之前不需要建立连接</p><p>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，既不保证可靠交付。（QQ和微信通话就是UDP，因为不需要保证可靠的交付，服务器是TCP，因为要保证客户数据无差错的 不丢失的）</p><p>TCP面向 字节流，实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文</p><p>每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信</p><h2 id="IP-端口号"><a href="#IP-端口号" class="headerlink" title="IP 端口号"></a>IP 端口号</h2><p>主机是有一个IP地址的，主机与主机之间想要互相通信，联系的话，就需要通过IP地址，服务器要给客户端发送一个消息的话，服务器如果想要识别到客户端在我们主机上的哪一个位置的话，就需要用到端口号 端口号相当于人的姓名一样。</p><img src="/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%9F%8E%E5%9F%9F.png" class=""><p>应用层-套接字Socket</p><p>应用程序和网络之间的应用程序接口API，是在网络是建立网络应用程序的可编程接口</p><p>应用层-进程</p><img src="/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B.png" class=""><p>进程类似房子 套接字是进程的门 </p><p>进程通过套接字在网络上发送和接收报文</p><p>发送进程；把报文退出门（套接字）</p><p>传送报文；通过下面网络把报文传送到目的进程门口</p><p>接收进程：通过门（套接字）接收报文</p><img src="/2021/12/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%BF%87%E7%A8%8B.png" class=""><p>Socket编程</p><p>服务端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net;<br><span class="hljs-keyword">using</span> System.Net.Sockets;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">SocketServerTest</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-keyword">static</span> Socket serverSocket;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br><br>            <span class="hljs-comment">//绑定端口和ip 端口在0-65535之间</span><br>            serverSocket.Bind(<span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">6666</span>));<br>            serverSocket.Listen(<span class="hljs-number">10</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;服务器启动成功&quot;</span>);<br>            Thread thread = <span class="hljs-keyword">new</span> Thread(AcceptClient);<br>            <span class="hljs-comment">//启动</span><br>            thread.Start();<br><br>            Console.ReadKey();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AcceptClient</span>()</span><br>        &#123;<br>            Socket clientSocket = serverSocket.Accept();<br>            <span class="hljs-built_in">byte</span>[] data = Encoding.Default.GetBytes(<span class="hljs-string">&quot;服务器告诉你连接成功了&quot;</span>);<br>            clientSocket.Send(data);<br>            <span class="hljs-comment">//生成方法</span><br>            Thread thread = <span class="hljs-keyword">new</span> Thread(ReveiveMsg);<br>            thread.Start(clientSocket);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReveiveMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> clientSocket</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-built_in">int</span> length = (clientSocket <span class="hljs-keyword">as</span> Socket).Receive(data);<br>            Console.WriteLine(Encoding.Default.GetString(data, <span class="hljs-number">0</span>, length));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net;<br><span class="hljs-keyword">using</span> System.Net.Sockets;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">SocketClientTest</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Socket clientScoket;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            clientScoket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br>            clientScoket.Connect(<span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">6666</span>));<br>            Console.WriteLine(<span class="hljs-string">&quot;与服务器建立了连接&quot;</span>);<br>            clientScoket.Send(Encoding.Default.GetBytes(<span class="hljs-string">&quot;客户端发送的一条消息&quot;</span>));<br>            Thread thread = <span class="hljs-keyword">new</span> Thread(Receive);<br>            thread.Start();<br><br>            Console.ReadKey();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-built_in">int</span> length = clientScoket.Receive(data);<br>            Console.WriteLine(Encoding.Default.GetString(data, <span class="hljs-number">0</span>, length));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOI</title>
    <link href="/2021/12/23/Engine/AOI/"/>
    <url>/2021/12/23/Engine/AOI/</url>
    
    <content type="html"><![CDATA[<h2 id="AOI"><a href="#AOI" class="headerlink" title="AOI"></a>AOI</h2><h4 id="概念-广播的类型"><a href="#概念-广播的类型" class="headerlink" title="概念-广播的类型"></a>概念-广播的类型</h4><p>广播范围</p><ol><li>全服广播 特点：每一个玩家都能接收，频率不会太高，15帧左右</li><li>地图广播 特点：频率越高越好 ，玩家同步，地图同步类型 实时同步给身边的人</li><li>社交关系 特点：频率不会特别高，根据社交定</li><li>交互目标 特点：和别人进行的一对一的，点对点的，PVP的 频率低</li><li>玩家自身 特点：严格不能算广播，客户端与服务器的广播。大部分行为只需要自身知道的</li></ol><h5 id="地图消息同步"><a href="#地图消息同步" class="headerlink" title="地图消息同步"></a>地图消息同步</h5><p><img src="https://cdn.jsdelivr.net/gh/ShyHeart/Photo/photo/image-20211206092201838.png" alt="image-20211206092201838"></p><p>将上面比作一个地图，点比作玩家，每一个点动了，应该把他的行为同步给身边的玩家（100X100 1s同步10次 1s&#x3D;10000次消息处理 ~3.mb&#x2F;s&#x3D;24mb&#x2F;s ），频率过高，性能越差</p><p>而不是所有玩家范围都需要接受到你的的同步，只针对一个兴趣范围</p><ul><li>建立兴趣范围清单</li><li>只对兴趣兴趣范围内的目标广播</li><li>极大的降低消息处理压力和网络负载</li></ul><h5 id="AOI的设计-设计原则"><a href="#AOI的设计-设计原则" class="headerlink" title="AOI的设计-设计原则"></a>AOI的设计-设计原则</h5><ol><li>分析核心需求：减少压力消耗 降低带宽 提高负载</li><li>明确设计目标 对象 数据 算法</li><li>不为设计而设计 优化思想 忘记技术</li></ol><h5 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h5><ol><li>兴趣范围规划方案</li><li>对象与数据结构</li><li>高性能算法</li></ol><h5 id="场景分析与方案设计-一"><a href="#场景分析与方案设计-一" class="headerlink" title="场景分析与方案设计 (一)"></a>场景分析与方案设计 (一)</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="级别设定"><a href="#级别设定" class="headerlink" title="级别设定"></a>级别设定</h6><p><img src="https://cdn.jsdelivr.net/gh/ShyHeart/Photo/photo/image-20211206210243018.png" alt="image-20211206210243018"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEntityMove</span>(<span class="hljs-params">who</span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> entity <span class="hljs-keyword">in</span> entities)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (who==entity)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">bool</span> nowinAOI=who.Distance(entity)&lt;who.AOIRange;<br>        <span class="hljs-built_in">bool</span> alreadyInAOI=who.AOI.contains(entity);<br>        <span class="hljs-keyword">if</span> (alreadyInAOI&amp;&amp;!nowinAOI)<br>        &#123;<br>            who.OnLeaveAOI(entity);<br>            entity.OnLeaveAOI(who);<br>        &#125;  <br>        <span class="hljs-keyword">if</span> (!alreadyInAOI&amp;&amp;nowinAOI)<br>        &#123;<br>            who.onEnterAOI(entity);<br>            entity.onEnterAOI(who);<br>        &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优点</p><ul><li>不需要特殊的数据结构</li><li>易于实现</li></ul><p>缺点</p><ul><li>计算成本较高（1+n）*n&#x2F;2</li><li>1000人&#x3D;500500次</li></ul><p>改善方案</p><ul><li>多线程 并行计算，提升计算效率</li><li>延迟计算 减少计算间隔</li><li>分批计算 100&#x2F;Frame</li></ul><h5 id="场景分析与方案设计-二"><a href="#场景分析与方案设计-二" class="headerlink" title="场景分析与方案设计 (二)"></a>场景分析与方案设计 (二)</h5><p>区域划分</p><p><img src="https://cdn.jsdelivr.net/gh/ShyHeart/Photo/photo/image-20211206212501192.png" alt="image-20211206212501192"></p><p>将区域划分为一个一个格子 如8X8</p><p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEntityMove</span>(<span class="hljs-params">who</span>)</span>&#123;   <br><span class="hljs-built_in">int</span> new_x=(<span class="hljs-built_in">int</span>)(who.position.x/size);<br>    <span class="hljs-built_in">int</span> new_y=(<span class="hljs-built_in">int</span>)(who.position.y/size);<br>    <span class="hljs-keyword">if</span>(new_x!=who.grid_X||new_y!=who.grid_y)&#123;<br>        who.LeaveGrid(who.grid_x,who.grid_y);<br>        who.EnterGrid(new_x,new_y);<br>        <span class="hljs-keyword">this</span>.grid_x=new_x;<br>        <span class="hljs-keyword">this</span>.grid_y=new_y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点</p><ul><li>计算速度快</li></ul><p>缺点</p><ul><li>需要额外数据结构存储格子信息</li><li>需要额外的格子管理逻辑</li><li>实现复杂度高</li><li><strong>格子边界问题</strong></li></ul><h6 id="场景分析与方案设计-三"><a href="#场景分析与方案设计-三" class="headerlink" title="场景分析与方案设计 (三)"></a>场景分析与方案设计 (三)</h6><p>基于方案二做优化</p><p><img src="https://cdn.jsdelivr.net/gh/ShyHeart/Photo/photo/image-20211206213228669.png" alt="image-20211206213228669"></p><p>九宫格，一个格子一个格子广播</p><p>进一步的优化思考</p><p>算法优化</p><ul><li>优化数据结构</li><li>降低运算消耗</li></ul><p>ECS架构</p><ul><li>采用面向数据概念优化架构，提升运算性能</li></ul><p>并行运算与GPU加速</p><ul><li>采用并行计算提升性能</li><li>采用GPU加速减少CPU消耗</li></ul><h5 id="优化性价比曲线"><a href="#优化性价比曲线" class="headerlink" title="优化性价比曲线"></a>优化性价比曲线</h5><p><img src="https://cdn.jsdelivr.net/gh/ShyHeart/Photo/photo/image-20211206213733619.png" alt="image-20211206213733619"></p><h6 id="优化方案参考"><a href="#优化方案参考" class="headerlink" title="优化方案参考"></a>优化方案参考</h6><p>背景</p><p>由于正在开发的游戏涉及到10万个移动角色，如果单服10000玩家的话，采用双向循环查找，那就是10亿的量级，太恐怖了，不得不对算法做优化</p><p>场景：1000*1000的地图，10000客户端角色两个角色间的距离是10时，有效</p><p>优化前</p><p>随机生成10000角色的位置信息，然后计算那些角色的信息需要发给范围的客户端。原始：使用最简单的双向循环查找算法，两重for循环，每找到一个时数量+1结果如下，找到40030个有效值，耗时880ms</p><p>优化一</p><p>位置是双向的，也就是A在B的范围内，B在A的范围内，因此只需要循环N<em>（N-1）&#x2F;2次，优化结果耗时*<em>416ms</em></em></p><p>优化二</p><p>由于大部分的角色位置相距较远，因此对地图进行分区，以100为单位，整个地图被分成100个区域，创建区域数组Player[100][]，然后计算每个客户端的更新范围所在的区域，并将客户端加入到区域中，注意客户端的四个顶点可能在不同的区域上，此时在几个区域就要加入几个区域。最后计算角色所在区域，并和区域内的Player计算距离。此算法得到的结果是<strong>22.5ms</strong></p><p>优化三</p><p>区域大小用2AN来表示，从而在计算角色所在<br>区域时可以用移位来处理，使用64作为区域大<br>小，优化后平均耗时是：<strong>15.5ms</strong></p><p>优化四</p><p>从算法的耗时来看，区域小一些，则区域数量<br>变多，但每个区域内的角色数量就少了，需要<br>计算的量也会变少，使用32作为区域大小后，<br>耗时为：<strong>9.5ms</strong></p><p>优化五</p><p>如果地图变大一些，角色更加稀疏，则计算量<br>会更少，使用10000<em>10000的地图后， 同样64<br>大小的区域，耗时是：*<em>1.8ms</em></em></p><p>其他案例</p><p><a href="http://cppblog.com/jaxe/archive/2011/06/20/148998.html">http://cppblog.com/jaxe/archive/2011/06/20/148998.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity-资源优化</title>
    <link href="/2021/12/23/Engine/Unity%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/"/>
    <url>/2021/12/23/Engine/Unity%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h3><p>目标： 一般从两个方面 性能 品质</p><p>内存占用 大小&#x2F;容量 运行效率（帧率高不高）</p><p>先考虑资源</p><p>基础资源类型</p><p>模型 动作 纹理 声音 字体</p><p>综合资源类型</p><p>场景（地形 光源）UI（图集）粒子系统</p><p><strong>游戏资源的制作规范</strong></p><p>模型：三角形数量 UV LOD</p><p>动作：时长 帧率</p><p>贴图：尺寸 格式</p><img src="/2021/12/23/Engine/Unity%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/image-20211209094742121.png" class="" title="image-20211209094742121"><p><strong>模型导入优化</strong></p><p>模型压缩 网格优化 可读写 Lightmap UV</p><p>动作导入 动画压缩 Rig-优化游戏对象</p><p>纹理格式 POT 纹理大小 压缩选项</p><p><strong>场景优化</strong></p><p>资源的组织 引用及依赖 资源复用</p><p><strong>优化流程自动化</strong></p><p>Unity MeshCompression 网格优化</p><img src="/2021/12/23/Engine/Unity%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/image-20211209100212083.png" class="" title="image-20211209100212083"><img src="/2021/12/23/Engine/Unity%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/image-20211209100358273.png" class="" title="image-20211209100358273"><p>模型的Optimize GameObject开启后 ，模型的子节点将压缩成一个节点</p><p>资源后处理 代码</p><p>Unity AssetPostProcessor</p><p><a href="https://docs.unity3d.com/2019.2/Documentation/ScriptReference/AssetPostprocessor.OnPreprocessTexture.html">https://docs.unity3d.com/2019.2/Documentation/ScriptReference/AssetPostprocessor.OnPreprocessTexture.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity性能优化</title>
    <link href="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="性能优化-CPU"><a href="#性能优化-CPU" class="headerlink" title="性能优化-CPU"></a>性能优化-CPU</h4><p><strong>干扰 内部与外部</strong></p><p>内部：Profiler，Vertical Sync（垂直同步），Log output 凹操作性能耗费很高</p><p>外部：CPU 内存 IO</p><p><strong>工具</strong></p><p><strong>Unity Profiler</strong></p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211213161040737.png" class="" title="image20211213161040737"><p><strong>Custom Profiler</strong>（自定义的Profiler）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    CustomProfrile();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CustomProfrile</span>()</span><br>&#123;<br>    UnityEngine.Profiling.Profiler.BeginSample(<span class="hljs-string">&quot;CustomProfrile&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>    &#123;<br>        CustomFunction();<br>    &#125;<br>    UnityEngine.Profiling.Profiler.EndSample();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CustomFunction</span>()</span><br>&#123;<br>    UnityEngine.Profiling.Profiler.BeginSample(<span class="hljs-string">&quot;CustomFunction&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>    &#123;<br>        CustomCale();<br>    &#125;<br>    UnityEngine.Profiling.Profiler.EndSample();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CustomCale</span>()</span><br>&#123;<br>    UnityEngine.Profiling.Profiler.BeginSample(<span class="hljs-string">&quot;CustomCale&quot;</span>);<br>    <span class="hljs-built_in">float</span> t = <span class="hljs-number">100</span>, f = <span class="hljs-number">0f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>    &#123;<br>        f += Mathf.Pow(Mathf.Sin(i), t);<br>    &#125;<br>    UnityEngine.Profiling.Profiler.EndSample();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Timer&amp;Log</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProTimer</span> :<span class="hljs-title">IDisposable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> times;<br>   <span class="hljs-keyword">private</span> Stopwatch watch;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProTimer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>):<span class="hljs-title">this</span>(<span class="hljs-params">name,<span class="hljs-number">0</span></span>)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProTimer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name,<span class="hljs-built_in">int</span> times</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name=name;<br>        <span class="hljs-keyword">this</span>.times=times;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.times&lt;=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">this</span>.times=<span class="hljs-number">1</span>;<br>        watch=Stopwatch.StartNew();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>()</span>&#123;<br>        watch.Stop();<br>        <span class="hljs-built_in">float</span> ms=watch.ElapsedMinlliseconds;<br>        <span class="hljs-keyword">if</span>(times&gt;<span class="hljs-number">1</span>)&#123;<br>            Debug.Debug.Log(<span class="hljs-built_in">string</span>.Format(<span class="hljs-string">&quot;ProTimer : [&#123;0&#125;] finished: [&#123;1:0.00&#125;ms] total, [&#123;2:0.000000&#125;ms] per peroid for [&#123;3&#125;] times&quot;</span><br>            ,name ,ms,ms/timer,times));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            Debug.Debug.Log(<span class="hljs-built_in">string</span>.Format(<span class="hljs-string">&quot;ProTimer : [&#123;0&#125;] finished: [&#123;1:0.00&#125;ms] total&quot;</span>,name,ms ));<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="CPU优化要点"><a href="#CPU优化要点" class="headerlink" title="CPU优化要点"></a>CPU优化要点</h5><p>CPU优化要点：Unity脚本最佳做法 数据结构优化 算法优化</p><p><strong>Unity脚本最佳做法</strong></p><ul><li>Component的缓冲与获取</li><li><strong>移除空声明</strong></li><li>避免Find和SendMessage(大概比直接函数调用慢2000倍)</li><li>禁止未使用的游戏脚本与对象 （生存周期 可见性 距离）</li><li>对象池</li></ul><p>Component获取的三种方式</p><ul><li>(CompTest)Component(“Testcomponent”)</li><li>GetComponent<CompTest>();</li><li>(CompTest)GetComponent(typeof(CompTest))</li></ul><p>性能消耗</p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211213202822084.png" class="" title="image20211213202822084"><p>避免Find和SendMessage-替代方案</p><ul><li>直接引用游戏对象</li><li>静态类</li><li>单例组件</li><li>自定义消息系统</li></ul><p>性能分析注意事项</p><ul><li>分析第一，优化第二</li><li>分析要透彻，避免一知半解盲目优化</li><li>避免为性能分析增加过多临时代码</li><li>增加的日志在头花完成及时移除</li><li>尽量通过DeBug发现问题</li></ul><h4 id="性能优化-GPU"><a href="#性能优化-GPU" class="headerlink" title="性能优化-GPU"></a>性能优化-GPU</h4><p><strong>原理</strong></p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211213204405189.png" class="" title="image20211213204405189"><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h6><p>Unity Profiler Frame Debug GPU Profiler</p><h6 id="GPU优化要点"><a href="#GPU优化要点" class="headerlink" title="GPU优化要点"></a><strong>GPU优化要点</strong></h6><ul><li>Drawcall</li><li>Batching</li><li>图集</li><li>移动设备优化</li></ul><p>渲染对象关系</p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211213205858211.png" class="" title="image20211213205858211"><p>Dynamic Batching</p><ul><li>所有Mesh实例具有相同的材质引用</li><li>只有Partucle System和MeshRenderer可以动态批*（随Unity版本不同）</li><li>Vertex Attribute总数必须小于900</li><li>所有实例必须采用Uniform Scale或所有Mesh都采用Nonuniform Scale，不能混合使用。</li><li>必须引用相同的LightMap</li><li>材质Shader不用使用Multiple Passes</li><li>Mesh实例不能接受实时阴影</li><li>每个Batch最大300Mesh</li><li>最多32000Mesh可以Batch</li></ul><p>Static Batching</p><ul><li>所有Mesh实例具有相同的材质引用</li><li>所有Mesh必须标记为Static</li><li>额外的内存占用</li><li>静态对象无法通过原始的Transform移动</li><li>任何一点可见，全部渲染</li></ul><p>移动设备优化要点</p><ul><li>最小的Drawcall</li><li>最小的材质数量</li><li>最小的纹理尺寸</li><li>方形&amp;POT纹理</li><li>Shader中使用尽可能低的数据类型</li><li>避免Alpha测试</li></ul><h4 id="性能优化-内存"><a href="#性能优化-内存" class="headerlink" title="性能优化-内存"></a>性能优化-内存</h4><h6 id="内存占用优化"><a href="#内存占用优化" class="headerlink" title="内存占用优化"></a>内存占用优化</h6><p>分析工具 <strong>Unity Profiler</strong></p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216194107133.png" class="" title="image20211216194107133"><p>除此之外，unity还有另外一个更加直观的工具</p><p><strong>Memory Profiler</strong> (开源库之中)</p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216194721571.png" class="" title="image20211216194721571"><h6 id="Unity占用组成"><a href="#Unity占用组成" class="headerlink" title="Unity占用组成"></a><strong>Unity占用组成</strong></h6><ul><li><p>Unity</p></li><li><p>Mono</p></li><li><p>GfxDriver(显卡驱动消耗的内存)</p></li><li><p>FMOD（音频引擎）</p></li><li><p>细分(Texture Mesh Animation Shader Font)</p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216211225511.png" class="" title="image20211216211225511"><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216212601027.png" class="" title="image20211216212601027"><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216212655362.png" class="" title="image20211216212655362"></li></ul><h6 id="GC优化"><a href="#GC优化" class="headerlink" title="GC优化"></a>GC优化</h6><p>GC 内存堆栈 垃圾回收</p><p><a href="https://zhuanlan.zhihu.com/p/265217138">https://zhuanlan.zhihu.com/p/265217138</a></p><img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216213311223.png" class="" title="image20211216213311223"><p>优化要点</p><ul><li>减少频繁的对象创建</li><li>避免装箱</li><li>善用缓存<img src="/2021/12/23/Engine/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20211216213529292.png" class="" title="image-20211216213529292"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
